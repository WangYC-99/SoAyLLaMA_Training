{"Query_en": "Research interests of Yuantong Li at Purdue University", "Answer": ["Interactive Attention", "Semantic Text Matching", "Mixture Model", "Non-iterative Quantile Change Detection", "Heavy-tailed Components", "Matching Score", "Implicit Matching", "Global Matching Signal", "Source Text", "Specific Source"], "route": "searchPerson", "code": "info = {'name': 'Yuantong Li', 'organization': 'Purdue University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ninterests = target_person_info['interests']\nfinal_result = interests\n", "result": ["Interactive Attention", "Semantic Text Matching", "Mixture Model", "Non-iterative Quantile Change Detection", "Heavy-tailed Components", "Matching Score", "Implicit Matching", "Global Matching Signal", "Source Text", "Specific Source"], "exe_time": 1.1825251579284668}
{"Query_en": "Citation count of SooHyung Kim at Samsung Research", "Answer": 2, "route": "searchPerson", "code": "info = {'name': 'SooHyung Kim', 'organization': 'Samsung Research'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\nnum_citation = target_person_info['num_citation']\nfinal_result = num_citation\n", "result": 2, "exe_time": 1.2426397800445557}
{"Query_en": "Number of published papers by Kyumin Lee at Department of Computer Science, Worcester Polytechnic Institute", "Answer": 139, "route": "searchPerson", "code": "info = {'name': 'Kyumin Lee', 'organization': 'Department of Computer Science, Worcester Polytechnic Institute'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\nnum_pubs = target_person_info['num_pubs']\nfinal_result = num_pubs\n", "result": 139, "exe_time": 1.3554015159606934}
{"Query_en": "Which institution does Piotr Indyk who researches in Piotr Indyk field belong to?", "Answer": "Department of Electrical Engineering and Computer Science, Massachusetts Institute of Technology;Computer Science & Artificial Intelligence Laboratory, Massachusetts Institute of Technology", "route": "searchPerson", "code": "info = {'name': 'Piotr Indyk', 'interest': 'Piotr Indyk'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\norganization = target_person_info['organization']\nfinal_result = organization\n", "result": "Department of Electrical Engineering and Computer Science, Massachusetts Institute of Technology;Computer Science & Artificial Intelligence Laboratory, Massachusetts Institute of Technology", "exe_time": 1.1660761833190918}
{"Query_en": "Citation count of Peng Wang who researches in Customer Service field", "Answer": 77, "route": "searchPerson", "code": "info = {'name': 'Peng Wang', 'interest': 'Customer Service'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\nnum_citation = target_person_info['num_citation']\nfinal_result = num_citation\n", "result": 77, "exe_time": 1.208716869354248}
{"Query_en": "Number of papers published by Eric Kim who researches in Breast Cancer field", "Answer": 32, "route": "searchPerson", "code": "info = {'name': 'Eric Kim', 'interest': 'Breast Cancer'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\nnum_pubs = target_person_info['num_pubs']\nfinal_result = num_pubs\n", "result": 32, "exe_time": 1.236464023590088}
{"Query_en": "Who are the researchers at Insight Centre for Data Analytics, University College Dublin?", "Answer": ["Neil Hurley", "Aonghus Lawlor", "Elias Tragos"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Naren Ramakrishnan', 'organization': 'Insight Centre for Data Analytics, University College Dublin'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\ncoauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\nfinal_result = coauthors_name_list\n", "result": "exe error", "exe_time": 1.9827642440795898}
{"Query_en": "Who are the researchers in Machine Learning field?", "Answer": ["Michael I. Jordan", "Andrew Ng", "Quoc Viet Le", "Jimmy Ba", "Jiawei Han", "Philip S. Yu", "Yangqing Jia", "Jure Leskovec", "Paul M. Thompson", "Ian T. Foster"], "route": "searchPerson", "code": "info = {'interest': 'Machine Learning'}\ninterest = info['interest']\n\nperson_list = searchPerson(interest = interest)\nname_list = [person_list[i]['name'] for i in range(len(person_list))]\nfinal_result = name_list\n", "result": ["Michael I. Jordan", "Andrew Ng", "Quoc Viet Le", "Jimmy Ba", "Jiawei Han", "Philip S. Yu", "Yangqing Jia", "Jure Leskovec", "Paul M. Thompson", "Ian T. Foster"], "exe_time": 0.9414026737213135}
{"Query_en": "Who are the collaborators of Daniel Zügner at Microsoft Research Cambridge?", "Answer": ["Stephan Günnemann", "Aleksandar Bojchevski", "Jan Schuchardt", "Chin-Wei Huang", "Jure Leskovec"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Daniel Zügner', 'organization': 'Microsoft Research Cambridge'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\ncoauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\nfinal_result = coauthors_name_list\n", "result": ["Stephan Günnemann", "Aleksandar Bojchevski", "Jan Schuchardt", "Chin-Wei Huang", "Jure Leskovec"], "exe_time": 1.8516545295715332}
{"Query_en": "Who are the collaborators of Flavio Chierichetti in Social Network field?", "Answer": ["Ravi Kumar", "Silvio Lattanzi", "Anirban Dasgupta", "Andrew Tomkins", "Jon M. Kleinberg", "Sergei Vassilvitskii", "Marco Bressan", "Andrei Zary Broder", "Mohammad Mahdian", "Mauro Sozio", "Alessandro Epasto", "Vahab S. Mirrokni", "David P. Woodruff"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Flavio Chierichetti', 'interest': 'Social Network'}\ninterest = info['interest']\nname = info['name']\n\ninterest_person_list = searchPerson(interest = interest)\ninterest_person_id_list = [person['person_id'] for person in interest_person_list]\ntarget_list = []\nfor interest_person_id in interest_person_id_list:\n    coauthors = getCoauthors(person_id = interest_person_id)\n    coauthor_name_list = [coauthor['name'] for coauthor in coauthors]\n    if name in coauthor_name_list:\n        target_list.append(getPersonBasicInfo(person_id=interest_person_id)['name'])\nfinal_result = target_list\n", "result": ["Jon M. Kleinberg"], "exe_time": 2.4512765407562256}
{"Query_en": "Who at Department of Computer Science, University of California, Los Angeles has a collaboration with Yunsheng Bai?", "Answer": ["Yizhou Sun", "Junheng Hao"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Yunsheng Bai', 'organization': 'Department of Computer Science, University of California, Los Angeles'}\norganization = info['organization']\nname = info['name']\n\norganization_person_list = searchPerson(organization = organization)\norganization_person_id_list = [person['person_id'] for person in organization_person_list]\ntarget_list = []\nfor interest_person_id in organization_person_id_list:\n    coauthors = getCoauthors(person_id = interest_person_id)\n    coauthor_name_list = [coauthor['name'] for coauthor in coauthors]\n    if name in coauthor_name_list:\n        target_list.append(getPersonBasicInfo(person_id=interest_person_id)['name'])\nfinal_result = target_list\n", "result": ["Yizhou Sun", "Junheng Hao"], "exe_time": 2.564790725708008}
{"Query_en": "Who in Gemini Native field has a collaboration with Dobri Dobrev?", "Answer": ["Michal Aharon", "Avi Shahar", "Assaf Singer", "Hadas Vogel"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Dobri Dobrev', 'interest': 'Gemini Native'}\ninterest = info['interest']\nname = info['name']\n\ninterest_person_list = searchPerson(interest = interest)\ninterest_person_id_list = [person['person_id'] for person in interest_person_list]\ntarget_list = []\nfor interest_person_id in interest_person_id_list:\n    coauthors = getCoauthors(person_id = interest_person_id)\n    coauthor_name_list = [coauthor['name'] for coauthor in coauthors]\n    if name in coauthor_name_list:\n        target_list.append(getPersonBasicInfo(person_id=interest_person_id)['name'])\nfinal_result = target_list\n", "result": ["Michal Aharon", "Avi Shahar", "Assaf Singer", "Hadas Vogel"], "exe_time": 2.451965093612671}
{"Query_en": "What are the papers published by Besmira Nushi at Microsoft Research Lab – AI?", "Answer": ["Guidelines for Human-AI Interaction.", "Software engineering for machine learning: a case study", "Does the Whole Exceed its Parts? The Effect of AI Explanations on Complementary Team Performance", "Beyond Accuracy: The Role of Mental Models in Human-AI Team Performance.", "Updates in Human-AI Teams: Understanding and Addressing the Performance/Compatibility Tradeoff", "On Human Intellect and Machine Failures: Troubleshooting Integrative Machine Learning Systems.", "Towards Accountable AI: Hybrid Human-Machine Analyses for Characterizing System Failure.", "Uncertain time-series similarity: return to the basics", "Understanding Failures of Deep Networks via Robust Feature Extraction", "SQuINTing at VQA Models - Introspecting VQA Models With Sub-Questions."], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Besmira Nushi', 'organization': 'Microsoft Research Lab – AI'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\npublications_title_list = [publication['title'] for publication in publications_list]\nfinal_result = publications_title_list\n", "result": ["Guidelines for Human-AI Interaction.", "Software engineering for machine learning: a case study", "Does the Whole Exceed its Parts? The Effect of AI Explanations on Complementary Team Performance", "Beyond Accuracy: The Role of Mental Models in Human-AI Team Performance.", "Updates in Human-AI Teams: Understanding and Addressing the Performance/Compatibility Tradeoff", "On Human Intellect and Machine Failures: Troubleshooting Integrative Machine Learning Systems.", "Towards Accountable AI: Hybrid Human-Machine Analyses for Characterizing System Failure.", "Uncertain time-series similarity: return to the basics", "Understanding Failures of Deep Networks via Robust Feature Extraction", "SQuINTing at VQA Models - Introspecting VQA Models With Sub-Questions."], "exe_time": 1.8602476119995117}
{"Query_en": "What is the citation count of the representative work of Yinpeng Dong at Department of Computer Science and Technology, Tsinghua University?", "Answer": 2236, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Yinpeng Dong', 'organization': 'Department of Computer Science and Technology, Tsinghua University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_num_citation = target_publication_dict['num_citation']\nfinal_result = target_num_citation\n", "result": 2236, "exe_time": 2.2419841289520264}
{"Query_en": "In which year was the representative work of Aleksander Fabijan at Microsoft Corporation published?", "Answer": 2017, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Aleksander Fabijan', 'organization': 'Microsoft Corporation'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\nmax_citation = publications_list[0]\nfinal_result = max_citation['year']\n", "result": 2017, "exe_time": 1.8176705837249756}
{"Query_en": "Who are the authors of the representative work of Dantong Yu at Martin Tuchman School of Management, New Jersey Institute of Technology?", "Answer": ["dantong yu and", "dantong yu", "thomas g robertazzi"], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Dantong Yu', 'organization': 'Martin Tuchman School of Management, New Jersey Institute of Technology'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\nmax_citation = publications_list[0]\nfinal_result = max_citation['year']\n", "result": 2003, "exe_time": 1.909116506576538}
{"Query_en": "What are the papers published by Jiaxi Tang in Recommender System field?", "Answer": ["Personalized Top-N Sequential Recommendation via Convolutional Sequence Embedding.", "Sequential Recommendation with User Memory Networks.", "Ranking Distillation: Learning Compact Ranking Models With High Performance for Recommender System.", "Understanding and Improving Knowledge Distillation", "Towards Neural Mixture Recommender for Long Range Dependent User Sequences", "Off-policy Learning in Two-stage Recommender Systems", "Revisiting Adversarially Learned Injection Attacks Against Recommender Systems", "Distributionally-robust Recommendations for Improving Worst-case User Experience", "Browsing Regularities in Hedonic Content Systems."], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Jiaxi Tang', 'interest': 'Recommender System'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name=name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\npublications_title_list = [publication['title'] for publication in publications_list]\nfinal_result = publications_title_list\n", "result": ["Personalized Top-N Sequential Recommendation via Convolutional Sequence Embedding.", "Sequential Recommendation with User Memory Networks.", "Ranking Distillation: Learning Compact Ranking Models With High Performance for Recommender System.", "Understanding and Improving Knowledge Distillation", "Towards Neural Mixture Recommender for Long Range Dependent User Sequences", "Off-policy Learning in Two-stage Recommender Systems", "Revisiting Adversarially Learned Injection Attacks Against Recommender Systems", "Distributionally-robust Recommendations for Improving Worst-case User Experience", "Browsing Regularities in Hedonic Content Systems."], "exe_time": 1.78249192237854}
{"Query_en": "What is the citation count of the representative work of Ce Zhang in Machine Learning field?", "Answer": 998, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Ce Zhang', 'interest': 'Machine Learning'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_num_citation = target_publication_dict['num_citation']\nfinal_result = target_num_citation\n", "result": 998, "exe_time": 2.074333667755127}
{"Query_en": "In which year was the representative work of Constance Moore in Magnetic Resonance Spectroscopy field published?", "Answer": 1997, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Constance Moore', 'interest': 'Magnetic Resonance Spectroscopy'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name=name, interest=interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\nperson_pubs = getPersonPubs(person_id=target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = person_pubs[0]\npublication_year = target_publication_dict['year']\nfinal_result = publication_year\n", "result": 1997, "exe_time": 2.035635471343994}
{"Query_en": "Who are the authors of the representative work of Sheo Yon Jhin in Neural Networks field?", "Answer": ["Sheo Yon Jhin", "Heejoo Shin", "Seoyoung Hong", "Minju Jo", "Solhee Park", "Noseong Park", "Seungbeom Lee", "Hwiyoung Maeng", "Seungmin Jeon"], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Sheo Yon Jhin', 'interest': 'Neural Networks'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\nauthor_name_list = target_publication_dict['authors_name_list']\nfinal_result = author_name_list\n", "result": ["Sheo Yon Jhin", "Heejoo Shin", "Seoyoung Hong", "Minju Jo", "Solhee Park", "Noseong Park", "Seungbeom Lee", "Hwiyoung Maeng", "Seungmin Jeon"], "exe_time": 2.1253154277801514}
{"Query_en": "Is Hengguan Huang at School of Computing, National University of Singapore male or female?", "Answer": "male", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Hengguan Huang', 'organization': 'School of Computing, National University of Singapore'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_gender = target_person_basic_info['gender']\nfinal_result = target_person_gender\n", "result": "male", "exe_time": 1.8682167530059814}
{"Query_en": "What is the title of Collin Leiber at Institut fur Informatik, Ludwig-Maximilians-Universitat Munchen?", "Answer": "Other", "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Collin Leiber', 'organization': 'Institut fur Informatik, Ludwig-Maximilians-Universitat Munchen'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_title = target_publication_dict['title']\nfinal_result = target_publication_title\n", "result": "Dip-based Deep Embedded Clustering with k-Estimation", "exe_time": 2.2119858264923096}
{"Query_en": "What is the introduction of Jingrui He at Department of Computer Science, University of Illinois?", "Answer": "Her research focuses on heterogeneous machine learning, rare category analysis, active learning and semi-supervised learning, with applications in social network analysis, healthcare, and manufacturing processes. She is the recipient of the 2016 NSF CAREER Award and a three-time recipient of the IBM Faculty Award, in 2018, 2015 and 2014 respectively, and was selected for an IJCAI 2017 Early Career Spotlight. He has published more than 90 refereed articles, and is the author of the book, Analysis of Rare Categories (Springer-Verlag, 2011). Her papers have been selected as \"Best of the Conference\" by ICDM 2016, ICDM 2010, and SDM 2010. She has served on the senior program committee/program committee for Knowledge Discovery and Data Mining (KDD), International Joint Conference on Artificial Intelligence (IJCAI), Association for the Advancement of Artificial Intelligence (AAAI), SIAM International Conference on Data Mining (SDM), and International Conference on Machine Learning (ICML).", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Jingrui He', 'organization': 'Department of Computer Science, University of Illinois'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_bio = target_person_basic_info['bio']\nfinal_result = target_person_bio\n", "result": "Her research focuses on heterogeneous machine learning, rare category analysis, active learning and semi-supervised learning, with applications in social network analysis, healthcare, and manufacturing processes. She is the recipient of the 2016 NSF CAREER Award and a three-time recipient of the IBM Faculty Award, in 2018, 2015 and 2014 respectively, and was selected for an IJCAI 2017 Early Career Spotlight. He has published more than 90 refereed articles, and is the author of the book, Analysis of Rare Categories (Springer-Verlag, 2011). Her papers have been selected as \"Best of the Conference\" by ICDM 2016, ICDM 2010, and SDM 2010. She has served on the senior program committee/program committee for Knowledge Discovery and Data Mining (KDD), International Joint Conference on Artificial Intelligence (IJCAI), Association for the Advancement of Artificial Intelligence (AAAI), SIAM International Conference on Data Mining (SDM), and International Conference on Machine Learning (ICML).", "exe_time": 1.8504443168640137}
{"Query_en": "What is the educational background of Cheng Li at Google?", "Answer": "", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Cheng Li', 'organization': 'Google'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_education_experience = target_person_basic_info['education_experience']\nfinal_result = target_person_education_experience\n", "result": "", "exe_time": 1.9390053749084473}
{"Query_en": "What is the email of Maosen Li at Xidian Universityidian University?", "Answer": "maosenli95@gmail.com", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Maosen Li', 'organization': 'Xidian University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_email = target_person_basic_info['email']\nfinal_result = target_person_email\n", "result": "maosenli95@gmail.com", "exe_time": 1.7598731517791748}
{"Query_en": "Is Ashwinkumar Badanidiyuru Varadaraja in Communication Complexity field male or female?", "Answer": "male", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Ashwinkumar Badanidiyuru Varadaraja', 'interest': 'Communication Complexity'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_gender = target_person_basic_info['gender']\nfinal_result = target_person_gender\n", "result": "male", "exe_time": 1.9088919162750244}
{"Query_en": "What is the title of Andrew Miller in Live Phylogeny field?", "Answer": "Engineer", "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Andrew Miller', 'interest': 'Live Phylogeny'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_title = target_publication_dict['title']\nfinal_result = target_title\n", "result": "Does government social media promote users' information security behavior towards COVID-19 scams? Cultivation effects and protective motivations", "exe_time": 2.0050032138824463}
{"Query_en": "What is the introduction of Ruijie Zhao in Intrusion Detection field?", "Answer": "His research interests include deep learning, network security, and Internet of Things", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Ruijie Zhao', 'interest': 'Intrusion Detection'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_bio = target_person_basic_info['bio']\nfinal_result = target_person_bio\n", "result": "His research interests include deep learning, network security, and Internet of Things", "exe_time": 1.8300464153289795}
{"Query_en": "What is the educational background of Kaiyi Ji in Convergence Rate field?", "Answer": "Ph.D. degree from the Electrical and Computer Engineering Department of The Ohio State University in December, 2021<br><br>B.S. degree from University of Science and Technology of China in 2016.", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Kaiyi Ji', 'interest': 'Convergence Rate'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_education_experience = target_person_basic_info['education_experience']\nfinal_result = target_person_education_experience\n", "result": "Ph.D. degree from the Electrical and Computer Engineering Department of The Ohio State University in December, 2021<br><br>B.S. degree from University of Science and Technology of China in 2016.", "exe_time": 1.9853792190551758}
{"Query_en": "What is the email of Yilun Jin in Network Embedding field?", "Answer": "yljin@pku.edu.cn;yilun.jin@connect.ust.hk", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Yilun Jin', 'interest': 'Network Embedding'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_email = target_person_basic_info['email']\nfinal_result = target_person_email\n", "result": "yljin@pku.edu.cn;yilun.jin@connect.ust.hk", "exe_time": 1.7783830165863037}
{"Query_en": "Who among the collaborators of Myeong Shin Lee at Korea Aerospace Research Institute are researching in Anomaly Detection field?", "Answer": ["Sangyup Lee"], "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Myeong Shin Lee', 'organization': 'Korea Aerospace Research Institute'}\nname = info['name']\norganization = info['organization']\ntarget_interest = info['interest']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthor_list = getCoauthors(person_id = target_person_id)\n\ntarget_coauthor_names = []\nfor coauthor in coauthor_list:\n    coauthor_id = coauthor['person_id']\n    coauthor_interests_list = getPersonInterest(person_id = coauthor_id)\n    if target_interest in coauthor_interests_list:\n        target_coauthor_names.append(coauthor['name'])\n\nfinal_result = target_coauthor_names\n", "result": "exe error", "exe_time": 2.799834966659546}
{"Query_en": "Who has the highest citation count among the collaborators of Ruichao Yang at Hong Kong Baptist University?", "Answer": "Xing Xie", "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Ruichao Yang', 'organization': 'Hong Kong Baptist University'}\nname = info['name']\norganization = info['organization']\n\n# Search the person\nperson_list = searchPerson(name=name, organization=organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# Get the coauthors\ncoauthors_list = getCoauthors(person_id=target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_citation = 0\nmax_citation_author_name = ''\n\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_citation = coauthor_info['num_citation']\n    if coauthor_citation > max_citation:\n        max_citation = coauthor_citation\n        max_citation_author_name = coauthor_info['name']\n\nfinal_result = max_citation_author_name\n", "result": "Xing Xie", "exe_time": 3.5971505641937256}
{"Query_en": "Who has the most published papers among the collaborators of Filip Radenovic at Facebook AI?", "Answer": "Abhimanyu Dubey", "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Filip Radenovic', 'organization': 'Facebook AI'}\nname = info['name']\norganization = info['organization']\n\n# Search the person\nperson_list = searchPerson(name=name, organization=organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# Get the coauthors\ncoauthors_list = getCoauthors(person_id=target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_pubs = 0\nmax_pubs_author_name = ''\n\n# Iterate each coauthor and calculate his/her publication number\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_pubs = coauthor_info['num_pubs']\n    if coauthor_pubs > max_pubs:\n        max_pubs = coauthor_pubs\n        max_pubs_author_name = coauthor_info['name']\n\nfinal_result = max_pubs_author_name\n", "result": "Abhimanyu Dubey", "exe_time": 3.748237371444702}
{"Query_en": "Who among the collaborators of Sébastien Piat in Quantum Computing field are at Siemens Healthineersinstitution?", "Answer": ["Paul Klein"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Sébastien Piat', 'interest': 'Quantum Computing'}\ninterest = info['interest']\nname = info['name']\n\ninterest_person_list = searchPerson(interest = interest)\ninterest_person_id_list = [person['person_id'] for person in interest_person_list]\ntarget_list = []\nfor interest_person_id in interest_person_id_list:\n    coauthors = getCoauthors(person_id = interest_person_id)\n    coauthor_name_list = [coauthor['name'] for coauthor in coauthors]\n    if name in coauthor_name_list:\n        target_list.append(getPersonBasicInfo(person_id=interest_person_id)['name'])\nfinal_result = target_list\n", "result": "exe error", "exe_time": 2.450132369995117}
{"Query_en": "Who has the highest citation count among the collaborators of Taiki Miyagawa in Human Physiology field?", "Answer": "Jun Sakuma", "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Taiki Miyagawa', 'interest': 'Human Physiology'}\nname = info['name']\ninterest = info['interest']\n\n# get specific person's information\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# Get the coauthors\ncoauthors_list = getCoauthors(person_id=target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_citation = 0\nmax_citation_author_name = ''\n\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_citation = coauthor_info['num_citation']\n    if coauthor_citation > max_citation:\n        max_citation = coauthor_citation\n        max_citation_author_name = coauthor_info['name']\n\nfinal_result = max_citation_author_name\n", "result": "Jun Sakuma", "exe_time": 3.632976531982422}
{"Query_en": "Who has the most published papers among the collaborators of Junzhou Zhao in Online Social Network field?", "Answer": "Xiaohong Guan", "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Junzhou Zhao', 'interest': 'Online Social Network'}\nname = info['name']\ninterest = info['interest']\n\n# get specific person's information\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# Get the coauthors\ncoauthors_list = getCoauthors(person_id=target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_pubs = 0\nmax_pubs_author_name = ''\n\n# Iterate each coauthor and calculate his/her publication number\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_pubs = coauthor_info['num_pubs']\n    if coauthor_pubs > max_pubs:\n        max_pubs = coauthor_pubs\n        max_pubs_author_name = coauthor_info['name']\n\nfinal_result = max_pubs_author_name\n", "result": "Xiaohong Guan", "exe_time": 3.782477617263794}
{"Query_en": "Who are the collaborators of the collaborators of Fei Wu at Penn State University?", "Answer": ["Guanjie Zheng", "Jiawei Han", "Hua Wei", "Fei Wu", "Huaxiu Yao", "Bolin Ding", "Chacha Chen", "Vikash Gayah", "Quanquan Gu", "Lu-An Tang", "Xianfeng Tang", "Jae-Gil Lee", "Daniel Kifer", "Kan Wu", "Yanwei Yu", "Weinan Zhang", "Ying Wei", "Chumeng Liang", "Eric Liu", "Junzhou Huang", "Xing Xie", "Xifeng Yan", "Yizhou Sun", "Philip S. Yu", "Jian Pei", "Jing Gao", "Xiang Ren", "Chi Wang", "Johannes Fürnkranz", "Chao Zhang", "Kai Ming Ting", "Katharina Morik", "Jingbo Shang", "Yu Zhang", "Hong Cheng", "Deng Cai", "Carl Yang", "Jessie Li", "Guanjie Zheng", "Chacha Chen", "Vikash Gayah", "Yuandong Wang", "Kan Wu", "Jie Xu", "Fei Wu", "Wei Cheng", "Wenbo Guo", "Dongsheng Luo", "Jianxin Li", "Huaxiu Yao", "Tianyu Wo", "Derron Xu", "Yaliang Li", "Jingren Zhou", "Jiawei Han", "Yuexiang Xie", "Jessie Li", "Dawei Gao", "Ce Zhang", "Xu Yu", "Fei Sun", "Bo Zhao", "Jinyang Gao", "Zhewei Wei", "Daoyuan Chen", "Jing Gao", "Jirong Wen", "Lei Chen", "Wayne Xin Zhao", "Yongxin Tong", "Lu Qin", "Liuyi Yao", "Chi Wang", "Lu Su", "Bin Cui", "Andreas Pfadler", "Zimu Zhou", "Jie Xu", "Tianyu Wo", "Hongzhi Yin", "Hua Wei", "Fei Wu", "Kai Zheng", "Jessie Li", "Suhang Wang", "Huaxiu Yao", "Haoming Jiang", "Jiliang Tang", "Prasenjit Mitra", "Yanwei Yu", "Zhengyang Wang", "Jessie Li", "Charu C. Aggarwal", "Wei Jin", "Limeng Cui", "Tuo Zhao", "Guanjie Zheng", "Yozen Liu", "Neil Shah", "Xiaorui Liu", "Tianxiang Zhao", "Yu Wang", "Han Xu", "Haoyu Wang", "Tianyu Wo", "Chunxiao Xing", "Junfan Chen", "Yuandong Wang", "Shuiwang Ji", "Jiayu Zhou", "Paul M. Thompson", "Qingyang Li", "Hongtu Zhu", "Zhiwei Qin (Tony)", "Jie Wang", "Zheng Wang", "Liang Sun", "Ian N. Davidson", "Lingyu Zhang", "Xiaocheng Tang", "Xiaofei He", "Jessie Li", "Xianfeng Tang", "Ying Wei", "Suhang Wang", "Junzhou Huang", "Prasenjit Mitra", "Guanjie Zheng", "Charu C. Aggarwal", "Chuxu Zhang", "Yanwei Yu", "Jiliang Tang", "Meng Jiang", "Defu Lian", "Kun Kuang", "Zhun Deng", "Hua Wei", "Nitesh Chawla", "Peilin Zhao", "Mehrdad Mahdavi", "Zhenbang Wu"], "route": "searchPerson -> getCoauthors -> getCoauthors", "code": "info = {'name': 'Fei Wu', 'organization': 'Penn State University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors1_list = getCoauthors(person_id = target_person_id)\n\ncoauthors2_list = []\nfor coauthor in coauthors1_list:\n    coauthors2_list.extend(getCoauthors(person_id = coauthor['person_id']))\n\ncoauthors2_names = [coauthor['name'] for coauthor in coauthors2_list]\n\nfinal_result = coauthors2_names\n", "result": ["Guanjie Zheng", "Jiawei Han", "Hua Wei", "Fei Wu", "Huaxiu Yao", "Bolin Ding", "Chacha Chen", "Vikash Gayah", "Quanquan Gu", "Lu-An Tang", "Xianfeng Tang", "Jae-Gil Lee", "Daniel Kifer", "Kan Wu", "Yanwei Yu", "Weinan Zhang", "Ying Wei", "Chumeng Liang", "Eric Liu", "Junzhou Huang", "Xing Xie", "Xifeng Yan", "Yizhou Sun", "Philip S. Yu", "Jian Pei", "Jing Gao", "Xiang Ren", "Chi Wang", "Johannes Fürnkranz", "Chao Zhang", "Kai Ming Ting", "Katharina Morik", "Jingbo Shang", "Yu Zhang", "Hong Cheng", "Deng Cai", "Carl Yang", "Jessie Li", "Guanjie Zheng", "Chacha Chen", "Vikash Gayah", "Yuandong Wang", "Kan Wu", "Jie Xu", "Fei Wu", "Wei Cheng", "Wenbo Guo", "Dongsheng Luo", "Jianxin Li", "Huaxiu Yao", "Tianyu Wo", "Derron Xu", "Yaliang Li", "Jingren Zhou", "Jiawei Han", "Yuexiang Xie", "Jessie Li", "Dawei Gao", "Ce Zhang", "Xu Yu", "Fei Sun", "Bo Zhao", "Jinyang Gao", "Zhewei Wei", "Daoyuan Chen", "Jing Gao", "Jirong Wen", "Lei Chen", "Wayne Xin Zhao", "Yongxin Tong", "Lu Qin", "Liuyi Yao", "Chi Wang", "Lu Su", "Bin Cui", "Andreas Pfadler", "Zimu Zhou", "Jie Xu", "Tianyu Wo", "Hongzhi Yin", "Hua Wei", "Fei Wu", "Kai Zheng", "Jessie Li", "Suhang Wang", "Huaxiu Yao", "Haoming Jiang", "Jiliang Tang", "Prasenjit Mitra", "Yanwei Yu", "Zhengyang Wang", "Jessie Li", "Charu C. Aggarwal", "Wei Jin", "Limeng Cui", "Tuo Zhao", "Guanjie Zheng", "Yozen Liu", "Neil Shah", "Xiaorui Liu", "Tianxiang Zhao", "Yu Wang", "Han Xu", "Haoyu Wang", "Tianyu Wo", "Chunxiao Xing", "Junfan Chen", "Yuandong Wang", "Shuiwang Ji", "Jiayu Zhou", "Paul M. Thompson", "Qingyang Li", "Hongtu Zhu", "Zhiwei Qin (Tony)", "Jie Wang", "Zheng Wang", "Liang Sun", "Ian N. Davidson", "Lingyu Zhang", "Xiaocheng Tang", "Xiaofei He", "Jessie Li", "Xianfeng Tang", "Ying Wei", "Suhang Wang", "Junzhou Huang", "Prasenjit Mitra", "Guanjie Zheng", "Charu C. Aggarwal", "Chuxu Zhang", "Yanwei Yu", "Jiliang Tang", "Meng Jiang", "Defu Lian", "Kun Kuang", "Zhun Deng", "Hua Wei", "Nitesh Chawla", "Peilin Zhao", "Mehrdad Mahdavi", "Zhenbang Wu"], "exe_time": 2.485353708267212}
{"Query_en": "Who are the collaborators of the collaborators of Zang Li in Radio Frequency Identification field?", "Answer": ["Shuiwang Ji", "Jiayu Zhou", "Paul M. Thompson", "Qingyang Li", "Hongtu Zhu", "Zhiwei Qin (Tony)", "Jie Wang", "Zheng Wang", "Liang Sun", "Ian N. Davidson", "Lingyu Zhang", "Xiaocheng Tang", "Xiaofei He", "Peng Wang", "Jieping Ye", "Zang Li", "Jiang Xu", "Jieping Ye", "Zang Li", "Ying Shan", "Jieping Ye", "Hongtu Zhu", "Lan-Zhe Guo", "Yufeng Li", "Zang Li", "Guojun Wu", "Zhe Xu", "Qinghong Lin", "Tat-Seng Chua", "Xiang Wang", "Liqiang Nie", "Yong Li", "Wenjie Wang", "Depeng Jin", "Wenqiang Lei", "An Zhang", "Chen Gao", "Yixin Cao", "Dawei Yin", "Tong Xu", "Liang Chen", "Yu Zheng", "Alexandros Karatzoglou", "Qifan Wang", "Yiqun Liu", "Zang Li", "Jieping Ye", "Yangqiu Song", "Ian N. Davidson", "Chaokun Wang", "Prithwish Chakraborty", "Xitong Zhang", "Xiaohu Qie", "Ian N. Davidson", "Xiang Wang", "Changchang Yin", "Yefeng Zheng", "Fei Wang", "Ping Zhang", "Jieping Ye", "Zifeng Wang", "Hanghang Tong", "Wanyun Cui", "Lei Li", "Wei Wang", "Bin Shao", "Wentao Wu"], "route": "searchPerson -> getCoauthors -> getCoauthors", "code": "info = {'name': 'Zang Li', 'interest': 'Radio Frequency Identification'}\ninterest = info['interest']\nname = info['name']\n\ninterest_person_list = searchPerson(interest = interest)\ninterest_person_id_list = [person['person_id'] for person in interest_person_list]\ntarget_list = []\nfor interest_person_id in interest_person_id_list:\n    coauthors1 = getCoauthors(person_id = interest_person_id)\n    coauthors2_list = [coauthor['name'] for coauthor in coauthors1]\n    if name in coauthors2_list:\n        target_list.append(getCoauthors(person_id=interest_person_id)['name'])\nfinal_result = target_list\n", "result": [], "exe_time": 2.5107922554016113}
{"Query_en": "What is the abstract of the representative work of Jianling Sun at College of Computer Science and Technology, Zhejiang University?", "Answer": "Defect prediction is a very meaningful topic, particularly at change-level. Change-level defect prediction, which is also referred as just-in-time defect prediction, could not only ensure software quality in the development process, but also make the developers check and fix the defects in time. Nowadays, deep learning is a hot topic in the machine learning literature. Whether deep learning can be used to improve the performance of just-in-time defect prediction is still uninvestigated. In this paper, to bridge this research gap, we propose an approach Deeper which leverages deep learning techniques to predict defect-prone changes. We first build a set of expressive features from a set of initial change features by leveraging a deep belief network algorithm. Next, a machine learning classifier is built on the selected features. To evaluate the performance of our approach, we use datasets from six large open source projects, i.e., Bugzilla, Columba, JDT, Platform, Mozilla, and PostgreSQL, containing a total of 137,417 changes. We compare our approach with the approach proposed by Kamei et al. The experimental results show that on average across the 6 projects, Deeper could discover 32.22% more bugs than Kamei et al's approach (51.04% versus 18.82% on average). In addition, Deeper can achieve F1-scores of 0.22-0.63, which are statistically significantly higher than those of Kamei et al.'s approach on 4 out of the 6 projects.", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Jianling Sun', 'organization': 'College of Computer Science and Technology, Zhejiang University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_abstract = target_publication_info['abstract']\nfinal_result = target_abstract\n", "result": "Defect prediction is a very meaningful topic, particularly at change-level. Change-level defect prediction, which is also referred as just-in-time defect prediction, could not only ensure software quality in the development process, but also make the developers check and fix the defects in time. Nowadays, deep learning is a hot topic in the machine learning literature. Whether deep learning can be used to improve the performance of just-in-time defect prediction is still uninvestigated. In this paper, to bridge this research gap, we propose an approach Deeper which leverages deep learning techniques to predict defect-prone changes. We first build a set of expressive features from a set of initial change features by leveraging a deep belief network algorithm. Next, a machine learning classifier is built on the selected features. To evaluate the performance of our approach, we use datasets from six large open source projects, i.e., Bugzilla, Columba, JDT, Platform, Mozilla, and PostgreSQL, containing a total of 137,417 changes. We compare our approach with the approach proposed by Kamei et al. The experimental results show that on average across the 6 projects, Deeper could discover 32.22% more bugs than Kamei et al's approach (51.04% versus 18.82% on average). In addition, Deeper can achieve F1-scores of 0.22-0.63, which are statistically significantly higher than those of Kamei et al.'s approach on 4 out of the 6 projects.", "exe_time": 2.52260684967041}
{"Query_en": "What is the PDF link of the representative work of Yu Meng at University of Illinois at Urbana-Champaign?", "Answer": "https://static.aminer.cn/upload/pdf/1009/806/2008/5bdc316717c44a1f58a06f66_0.pdf", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Yu Meng', 'organization': 'University of Illinois at Urbana-Champaign'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_pdf = target_publication_info['pdf_link']\nfinal_result = target_pdf\n", "result": "https://static.aminer.cn/upload/pdf/1009/806/2008/5bdc316717c44a1f58a06f66_0.pdf", "exe_time": 2.5259714126586914}
{"Query_en": "Which journal or conference included the representative work of Zhuoning Yuan at Netflix?", "Answer": {"id": "53a72d4220f7420be8c5fa02", "info": {"name": "KDD"}, "issue": "", "type": 10, "volume": ""}, "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Zhuoning Yuan', 'organization': 'Netflix'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_venue = target_publication_info['venue']\nfinal_result = target_venue\n", "result": {"id": "53a72d4220f7420be8c5fa02", "info": {"name": "KDD"}, "issue": "", "type": 10, "volume": ""}, "exe_time": 2.41515851020813}
{"Query_en": "What is the abstract of the representative work of Lester Mackey in Stein's Method field?", "Answer": "In analogy to the PCA setting, the sparse PCA problem is often solved by iter- atively alternating between two subtasks: cardinality-co nstrained rank-one vari- ance maximization and matrix deflation. While the former has r eceived a great deal of attention in the literature, the latter is seldom ana lyzed and is typically borrowed without justification from the PCA context. In this work, we demon- strate that the standard PCA deflation procedure is seldom ap propriate for the sparse PCA setting. To rectify the situation, we first develo p several deflation al- ternatives better suited to the cardinality-constrained c ontext. We then reformulate the sparse PCA optimization problem to explicitly reflect th e maximum additional variance objective on each round. The result is a generalized deflation procedure that typically outperforms more standard techniques on real-world datasets.", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Lester Mackey', 'interest': \"Stein's Method\"}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_abstract = target_publication_info['abstract']\nfinal_result = target_abstract\n", "result": "In analogy to the PCA setting, the sparse PCA problem is often solved by iter- atively alternating between two subtasks: cardinality-co nstrained rank-one vari- ance maximization and matrix deflation. While the former has r eceived a great deal of attention in the literature, the latter is seldom ana lyzed and is typically borrowed without justification from the PCA context. In this work, we demon- strate that the standard PCA deflation procedure is seldom ap propriate for the sparse PCA setting. To rectify the situation, we first develo p several deflation al- ternatives better suited to the cardinality-constrained c ontext. We then reformulate the sparse PCA optimization problem to explicitly reflect th e maximum additional variance objective on each round. The result is a generalized deflation procedure that typically outperforms more standard techniques on real-world datasets.", "exe_time": 2.4278500080108643}
{"Query_en": "What is the PDF link of the representative work of Chaochao Chen in Recommender Systems field?", "Answer": "https://static.aminer.cn/upload/pdf/program/5d9edbe547c8f7664602bdba_0.pdf", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Chaochao Chen', 'interest': 'Recommender Systems'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_pdf = target_publication_info['pdf_link']\nfinal_result = target_pdf\n", "result": "https://static.aminer.cn/upload/pdf/program/5d9edbe547c8f7664602bdba_0.pdf", "exe_time": 2.452967882156372}
{"Query_en": "Which journal or conference included the representative work of Yuxin Fang in Quality Control field?", "Answer": {"info": {"name": "ICCV"}, "volume": "abs/2105.01928"}, "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Yuxin Fang', 'interest': 'Quality Control'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_venue = target_publication_info['venue']\nfinal_result = target_venue\n", "result": {"info": {"name": "ICCV"}, "volume": "abs/2105.01928"}, "exe_time": 2.4135565757751465}
