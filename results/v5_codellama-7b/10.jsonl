{"Query_en": "Research interests of Mudan Wang at Department of Electronic Engineering, Tsinghua University", "Answer": ["Bevacizumab", "Capecitabine", "Colorectal Cancer", "Liver Metastases", "Oxaliplatin", "Upfront Resection", "Multicentre Study", "Perioperative Treatment", "Poor-risk Colorectal Liver-only", "Excellent Response"], "route": "searchPerson", "code": "info = {'name': 'Mudan\\xa0Wang', 'organization': 'Department of Electronic Engineering, Tsinghua University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ninterests = target_person_info['interests']\nfinal_result = interests\n", "result": ["Bevacizumab", "Capecitabine", "Colorectal Cancer", "Liver Metastases", "Oxaliplatin", "Upfront Resection", "Multicentre Study", "Perioperative Treatment", "Poor-risk Colorectal Liver-only", "Excellent Response"], "exe_time": 1.3163783550262451}
{"Query_en": "Citation count of Chaoming Song at Department of Physics, University of Miami", "Answer": 13102, "route": "searchPerson", "code": "info = {'name': 'Chaoming Song', 'organization': 'Department of Physics, University of Miami'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\nnum_citation = target_person_info['num_citation']\nfinal_result = num_citation\n", "result": 13102, "exe_time": 1.2996416091918945}
{"Query_en": "Number of published papers by Yiqin Yang at Department of Automation, Tsinghua University", "Answer": 15, "route": "searchPerson", "code": "info = {'name': 'Yiqin Yang', 'organization': 'Department of Automation, Tsinghua University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\nnum_pubs = target_person_info['num_pubs']\nfinal_result = num_pubs\n", "result": 15, "exe_time": 1.3466815948486328}
{"Query_en": "Which institution does Subhabrata Mukherjee who researches in Subhabrata Mukherjee field belong to?", "Answer": "Microsoft Research", "route": "searchPerson", "code": "info = {'name': 'Subhabrata Mukherjee', 'interest': 'Subhabrata Mukherjee'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\norganization = target_person_info['organization']\nfinal_result = organization\n", "result": "Microsoft Research", "exe_time": 1.2778217792510986}
{"Query_en": "Citation count of Hangzhi Guo who researches in Algorithmic Recourse field", "Answer": 15, "route": "searchPerson", "code": "info = {'name': 'Hangzhi Guo', 'interest': 'Algorithmic Recourse'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\nnum_citation = target_person_info['num_citation']\nfinal_result = num_citation\n", "result": 15, "exe_time": 1.281731128692627}
{"Query_en": "Number of papers published by Yongji Wu who researches in Graph Convolutional Networks field", "Answer": 9, "route": "searchPerson", "code": "info = {'name': 'Yongji Wu', 'interest': 'Graph Convolutional Networks'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\nnum_pubs = target_person_info['num_pubs']\nfinal_result = num_pubs\n", "result": 9, "exe_time": 1.2734026908874512}
{"Query_en": "Who are the researchers at deepair solutions?", "Answer": ["Kartik Yellepeddi", "Naman Shukla"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'deepair solutions', 'organization': 'IBM Research NY'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\ncoauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\nfinal_result = coauthors_name_list\n", "result": "exe error", "exe_time": 1.856466293334961}
{"Query_en": "Who are the researchers in Ctr Prediction field?", "Answer": ["Weinan Zhang", "Zhenguo Li", "Xiuqiang He", "Fangzhao Wu", "Ruiming Tang", "Xiao-Ming Wu", "Chuhan Wu", "Huifeng Guo", "Guorui Zhou", "Jian Xu"], "route": "searchPerson", "code": "info = {'interest': 'Ctr Prediction'}\ninterest = info['interest']\n\nperson_list = searchPerson(interest = interest)\nname_list = [person_list[i]['name'] for i in range(len(person_list))]\nfinal_result = name_list\n", "result": ["Weinan Zhang", "Zhenguo Li", "Xiuqiang He", "Fangzhao Wu", "Ruiming Tang", "Xiao-Ming Wu", "Chuhan Wu", "Huifeng Guo", "Guorui Zhou", "Jian Xu"], "exe_time": 0.9613237380981445}
{"Query_en": "Who are the collaborators of José Bento Ayres Pereira at Computer Science Department, Boston College?", "Answer": ["Stratis Ioannidis", "Niranjan Damera Venkata", "Jinyun Yan", "Jean-Christophe Lachance", "Laurence Yang"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'José Bento Ayres Pereira', 'organization': 'Computer Science Department, Boston College'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\ncoauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\nfinal_result = coauthors_name_list\n", "result": ["Stratis Ioannidis", "Niranjan Damera Venkata", "Jinyun Yan", "Jean-Christophe Lachance", "Laurence Yang"], "exe_time": 1.954960584640503}
{"Query_en": "Who are the collaborators of Yufei Tang in Dynamic Programming field?", "Answer": ["Xingquan Zhu"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Yufei Tang', 'interest': 'Dynamic Programming'}\ninterest = info['interest']\nname = info['name']\n\ninterest_person_list = searchPerson(interest = interest)\ninterest_person_id_list = [person['person_id'] for person in interest_person_list]\ntarget_list = []\nfor interest_person_id in interest_person_id_list:\n    coauthors = getCoauthors(person_id = interest_person_id)\n    coauthor_name_list = [coauthor['name'] for coauthor in coauthors]\n    if name in coauthor_name_list:\n        target_list.append(getPersonBasicInfo(person_id=interest_person_id)['name'])\nfinal_result = target_list\n", "result": [], "exe_time": 2.425027370452881}
{"Query_en": "Who at Alibaba Group has a collaboration with Hongxia Yang?", "Answer": ["Jingren Zhou", "Chang Zhou"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Hongxia Yang', 'organization': 'Alibaba Group'}\norganization = info['organization']\nname = info['name']\n\norganization_person_list = searchPerson(organization = organization)\norganization_person_id_list = [person['person_id'] for person in organization_person_list]\ntarget_list = []\nfor interest_person_id in organization_person_id_list:\n    coauthors = getCoauthors(person_id = interest_person_id)\n    coauthor_name_list = [coauthor['name'] for coauthor in coauthors]\n    if name in coauthor_name_list:\n        target_list.append(getPersonBasicInfo(person_id=interest_person_id)['name'])\nfinal_result = target_list\n", "result": ["Jingren Zhou", "Chang Zhou"], "exe_time": 2.4434263706207275}
{"Query_en": "Who in Embedding-based Retrieval field has a collaboration with Shuying Sun?", "Answer": [" Li Xia", "Philip Pronin", "Ashish Sharma", "Janani Padmanabhan"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Shuying Sun', 'interest': 'Embedding-based Retrieval'}\ninterest = info['interest']\nname = info['name']\n\ninterest_person_list = searchPerson(interest = interest)\ninterest_person_id_list = [person['person_id'] for person in interest_person_list]\ntarget_list = []\nfor interest_person_id in interest_person_id_list:\n    coauthors = getCoauthors(person_id = interest_person_id)\n    coauthor_name_list = [coauthor['name'] for coauthor in coauthors]\n    if name in coauthor_name_list:\n        target_list.append(getPersonBasicInfo(person_id=interest_person_id)['name'])\nfinal_result = target_list\n", "result": [" Li Xia", "Philip Pronin", "Ashish Sharma", "Janani Padmanabhan"], "exe_time": 2.4766480922698975}
{"Query_en": "What are the papers published by Yaoyu Zhang at Institute of Natural Sciences, Shanghai Jiao Tong University?", "Answer": ["Frequency Principle: Fourier Analysis Sheds Light On Deep Neural Networks", "Training Behavior Of Deep Neural Network In Frequency Domain", "Causal And Structural Connectivity Of Pulse-Coupled Nonlinear Networks", "Granger Causality Network Reconstruction Of Conductance-Based Integrate-And-Fire Neuronal Systems", "Phase Diagram For Two-Layer Relu Neural Networks At Infinite-Width Limit", "Frequency specific brain networks in Parkinson's disease and comorbid depression.", "Embedding Principle of Loss Landscape of Deep Neural Networks.", "On the Exact Computation of Linear Frequency Principle Dynamics and Its Generalization.", "3D interslab echo‐shifted FLASH sequence for susceptibility weighted imaging", "Empirical Phase Diagram for Three-layer Neural Networks with Infinite\n  Width"], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Yaoyu Zhang', 'organization': 'Institute of Natural Sciences, Shanghai Jiao Tong University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\npublications_title_list = [publication['title'] for publication in publications_list]\nfinal_result = publications_title_list\n", "result": ["Frequency Principle: Fourier Analysis Sheds Light On Deep Neural Networks", "Training Behavior Of Deep Neural Network In Frequency Domain", "Causal And Structural Connectivity Of Pulse-Coupled Nonlinear Networks", "Granger Causality Network Reconstruction Of Conductance-Based Integrate-And-Fire Neuronal Systems", "Phase Diagram For Two-Layer Relu Neural Networks At Infinite-Width Limit", "Frequency specific brain networks in Parkinson's disease and comorbid depression.", "Embedding Principle of Loss Landscape of Deep Neural Networks.", "On the Exact Computation of Linear Frequency Principle Dynamics and Its Generalization.", "3D interslab echo‐shifted FLASH sequence for susceptibility weighted imaging", "Empirical Phase Diagram for Three-layer Neural Networks with Infinite\n  Width"], "exe_time": 1.9229178428649902}
{"Query_en": "What is the citation count of the representative work of Joshua Safyan at Google, Mountain View?", "Answer": 0, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Joshua Safyan', 'organization': 'Google, Mountain View'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_num_citation = target_publication_dict['num_citation']\nfinal_result = target_num_citation\n", "result": 0, "exe_time": 2.117570400238037}
{"Query_en": "In which year was the representative work of Jingshuai Zhang at Baidu Inc. published?", "Answer": 2019, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Jingshuai Zhang', 'organization': 'Baidu Inc.'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\nmax_citation = publications_list[0]\nfinal_result = max_citation['year']\n", "result": 2019, "exe_time": 1.8697190284729004}
{"Query_en": "Who are the authors of the representative work of Jiangnan Cheng at School of Electrical and Computer Engineering, Cornell University?", "Answer": ["B. I. Abelev", "M. M. Aggarwal", "Z. Ahammed", "A. V. Alakhverdyants", "B. D. Anderson", "D. Arkhipkin", "G. S. Averichev", "J. Balewski", "O. Barannikova", "L. S. Barnby", "J. Baudot", "S. Baumgart", "D. R. Beavis", "R. Bellwied", "F. Benedosso", "M. J. Betancourt", "R. R. Betts", "A. Bhasin", "A. K. Bhati", "H. Bichsel", "J. Bielcik", "J. Bielcikova", "B. Biritz", "L. C. Bland", "I. Bnzarov", "M. Bombara", "B. E. Bonner", "J. Bouchet", "E. Braidot", "A. V. Brandin", "E. Bruna", "S. Bueltmann", "T. P. Burton", "M. Bystersky", "X. Z. Cai", "H. Caines", "M. Calderón de la Barca Sánchez", "O. Catu", "D. Cebra", "R. Cendejas", "M. C. Cervantes", "Z. Chajecki", "P. Chaloupka", "S. Chattopadhyay", "H. F. Chen", "J. H. Chen", "J. Y. Chen", "J. Cheng", "M. Cherney", "A. Chikanian", "K. E. Choi", "W. Christie", "R. F. Clarke", "M. J. M. Codrington", "R. Corliss", "T. M. Cormier", "M. R. Cosentino", "J. G. Cramer", "H. J. Crawford", "D. Das", "S. Dash", "M. Daugherity", "L. C. De Silva", "T. G. Dedovich", "M. DePhillips", "A. A. Derevschikov", "R. Derradi de Souza", "L. Didenko", "P. Djawotho", "S. M. Dogra", "X. Dong", "J. L. Drachenberg", "J. E. Draper", "J. C. Dunlop", "M. R. Dutta Mazumdar", "L. G. Efimov", "E. Elhalhuli", "M. Elnimr", "J. Engelage", "G. Eppley", "B. Erazmus", "M. Estienne", "L. Eun", "P. Fachini", "R. Fatemi", "J. Fedorisin", "A. Feng", "P. Filip", "E. Finch", "V. Fine", "Y. Fisyak", "C. A. Gagliardi", "L. Gaillard", "D. R. Gangadharan", "M. S. Ganti", "E. J. Garcia-Solis", "A. Geromitsos", "F. Geurts", "V. Ghazikhanian", "P. Ghosh", "Y. N. Gorbunov", "A. Gordon", "O. Grebenyuk", "D. Grosnick", "B. Grube", "S. M. Guertin", "K. S. F. F. Guimaraes", "A. Gupta", "N. Gupta", "W. Guryn", "B. Haag", "T. J. Hallman", "A. Hamed", "J. W. Harris", "W. He", "M. Heinz", "S. Heppelmann", "B. Hippolyte", "A. Hirsch", "E. Hjort", "A. M. Hoffman", "G. W. Hoffmann", "D. J. Hofman", "R. S. Hollis", "H. Z. Huang", "T. J. Humanic", "L. Huo", "G. Igo", "A. Iordanova", "P. Jacobs", "W. W. Jacobs", "P. Jakl", "C. Jena", "F. Jin", "C. L. Jones", "P. G. Jones", "J. Joseph", "E. G. Judd", "S. Kabana", "K. Kajimoto", "K. Kang", "J. Kapitan", "K. Kauder", "D. Keane", "A. Kechechyan", "D. Kettler", "V. Yu. Khodyrev", "D. P. Kikola", "J. Kiryluk", "A. Kisiel", "S. R. Klein", "A. G. Knospe", "A. Kocoloski", "D. D. Koetke", "J. Konzer", "M. Kopytine", "I. Koralt", "W. Korsch", "L. Kotchenda", "V. Kouchpil", "P. Kravtsov", "V. I. Kravtsov", "K. Krueger", "M. Krus", "C. Kuhn", "L. Kumar", "P. Kurnadi", "M. A. C. Lamont", "J. M. Landgraf", "S. LaPointe", "J. Lauret", "A. Lebedev", "R. Lednicky", "C.-H. Lee", "J. H. Lee", "W. Leight", "M. J. LeVine", "C. Li", "N. Li", "Y. Li", "G. Lin", "S. J. Lindenbaum", "M. A. Lisa", "F. Liu", "H. Liu", "J. Liu", "L. Liu", "T. Ljubicic", "W. J. Llope", "R. S. Longacre", "W. A. Love", "Y. Lu", "T. Ludlam", "G. L. Ma", "Y. G. Ma", "D. P. Mahapatra", "R. Majka", "O. I. Mall", "L. K. Mangotra", "R. Manweiler", "S. Margetis", "C. Markert", "H. Masui", "H. S. Matis", "Yu. A. Matulenko", "D. McDonald", "T. S. McShane", "A. Meschanin", "R. Milner", "N. G. Minaev", "S. Mioduszewski", "A. Mischke", "B. Mohanty", "D. A. Morozov", "M. G. Munhoz", "B. K. Nandi", "C. Nattrass", "T. K. Nayak", "J. M. Nelson", "P. K. Netrakanti", "M. J. Ng", "L. V. Nogach", "S. B. Nurushev", "G. Odyniec", "A. Ogawa", "H. Okada", "V. Okorokov", "D. Olson", "M. Pachr", "B. S. Page", "S. K. Pal", "Y. Pandit", "Y. Panebratsev", "T. Pawlak", "T. Peitzmann", "V. Perevoztchikov", "C. Perkins", "W. Peryt", "S. C. Phatak", "P. Pile", "M. Planinic", "M. A. Ploskon", "J. Pluta", "D. Plyku", "N. Poljak", "A. M. Poskanzer", "B. V. K. S. Potukuchi", "D. Prindle", "C. Pruneau", "N. K. Pruthi", "P. R. Pujahari", "J. Putschke", "R. Raniwala", "S. Raniwala", "R. L. Ray", "R. Redwine", "R. Reed", "A. Ridiger", "H. G. Ritter", "J. B. Roberts", "O. V. Rogachevskiy", "J. L. Romero", "A. Rose", "C. Roy", "L. Ruan", "M. J. Russcher", "R. Sahoo", "S. Sakai", "I. Sakrejda", "T. Sakuma", "S. Salur", "J. Sandweiss", "M. Sarsour", "J. Schambach", "R. P. Scharenberg", "N. Schmitz", "J. Seger", "I. Selyuzhenkov", "P. Seyboth", "A. Shabetai", "E. Shahaliev", "M. Shao", "M. Sharma", "S. S. Shi", "X.-H. Shi", "E. P. Sichtermann", "F. Simon", "R. N. Singaraju", "M. J. Skoby", "N. Smirnov", "P. Sorensen", "J. Sowinski", "H. M. Spinka", "B. Srivastava", "T. D. S. Stanislaus", "D. Staszak", "M. Strikhanov", "B. Stringfellow", "A. A. P. Suaide", "M. C. Suarez", "N. L. Subba", "M. Sumbera", "X. M. Sun", "Y. Sun", "Z. Sun", "B. Surrow", "T. J. M. Symons", "A. Szanto de Toledo", "J. Takahashi", "A. H. Tang", "Z. Tang", "L. H. Tarini", "T. Tarnowsky", "D. Thein", "J. H. Thomas", "J. Tian", "A. R. Timmins", "S. Timoshenko", "D. Tlusty", "M. Tokarev", "T. A. Trainor", "V. N. Tram", "S. Trentalange", "R. E. Tribble", "O. D. Tsai", "J. Ulery", "T. Ullrich", "D. G. Underwood", "G. Van Buren", "G. van Nieuwenhuizen", "J. A. Vanfossen", "R. Varma", "G. M. S. Vasconcelos", "A. N. Vasiliev", "F. Videbaek", "S. E. Vigdor", "Y. P. Viyogi", "S. Vokal", "S. A. Voloshin", "M. Wada", "M. Walker", "F. Wang", "G. Wang", "H. Wang", "J. S. Wang", "Q. Wang", "X. Wang", "X. L. Wang", "Y. Wang", "G. Webb", "J. C. Webb", "G. D. Westfall", "C. Whitten", "H. Wieman", "S. W. Wissink", "R. Witt", "Y. Wu", "W. Xie", "N. Xu", "Q. H. Xu", "Y. Xu", "Z. Xu", "Y. Yang", "P. Yepes", "K. Yip", "I.-K. Yoo", "Q. Yue", "M. Zawisza", "H. Zbroszczyk", "W. Zhan", "S. Zhang", "W. M. Zhang", "X. P. Zhang", "Y. Zhang", "Z. P. Zhang", "Y. Zhao", "C. Zhong", "J. Zhou", "X. Zhu", "R. Zoulkarneev", "Y. Zoulkarneeva", "J. X. Zuo"], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Jiangnan Cheng', 'organization': 'School of Electrical and Computer Engineering, Cornell University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\nmax_citation = publications_list[0]\nfinal_result = max_citation['year']\n", "result": 2009, "exe_time": 1.9376797676086426}
{"Query_en": "What are the papers published by Ningyu Zhang in Pre-trained Language Model field?", "Answer": ["Long-tail Relation Extraction via Knowledge Graph Embeddings and Graph Convolution Networks.", "KnowPrompt: Knowledge-aware Prompt-tuning with Synergistic Optimization for Relation Extraction", "Knowledge-Driven Stock Trend Prediction and Explanation via Temporal Convolutional Network", "Attention-Based Capsule Network with Dynamic Routing for Relation Extraction.", "Meta-Learning with Dynamic-Memory-Based Prototypical Network for Few-Shot Event Detection.", "PRGC: Potential Relation and Global Correspondence Based Joint Relational Triple Extraction.", "Document-level Relation Extraction as Semantic Segmentation.", "Differentiable Prompt Makes Pre-trained Language Models Better Few-shot Learners.", "Contrastive Triple Extraction With Generative Transformer", "CBLUE: A Chinese Biomedical Language Understanding Evaluation Benchmark."], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Ningyu Zhang', 'interest': 'Pre-trained Language Model'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name=name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\npublications_title_list = [publication['title'] for publication in publications_list]\nfinal_result = publications_title_list\n", "result": ["Long-tail Relation Extraction via Knowledge Graph Embeddings and Graph Convolution Networks.", "KnowPrompt: Knowledge-aware Prompt-tuning with Synergistic Optimization for Relation Extraction", "Knowledge-Driven Stock Trend Prediction and Explanation via Temporal Convolutional Network", "Attention-Based Capsule Network with Dynamic Routing for Relation Extraction.", "Meta-Learning with Dynamic-Memory-Based Prototypical Network for Few-Shot Event Detection.", "PRGC: Potential Relation and Global Correspondence Based Joint Relational Triple Extraction.", "Document-level Relation Extraction as Semantic Segmentation.", "Differentiable Prompt Makes Pre-trained Language Models Better Few-shot Learners.", "Contrastive Triple Extraction With Generative Transformer", "CBLUE: A Chinese Biomedical Language Understanding Evaluation Benchmark."], "exe_time": 1.8318195343017578}
{"Query_en": "What is the citation count of the representative work of Yuan Gao in Market Equilibrium field?", "Answer": 119, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Yuan Gao', 'interest': 'Market Equilibrium'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_num_citation = target_publication_dict['num_citation']\nfinal_result = target_num_citation\n", "result": 119, "exe_time": 2.1133639812469482}
{"Query_en": "In which year was the representative work of Naren Ramakrishnan in Data Mining field published?", "Answer": 2013, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Naren Ramakrishnan', 'interest': 'Data Mining'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name=name, interest=interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\nperson_pubs = getPersonPubs(person_id=target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = person_pubs[0]\npublication_year = target_publication_dict['year']\nfinal_result = publication_year\n", "result": 2013, "exe_time": 2.0072226524353027}
{"Query_en": "Who are the authors of the representative work of Toshihiko Yanase in Machine Learning System field?", "Answer": ["Takuya Akiba", "Shotaro Sano", "Toshihiko Yanase", "Takeru Ohta", "Masanori Koyama"], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Toshihiko Yanase', 'interest': 'Machine Learning System'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\nauthor_name_list = target_publication_dict['authors_name_list']\nfinal_result = author_name_list\n", "result": ["Takuya Akiba", "Shotaro Sano", "Toshihiko Yanase", "Takeru Ohta", "Masanori Koyama"], "exe_time": 2.1116249561309814}
{"Query_en": "Is Dan Shen at Microsoft male or female?", "Answer": "male", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Dan Shen', 'organization': 'Microsoft'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_gender = target_person_basic_info['gender']\nfinal_result = target_person_gender\n", "result": "male", "exe_time": 1.7258598804473877}
{"Query_en": "What is the title of Tianpei Yang at Intelligent Robot Learning Lab, University of Alberta?", "Answer": "Postdoctoral Fellow", "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Tianpei Yang', 'organization': 'Intelligent Robot Learning Lab, University of Alberta'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_abstract = target_publication_dict['abstract']\nfinal_result = target_abstract\n", "result": "exe error", "exe_time": 2.0981953144073486}
{"Query_en": "What is the introduction of Brandt Westing at Apple?", "Answer": "I'm at Apple working on new software, devices, and natural interaction powered by machine learning.<br><br>I'm passionate about building software, hardware, and interaction mechanisms that seamlessly merge the human-computer interface and result in delightful user experiences.", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Brandt Westing', 'organization': 'Apple'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_bio = target_person_basic_info['bio']\nfinal_result = target_person_bio\n", "result": "I'm at Apple working on new software, devices, and natural interaction powered by machine learning.<br><br>I'm passionate about building software, hardware, and interaction mechanisms that seamlessly merge the human-computer interface and result in delightful user experiences.", "exe_time": 1.766364574432373}
{"Query_en": "What is the educational background of Bonsoo Koo at Faculty of Business and Economics, Monash University?", "Answer": "Ph. D. in Economics, London School of Economics (LSE)                                       Sep. 2008 ~ May 2011      <br><br>MRes in Economics, LSE, Pass with distinction                                                     July 2008", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Bonsoo Koo', 'organization': 'Faculty of Business and Economics, Monash University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_education_experience = target_person_basic_info['education_experience']\nfinal_result = target_person_education_experience\n", "result": "Ph. D. in Economics, London School of Economics (LSE)                                       Sep. 2008 ~ May 2011      <br><br>MRes in Economics, LSE, Pass with distinction                                                     July 2008", "exe_time": 2.0856144428253174}
{"Query_en": "What is the email of Di Wu at JD.com?", "Answer": "", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Di Wu', 'organization': 'JD.com'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_email = target_person_basic_info['email']\nfinal_result = target_person_email\n", "result": "", "exe_time": 1.747800588607788}
{"Query_en": "Is Harshavardhan P Kamarthi in Img Src field male or female?", "Answer": "male", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Harshavardhan P Kamarthi', 'interest': 'Img Src'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_gender = target_person_basic_info['gender']\nfinal_result = target_person_gender\n", "result": "male", "exe_time": 1.8293168544769287}
{"Query_en": "What is the title of Alfonso Lobos in Factorization Machines field?", "Answer": "Other", "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Alfonso Lobos', 'interest': 'Factorization Machines'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_title = target_publication_dict['title']\nfinal_result = target_publication_title\n", "result": "Field-weighted Factorization Machines for Click-Through Rate Prediction in Display Advertising.", "exe_time": 2.0861713886260986}
{"Query_en": "What is the introduction of Martin Bompaire in Hawkes Processes field?", "Answer": "Josh Wills’ definition concisely tells how I feel as a data scientist. On the other hand, I have been passionate about programming for 7 years. It all began with a side project which is now a live mobile application: MisterGoodBeer. Then, I discovered machine learning which I enjoy using, in combination with programming, to extract knowledge from data. When existing methods don’t provide satisfying results, I find it thrilling to dive in and deeply understand the algorithms to mix or adapt them. It also is important for me to produce clean, reusable and easy to share code. Additionally, I take satisfaction in polishing my algorithms with precise low-level optimizations to achieve better performances.", "route": "searchPerson -> getPersonBasicInfo -> getPersonBasicInfo", "code": "info = {'name': 'Martin Bompaire', 'interest': 'Hawkes Processes'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_bio = target_person_basic_info['bio']\nfinal_result = target_person_bio\n", "result": "Josh Wills’ definition concisely tells how I feel as a data scientist. On the other hand, I have been passionate about programming for 7 years. It all began with a side project which is now a live mobile application: MisterGoodBeer. Then, I discovered machine learning which I enjoy using, in combination with programming, to extract knowledge from data. When existing methods don’t provide satisfying results, I find it thrilling to dive in and deeply understand the algorithms to mix or adapt them. It also is important for me to produce clean, reusable and easy to share code. Additionally, I take satisfaction in polishing my algorithms with precise low-level optimizations to achieve better performances.", "exe_time": 1.8493757247924805}
{"Query_en": "What is the educational background of Feng Zheng in Feature Extraction field?", "Answer": "2012-2016 The University of Sheffield, United Kingdom Ph.D", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Feng Zheng', 'interest': 'Feature Extraction'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_education_experience = target_person_basic_info['education_experience']\nfinal_result = target_person_education_experience\n", "result": "2012-2016 The University of Sheffield, United Kingdom Ph.D", "exe_time": 1.9708061218261719}
{"Query_en": "What is the email of Zhihan Fang in Cellular Networks field?", "Answer": "zhihan.fang@rutgers.edu", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Zhihan Fang', 'interest': 'Cellular Networks'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_email = target_person_basic_info['email']\nfinal_result = target_person_email\n", "result": "zhihan.fang@rutgers.edu", "exe_time": 1.7820050716400146}
{"Query_en": "Who among the collaborators of Kyoung-Sook Kim at National Institute of Advanced Industrial Science and Technology are researching in Deep Learning field?", "Answer": ["Tianqi Xia", "Xuan Song", "Ryosuke Shibasaki", "Renhe Jiang"], "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Kyoung-Sook Kim', 'organization': 'National Institute of Advanced Industrial Science and Technology'}\nname = info['name']\norganization = info['organization']\ntarget_interest = info['interest']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthor_list = getCoauthors(person_id = target_person_id)\n\ntarget_coauthor_names = []\nfor coauthor in coauthor_list:\n    coauthor_id = coauthor['person_id']\n    coauthor_interests_list = getPersonInterest(person_id = coauthor_id)\n    if target_interest in coauthor_interests_list:\n        target_coauthor_names.append(coauthor['name'])\n\nfinal_result = target_coauthor_names\n", "result": "exe error", "exe_time": 2.8329992294311523}
{"Query_en": "Who has the highest citation count among the collaborators of Nesreen Kamel Ahmed at Intel Research Labs?", "Answer": "Philip S. Yu", "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Nesreen Kamel Ahmed', 'organization': 'Intel Research Labs'}\nname = info['name']\norganization = info['organization']\n\n# Search the person\nperson_list = searchPerson(name=name, organization=organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# Get the coauthors\ncoauthors_list = getCoauthors(person_id=target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_citation = 0\nmax_citation_author_name = ''\n\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_citation = coauthor_info['num_citation']\n    if coauthor_citation > max_citation:\n        max_citation = coauthor_citation\n        max_citation_author_name = coauthor_info['name']\n\nfinal_result = max_citation_author_name\n", "result": "Philip S. Yu", "exe_time": 3.6100103855133057}
{"Query_en": "Who has the most published papers among the collaborators of Maxim Naumov at Department of Computer Science, Purdue University?", "Answer": "Dheevatsa Mudigere", "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Maxim Naumov', 'organization': 'Department of Computer Science, Purdue University'}\nname = info['name']\norganization = info['organization']\n\n# Search the person\nperson_list = searchPerson(name=name, organization=organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# Get the coauthors\ncoauthors_list = getCoauthors(person_id=target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_pubs = 0\nmax_pubs_author_name = ''\n\n# Iterate each coauthor and calculate his/her publication number\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_pubs = coauthor_info['num_pubs']\n    if coauthor_pubs > max_pubs:\n        max_pubs = coauthor_pubs\n        max_pubs_author_name = coauthor_info['name']\n\nfinal_result = max_pubs_author_name\n", "result": "Dheevatsa Mudigere", "exe_time": 3.8043057918548584}
{"Query_en": "Who among the collaborators of Qing Tan in Display Advertising field are at Alibaba Groupinstitution?", "Answer": ["Jian Xu", "Kun Gai"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Qing Tan', 'interest': 'Display Advertising'}\ninterest = info['interest']\nname = info['name']\n\ninterest_person_list = searchPerson(interest = interest)\ninterest_person_id_list = [person['person_id'] for person in interest_person_list]\ntarget_list = []\nfor interest_person_id in interest_person_id_list:\n    coauthors = getCoauthors(person_id = interest_person_id)\n    coauthor_name_list = [coauthor['name'] for coauthor in coauthors]\n    if name in coauthor_name_list:\n        target_list.append(getPersonBasicInfo(person_id=interest_person_id)['name'])\nfinal_result = target_list\n", "result": ["Kun Gai", "Jian Xu", "Di Wu"], "exe_time": 2.4098520278930664}
{"Query_en": "Who has the highest citation count among the collaborators of Ziyi Chen in Federated Learning field?", "Answer": "Yingbin Liang", "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Ziyi Chen', 'interest': 'Federated Learning'}\nname = info['name']\ninterest = info['interest']\n\n# get specific person's information\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# Get the coauthors\ncoauthors_list = getCoauthors(person_id=target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_citation = 0\nmax_citation_author_name = ''\n\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_citation = coauthor_info['num_citation']\n    if coauthor_citation > max_citation:\n        max_citation = coauthor_citation\n        max_citation_author_name = coauthor_info['name']\n\nfinal_result = max_citation_author_name\n", "result": "Yingbin Liang", "exe_time": 3.5826380252838135}
{"Query_en": "Who has the most published papers among the collaborators of Panagiotis Karras in Indexation field?", "Answer": "Christian S. Jensen", "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Panagiotis Karras', 'interest': 'Indexation'}\nname = info['name']\ninterest = info['interest']\n\n# get specific person's information\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# Get the coauthors\ncoauthors_list = getCoauthors(person_id=target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_pubs = 0\nmax_pubs_author_name = ''\n\n# Iterate each coauthor and calculate his/her publication number\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_pubs = coauthor_info['num_pubs']\n    if coauthor_pubs > max_pubs:\n        max_pubs = coauthor_pubs\n        max_pubs_author_name = coauthor_info['name']\n\nfinal_result = max_pubs_author_name\n", "result": "Christian S. Jensen", "exe_time": 3.762591600418091}
{"Query_en": "Who are the collaborators of the collaborators of Shuai Wang at Southeast University?", "Answer": ["Shuai Wang", "Zhihan Fang", "Baoshen Guo", "Zhengyang Zhou", "Lin Jiang", "Shuai Wang", "Guang Wang", "Guang Wang", "Shuai Wang", "Yikun Xian", "Shuai Wang", "Shuai Wang", "Guang Wang"], "route": "searchPerson -> getCoauthors -> getCoauthors", "code": "info = {'name': 'Shuai Wang', 'organization': 'Southeast University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors1_list = getCoauthors(person_id = target_person_id)\n\ncoauthors2_list = []\nfor coauthor in coauthors1_list:\n    coauthors2_list.extend(getCoauthors(person_id = coauthor['person_id']))\n\ncoauthors2_names = [coauthor['name'] for coauthor in coauthors2_list]\n\nfinal_result = coauthors2_names\n", "result": ["Shuai Wang", "Zhihan Fang", "Baoshen Guo", "Zhengyang Zhou", "Lin Jiang", "Shuai Wang", "Guang Wang", "Guang Wang", "Shuai Wang", "Yikun Xian", "Shuai Wang", "Shuai Wang", "Guang Wang"], "exe_time": 2.489769458770752}
{"Query_en": "Who are the collaborators of the collaborators of Tomasz Korbak in Science Education field?", "Answer": ["Micah Carroll", "Tomasz Korbak", "Stephen Casper", "Tomasz Korbak"], "route": "searchPerson -> getCoauthors -> getCoauthors", "code": "info = {'name': 'Tomasz Korbak', 'interest': 'Science Education'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors1_list = getCoauthors(person_id = target_person_id)\n\ncoauthors2_list = []\nfor coauthor in coauthors1_list:\n    coauthors2_list.extend(getCoauthors(person_id = coauthor['person_id']))\n\ncoauthors2_names = [coauthor['name'] for coauthor in coauthors2_list]\n\nfinal_result = coauthors2_names\n", "result": ["Micah Carroll", "Tomasz Korbak", "Stephen Casper", "Tomasz Korbak"], "exe_time": 2.4899098873138428}
{"Query_en": "What is the abstract of the representative work of Hengjie Song at South China University of Technology?", "Answer": "Transfer learning has been proven to be effective for the problems where training data from a source domain and test data from a target domain are drawn from different distributions. To reduce the distribution divergence between the source domain and the target domain, many previous studies have been focused on designing and optimizing objective functions with the Euclidean distance to measure dissimilarity between instances. However, in some real-world applications, the Euclidean distance may be inappropriate to capture the intrinsic similarity or dissimilarity between instances. To deal with this issue, in this paper, we propose a metric transfer learning framework (MTLF) to encode metric learning in transfer learning. In MTLF, instance weights are learned and exploited to bridge the distributions of different domains, while Mahalanobis distance is learned simultaneously to maximize the intra-class distances and minimize the inter-class distances for the target domain. Unlike previous work where instance weights and Mahalanobis distance are trained in a pipelined framework that potentially leads to error propagation across different components, MTLF attempts to learn instance weights and a Mahalanobis distance in a parallel framework to make knowledge transfer across domains more effective. Furthermore, we develop general solutions to both classification and regression problems on top of MTLF, respectively. We conduct extensive experiments on several real-world datasets on object recognition, handwriting recognition, and WiFi location to verify the effectiveness of MTLF compared with a number of state-of-the-art methods.", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Hengjie Song', 'organization': 'South China University of Technology'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_abstract = target_publication_info['abstract']\nfinal_result = target_abstract\n", "result": "Transfer learning has been proven to be effective for the problems where training data from a source domain and test data from a target domain are drawn from different distributions. To reduce the distribution divergence between the source domain and the target domain, many previous studies have been focused on designing and optimizing objective functions with the Euclidean distance to measure dissimilarity between instances. However, in some real-world applications, the Euclidean distance may be inappropriate to capture the intrinsic similarity or dissimilarity between instances. To deal with this issue, in this paper, we propose a metric transfer learning framework (MTLF) to encode metric learning in transfer learning. In MTLF, instance weights are learned and exploited to bridge the distributions of different domains, while Mahalanobis distance is learned simultaneously to maximize the intra-class distances and minimize the inter-class distances for the target domain. Unlike previous work where instance weights and Mahalanobis distance are trained in a pipelined framework that potentially leads to error propagation across different components, MTLF attempts to learn instance weights and a Mahalanobis distance in a parallel framework to make knowledge transfer across domains more effective. Furthermore, we develop general solutions to both classification and regression problems on top of MTLF, respectively. We conduct extensive experiments on several real-world datasets on object recognition, handwriting recognition, and WiFi location to verify the effectiveness of MTLF compared with a number of state-of-the-art methods.", "exe_time": 2.4574170112609863}
{"Query_en": "What is the PDF link of the representative work of Lan Zhang at School of Computer Science and Technology, University of Science and Technology of China?", "Answer": "//static.aminer.org/pdf/20170130/pdfs/mobicom/eajrab1d6su8lihzqyvi9otrhkxdwwcg.pdf", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Lan Zhang', 'organization': 'School of Computer Science and Technology, University of Science and Technology of China'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_pdf = target_publication_info['pdf_link']\nfinal_result = target_pdf\n", "result": "//static.aminer.org/pdf/20170130/pdfs/mobicom/eajrab1d6su8lihzqyvi9otrhkxdwwcg.pdf", "exe_time": 2.5640952587127686}
{"Query_en": "Which journal or conference included the representative work of Satria Priambada at Georgia Institute of Technology?", "Answer": {"info": {"name": "KDD '20: The 26th ACM SIGKDD Conference on Knowledge Discovery and Data Mining\n\t\t      Virtual Event\n\t\t      CA\n\t\t      USA\n\t\t    July, 2020", "name_s": "KDD"}, "volume": "abs/2008.04063"}, "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Satria Priambada', 'organization': 'Georgia Institute of Technology'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_venue = target_publication_info['venue']\nfinal_result = target_venue\n", "result": {"info": {"name": "KDD '20: The 26th ACM SIGKDD Conference on Knowledge Discovery and Data Mining\n\t\t      Virtual Event\n\t\t      CA\n\t\t      USA\n\t\t    July, 2020", "name_s": "KDD"}, "volume": "abs/2008.04063"}, "exe_time": 2.4634547233581543}
{"Query_en": "What is the abstract of the representative work of Nathan Tsoi in Proxemic Interactions field?", "Answer": "Intersection over Union (IoU) is the most popular evaluation metric used in the object detection benchmarks. However, there is a gap between optimizing the commonly used distance losses for regressing the parameters of a bounding box and maximizing this metric value. The optimal objective for a metric is the metric itself. In the case of axis-aligned 2D bounding boxes, it can be shown that IoU can be directly used as a regression loss. However, IoU has a plateau making it infeasible to optimize in the case of non-overlapping bounding boxes. In this paper, we address the this weakness by introducing a generalized version of IoU as both a new loss and a new metric. By incorporating this generalized IoU (GIoU) as a loss into the state-of-the art object detection frameworks, we show a consistent improvement on their performance using both the standard, IoU based, and new, GIoU based, performance measures on popular object detection benchmarks such as PASCAL VOC and MS COCO.", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Nathan Tsoi', 'interest': 'Proxemic Interactions'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_abstract = target_publication_info['abstract']\nfinal_result = target_abstract\n", "result": "Intersection over Union (IoU) is the most popular evaluation metric used in the object detection benchmarks. However, there is a gap between optimizing the commonly used distance losses for regressing the parameters of a bounding box and maximizing this metric value. The optimal objective for a metric is the metric itself. In the case of axis-aligned 2D bounding boxes, it can be shown that IoU can be directly used as a regression loss. However, IoU has a plateau making it infeasible to optimize in the case of non-overlapping bounding boxes. In this paper, we address the this weakness by introducing a generalized version of IoU as both a new loss and a new metric. By incorporating this generalized IoU (GIoU) as a loss into the state-of-the art object detection frameworks, we show a consistent improvement on their performance using both the standard, IoU based, and new, GIoU based, performance measures on popular object detection benchmarks such as PASCAL VOC and MS COCO.", "exe_time": 2.449540615081787}
{"Query_en": "What is the PDF link of the representative work of Kun Zhang in Correlated Time-to-event Predictions field?", "Answer": "https://cz5waila03cyo0tux1owpyofgoryroob.oss-cn-beijing.aliyuncs.com/65/BC/B0/65BCB08E96FCCE5A51F5D5410283D1B4.pdf", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Kun Zhang', 'interest': 'Correlated Time-to-event Predictions'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_pdf = target_publication_info['pdf_link']\nfinal_result = target_pdf\n", "result": "https://cz5waila03cyo0tux1owpyofgoryroob.oss-cn-beijing.aliyuncs.com/65/BC/B0/65BCB08E96FCCE5A51F5D5410283D1B4.pdf", "exe_time": 2.502836227416992}
{"Query_en": "Which journal or conference included the representative work of Chenglei Yang in Virtual Reality field?", "Answer": {"id": "555036f67cea80f95416a9f4", "info": {"name": "ACM Trans. Graph."}, "issue": "4", "type": 0, "volume": "28"}, "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Chenglei Yang', 'interest': 'Virtual Reality'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_venue = target_publication_info['venue']\nfinal_result = target_venue\n", "result": {"id": "555036f67cea80f95416a9f4", "info": {"name": "ACM Trans. Graph."}, "issue": "4", "type": 0, "volume": "28"}, "exe_time": 2.4059834480285645}
