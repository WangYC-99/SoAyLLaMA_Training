{"Query_en": "Research interests of Carlos Abreu Ferreira at LIAAD-INESC", "Answer": ["Interesting Sequential Pattern", "Temporal Pattern", "Frequent Sequence Mining", "Frequent Sequence", "Multi-relational Temporal Databases", "Wind Power", "Wind Energy", "Sequence Mining", "Multi-relational Learning", "Multi-relational Databases"], "route": "searchPerson", "code": "info = {'name': 'Carlos Abreu Ferreira', 'organization': 'LIAAD-INESC'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ninterests = target_person_info['interests']\nfinal_result = interests\n", "result": ["Interesting Sequential Pattern", "Temporal Pattern", "Frequent Sequence Mining", "Frequent Sequence", "Multi-relational Temporal Databases", "Wind Power", "Wind Energy", "Sequence Mining", "Multi-relational Learning", "Multi-relational Databases"], "exe_time": 1.2448489665985107}
{"Query_en": "Citation count of Tri Dao at Department of Computer Science, Stanford University", "Answer": 1024, "route": "searchPerson", "code": "info = {'name': 'Tri Dao', 'organization': 'Department of Computer Science, Stanford University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\nnum_citation = target_person_info['num_citation']\nfinal_result = num_citation\n", "result": 1024, "exe_time": 1.2982149124145508}
{"Query_en": "Number of published papers by Vitaly Shmatikov at Computer Science, Cornell University", "Answer": 146, "route": "searchPerson", "code": "info = {'name': 'Vitaly Shmatikov', 'organization': 'Computer Science, Cornell University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\nnum_pubs = target_person_info['num_pubs']\nfinal_result = num_pubs\n", "result": 146, "exe_time": 1.3083972930908203}
{"Query_en": "Which institution does Nan Ding who researches in Nan Ding field belong to?", "Answer": "Google Inc.", "route": "searchPerson", "code": "info = {'name': 'Nan Ding', 'interest': 'Nan Ding'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\norganization = target_person_info['organization']\nfinal_result = organization\n", "result": "Google Inc.", "exe_time": 1.1708130836486816}
{"Query_en": "Citation count of Mingsheng Long who researches in Learning Artificial Intelligence field", "Answer": 27734, "route": "searchPerson", "code": "info = {'name': 'Mingsheng Long', 'interest': 'Learning Artificial Intelligence'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\nnum_citation = target_person_info['num_citation']\nfinal_result = num_citation\n", "result": 27734, "exe_time": 1.2969999313354492}
{"Query_en": "Number of papers published by Evimaria Terzi who researches in Social Network field", "Answer": 140, "route": "searchPerson", "code": "info = {'name': 'Evimaria Terzi', 'interest': 'Social Network'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\nnum_pubs = target_person_info['num_pubs']\nfinal_result = num_pubs\n", "result": 140, "exe_time": 1.2444562911987305}
{"Query_en": "Who are the researchers at Google?", "Answer": ["Quoc Viet Le", "Vijay Vasudevan", "Mathieu Blondel", "Jean Pouget Abadie", "Ravi Kumar", "Yehuda Koren", "Andrew Tomkins", "Andrei Zary Broder", "Zihang Dai", "Sergei Vassilvitskii"], "route": "searchPerson", "code": "info = {'organization': 'Google'}\norganization = info['organization']\n\nperson_list = searchPerson(organization = organization)\nname_list = [person_list[i]['name'] for i in range(len(person_list))]\nfinal_result = name_list\n", "result": ["Quoc Viet Le", "Vijay Vasudevan", "Mathieu Blondel", "Jean Pouget Abadie", "Ravi Kumar", "Yehuda Koren", "Andrew Tomkins", "Andrei Zary Broder", "Zihang Dai", "Sergei Vassilvitskii"], "exe_time": 0.9278488159179688}
{"Query_en": "Who are the researchers in Parallel Processing field?", "Answer": ["Ian T. Foster", "Vipin Kumar", "George Karypis", "Mohammed Javeed Zaki", "Alok N. Choudhary", "Srinivasan Parthasarathy", "Mahmut Taylan Kandemir", "Kian Lee Tan", "P. (Saday) Sadayappan", "Shanghua Teng"], "route": "searchPerson", "code": "info = {'interest': 'Parallel Processing'}\ninterest = info['interest']\n\nperson_list = searchPerson(interest = interest)\nname_list = [person_list[i]['name'] for i in range(len(person_list))]\nfinal_result = name_list\n", "result": ["Ian T. Foster", "Vipin Kumar", "George Karypis", "Mohammed Javeed Zaki", "Alok N. Choudhary", "Srinivasan Parthasarathy", "Mahmut Taylan Kandemir", "Kian Lee Tan", "P. (Saday) Sadayappan", "Shanghua Teng"], "exe_time": 0.9590885639190674}
{"Query_en": "Who are the collaborators of Meike Zehlike at Max Planck Institute for Software Systems, Saarbrucken?", "Answer": ["Tom Sühr", "Francesco Bonchi", "Liang Zhao", "Jiaxin Huang", "Lingfei Wu (Teddy)", "Kijung Shin", "Thai Le", "Cheng-Te Li", "Peng Cui", "Ingmar Weber", "Haoyang Li", "Xiangyu Zhao", "Dongwon Lee", "Sihem Amer Yahia", "Dacheng Tao", "George Karypis", "Jian Pei", "Abhijnan Chakraborty", "Reza Zafarani"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Meike Zehlike', 'organization': 'Max Planck Institute for Software Systems, Saarbrucken'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\ncoauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\nfinal_result = coauthors_name_list\n", "result": ["Tom Sühr", "Francesco Bonchi", "Liang Zhao", "Jiaxin Huang", "Lingfei Wu (Teddy)", "Kijung Shin", "Thai Le", "Cheng-Te Li", "Peng Cui", "Ingmar Weber", "Haoyang Li", "Xiangyu Zhao", "Dongwon Lee", "Sihem Amer Yahia", "Dacheng Tao", "George Karypis", "Jian Pei", "Abhijnan Chakraborty", "Reza Zafarani"], "exe_time": 2.0369603633880615}
{"Query_en": "Who are the collaborators of Tomoya Sakai in Heart Valve field?", "Answer": ["Hisashi Kashima"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Tomoya Sakai', 'interest': 'Heart Valve'}\ninterest = info['interest']\nname = info['name']\n\ninterest_person_list = searchPerson(interest = interest)\ninterest_person_id_list = [person['person_id'] for person in interest_person_list]\ntarget_list = []\nfor interest_person_id in interest_person_id_list:\n    coauthors = getCoauthors(person_id = interest_person_id)\n    coauthor_name_list = [coauthor['name'] for coauthor in coauthors]\n    if name in coauthor_name_list:\n        target_list.append(getPersonBasicInfo(person_id=interest_person_id)['name'])\nfinal_result = target_list\n", "result": [], "exe_time": 2.4336607456207275}
{"Query_en": "Who at Feedzai has a collaboration with Pedro G Bizarro?", "Answer": ["Ascensão João Tiago", "João Bento", "Gomes Ana Sofia", "Branco Bernardo"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Pedro G Bizarro', 'organization': 'Feedzai'}\norganization = info['organization']\nname = info['name']\n\norganization_person_list = searchPerson(organization = organization)\norganization_person_id_list = [person['person_id'] for person in organization_person_list]\ntarget_list = []\nfor interest_person_id in organization_person_id_list:\n    coauthors = getCoauthors(person_id = interest_person_id)\n    coauthor_name_list = [coauthor['name'] for coauthor in coauthors]\n    if name in coauthor_name_list:\n        target_list.append(getPersonBasicInfo(person_id=interest_person_id)['name'])\nfinal_result = target_list\n", "result": ["Ascensão João Tiago", "João Bento", "Gomes Ana Sofia", "Branco Bernardo"], "exe_time": 2.444129228591919}
{"Query_en": "Who in Approximation Algorithm field has a collaboration with Anthony Wirth?", "Answer": ["Moses Charikar"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Anthony Wirth', 'interest': 'Approximation Algorithm'}\ninterest = info['interest']\nname = info['name']\n\ninterest_person_list = searchPerson(interest = interest)\ninterest_person_id_list = [person['person_id'] for person in interest_person_list]\ntarget_list = []\nfor interest_person_id in interest_person_id_list:\n    coauthors = getCoauthors(person_id = interest_person_id)\n    coauthor_name_list = [coauthor['name'] for coauthor in coauthors]\n    if name in coauthor_name_list:\n        target_list.append(getPersonBasicInfo(person_id=interest_person_id)['name'])\nfinal_result = target_list\n", "result": ["Moses Charikar"], "exe_time": 2.4479317665100098}
{"Query_en": "What are the papers published by Wanyun Cui at School of Information Management and Engeering, Shanghai University of Finance and Economics?", "Answer": ["Local search of communities in large graphs", "CN-DBpedia: A Never-Ending Chinese Knowledge Extraction System.", "KBQA: Learning Question Answering over QA Corpora and Knowledge Bases.", "Online search of overlapping communities", "KBQA: An Online Template Based Question Answering System over Freebase.", "Transfer Learning for Sequences via Learning to Collocate.", "Verb Pattern: A Probabilistic Semantic Representation on Verbs.", "Cgap-Align: A High Performance Dna Short Read Alignment Tool", "Branch Code: A Labeling Scheme for Efficient Query Answering on Trees", "Towards Topic Following in Heterogeneous Information Networks."], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Wanyun Cui', 'organization': 'School of Information Management and Engeering, Shanghai University of Finance and Economics'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\npublications_title_list = [publication['title'] for publication in publications_list]\nfinal_result = publications_title_list\n", "result": ["Local search of communities in large graphs", "CN-DBpedia: A Never-Ending Chinese Knowledge Extraction System.", "KBQA: Learning Question Answering over QA Corpora and Knowledge Bases.", "Online search of overlapping communities", "KBQA: An Online Template Based Question Answering System over Freebase.", "Transfer Learning for Sequences via Learning to Collocate.", "Verb Pattern: A Probabilistic Semantic Representation on Verbs.", "Cgap-Align: A High Performance Dna Short Read Alignment Tool", "Branch Code: A Labeling Scheme for Efficient Query Answering on Trees", "Towards Topic Following in Heterogeneous Information Networks."], "exe_time": 1.9859380722045898}
{"Query_en": "What is the citation count of the representative work of Ajinkya Kale at Adobe?", "Answer": 113, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Ajinkya Kale', 'organization': 'Adobe'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_num_citation = target_publication_dict['num_citation']\nfinal_result = target_num_citation\n", "result": 113, "exe_time": 2.096686840057373}
{"Query_en": "In which year was the representative work of Huiping Chen at King's College London published?", "Answer": 2019, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Huiping\\xa0Chen', 'organization': 'King\\'s College London'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\nmax_citation = publications_list[0]\nfinal_result = max_citation['year']\n", "result": 2019, "exe_time": 1.8821723461151123}
{"Query_en": "Who are the authors of the representative work of Can Lu at Department of Systems Engineering and Engineering Management, The Chinese University of Hong Kong?", "Answer": ["Hao Wei", "Jeffrey Xu Yu", "Can Lu", "Xuemin Lin"], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Can Lu', 'organization': 'Department of Systems Engineering and Engineering Management, The Chinese University of Hong Kong'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\nmax_citation = publications_list[0]\nfinal_result = max_citation['year']\n", "result": 2016, "exe_time": 1.9209716320037842}
{"Query_en": "What are the papers published by Rahul V. Kulkarni in Gene Expression field?", "Answer": ["The Small RNA Chaperone Hfq and Multiple Small RNAs Control Quorum Sensing in Vibrio harveyi and Vibrio cholerae", "CsrA and three redundant small RNAs regulate quorum sensing in Vibrio cholerae: Regulation of quorum sensing in Vibrio cholerae", "Transcriptional Bursting In Gene Expression: Analytical Results For General Stochastic Models", "Prediction Of Csra-Regulating Small Rnas In Bacteria And Their Experimental Verification In Vibrio Fischeri", "Ab Initio Molecular-Dynamics Study Of The Structural And Transport Properties Of Liquid Germanium", "Exact Distributions For Stochastic Gene Expression Models With Bursting And Feedback", "Intrinsic Noise In Stochastic Models Of Gene Expression With Molecular Memory And Bursting", "Regulatory Targets Of Quorum Sensing In Vibrio Cholerae: Evidence For Two Distinct Hapr-Binding Motifs", "Connecting protein and mRNA burst distributions for stochastic models of gene expression.", "Structural rearrangement in an RsmA/CsrA ortholog of Pseudomonas aeruginosa creates a dimeric RNA-binding protein, RsmN."], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Rahul V. Kulkarni', 'interest': 'Gene Expression'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name=name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\npublications_title_list = [publication['title'] for publication in publications_list]\nfinal_result = publications_title_list\n", "result": ["The Small RNA Chaperone Hfq and Multiple Small RNAs Control Quorum Sensing in Vibrio harveyi and Vibrio cholerae", "CsrA and three redundant small RNAs regulate quorum sensing in Vibrio cholerae: Regulation of quorum sensing in Vibrio cholerae", "Transcriptional Bursting In Gene Expression: Analytical Results For General Stochastic Models", "Prediction Of Csra-Regulating Small Rnas In Bacteria And Their Experimental Verification In Vibrio Fischeri", "Ab Initio Molecular-Dynamics Study Of The Structural And Transport Properties Of Liquid Germanium", "Exact Distributions For Stochastic Gene Expression Models With Bursting And Feedback", "Intrinsic Noise In Stochastic Models Of Gene Expression With Molecular Memory And Bursting", "Regulatory Targets Of Quorum Sensing In Vibrio Cholerae: Evidence For Two Distinct Hapr-Binding Motifs", "Connecting protein and mRNA burst distributions for stochastic models of gene expression.", "Structural rearrangement in an RsmA/CsrA ortholog of Pseudomonas aeruginosa creates a dimeric RNA-binding protein, RsmN."], "exe_time": 1.8336312770843506}
{"Query_en": "What is the citation count of the representative work of Peng Ye in Hydrolysis field?", "Answer": 27, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Peng\\xa0Ye', 'interest': 'Hydrolysis'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_num_citation = target_publication_dict['num_citation']\nfinal_result = target_num_citation\n", "result": 27, "exe_time": 2.146193265914917}
{"Query_en": "In which year was the representative work of Hoa Nguyen in Software field published?", "Answer": 2021, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Hoa Nguyen', 'interest': 'Software'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name=name, interest=interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\nperson_pubs = getPersonPubs(person_id=target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = person_pubs[0]\npublication_year = target_publication_dict['year']\nfinal_result = publication_year\n", "result": 2021, "exe_time": 1.9605000019073486}
{"Query_en": "Who are the authors of the representative work of Shibo Yao in Graph field?", "Answer": ["Shibo Yao", "Dantong Yu", "Keli Xiao"], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Shibo Yao', 'interest': 'Graph'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\nauthor_name_list = target_publication_dict['authors_name_list']\nfinal_result = author_name_list\n", "result": ["Shibo Yao", "Dantong Yu", "Keli Xiao"], "exe_time": 2.075141668319702}
{"Query_en": "Is Srijan Kumar at School of Computational Science and Engineering, College of Computing, Georgia Institute of Technology male or female?", "Answer": "male", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Srijan Kumar', 'organization': 'School of Computational Science and Engineering, College of Computing, Georgia Institute of Technology'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_gender = target_person_basic_info['gender']\nfinal_result = target_person_gender\n", "result": "male", "exe_time": 1.94541597366333}
{"Query_en": "What is the title of Hsiangfu Yu at Amazon, Palo Alto?", "Answer": "Ph.D", "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Hsiangfu Yu', 'organization': 'Amazon, Palo Alto'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_abstract = target_publication_dict['abstract']\nfinal_result = target_abstract\n", "result": "exe error", "exe_time": 2.0504820346832275}
{"Query_en": "What is the introduction of Hanchao Ma at Washington State University?", "Answer": "", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Hanchao Ma', 'organization': 'Washington State University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_bio = target_person_basic_info['bio']\nfinal_result = target_person_bio\n", "result": "", "exe_time": 1.7841753959655762}
{"Query_en": "What is the educational background of Brian J. Goode at Virginia Tech?", "Answer": "", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Brian J. Goode', 'organization': 'Virginia Tech'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_education_experience = target_person_basic_info['education_experience']\nfinal_result = target_person_education_experience\n", "result": "", "exe_time": 2.0175015926361084}
{"Query_en": "What is the email of Lars Schmidt-Thieme at Information Systems and Machine Learning Lab, University of Hildesheim?", "Answer": "schmidt-thieme@ismll.uni-hildesheim.de", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Lars Schmidt-Thieme', 'organization': 'Information Systems and Machine Learning Lab, University of Hildesheim'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_email = target_person_basic_info['email']\nfinal_result = target_person_email\n", "result": "schmidt-thieme@ismll.uni-hildesheim.de", "exe_time": 1.9060697555541992}
{"Query_en": "Is Pravallika Devineni in User Behavior field male or female?", "Answer": "female", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Pravallika Devineni', 'interest': 'User Behavior'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_gender = target_person_basic_info['gender']\nfinal_result = target_person_gender\n", "result": "female", "exe_time": 1.7915961742401123}
{"Query_en": "What is the title of Anuj Karpatne in Machine Learning field?", "Answer": "Assistant Professor", "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Anuj Karpatne', 'interest': 'Machine Learning'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_title = target_publication_dict['title']\nfinal_result = target_title\n", "result": "Theory-Guided Data Science: A New Paradigm for Scientific Discovery from Data.", "exe_time": 1.984360694885254}
{"Query_en": "What is the introduction of Zijiang Yang in Materials Discovery field?", "Answer": "Research Interest:<br>Data mining and machine learning algorithms and applications<br>Deep learning algorithms and applications<br>Material informatics", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Zijiang Yang', 'interest': 'Materials Discovery'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_bio = target_person_basic_info['bio']\nfinal_result = target_person_bio\n", "result": "Research Interest:<br>Data mining and machine learning algorithms and applications<br>Deep learning algorithms and applications<br>Material informatics", "exe_time": 1.772221326828003}
{"Query_en": "What is the educational background of Haiyan Chen in Incremental Learning field?", "Answer": "", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Haiyan Chen', 'interest': 'Incremental Learning'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_education_experience = target_person_basic_info['education_experience']\nfinal_result = target_person_education_experience\n", "result": "", "exe_time": 1.9719057083129883}
{"Query_en": "What is the email of Muhammad Abu Bakar Siddique in Selectivity Estimation field?", "Answer": "abubakar.ucr@gmail.com;msidd005@ucr.edu", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Muhammad Abu Bakar Siddique', 'interest': 'Selectivity Estimation'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_email = target_person_basic_info['email']\nfinal_result = target_person_email\n", "result": "abubakar.ucr@gmail.com;msidd005@ucr.edu", "exe_time": 1.8503448963165283}
{"Query_en": "Who among the collaborators of Changji Li at Department of Computer Science and Engineering, The Chinese University of Hong Kong are researching in Property Graphs field?", "Answer": ["Yifan Hou"], "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Changji Li', 'organization': 'Department of Computer Science and Engineering, The Chinese University of Hong Kong'}\nname = info['name']\norganization = info['organization']\ntarget_interest = info['interest']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthor_list = getCoauthors(person_id = target_person_id)\n\ntarget_coauthor_names = []\nfor coauthor in coauthor_list:\n    coauthor_id = coauthor['person_id']\n    coauthor_interests_list = getPersonInterest(person_id = coauthor_id)\n    if target_interest in coauthor_interests_list:\n        target_coauthor_names.append(coauthor['name'])\n\nfinal_result = target_coauthor_names\n", "result": "exe error", "exe_time": 2.8674464225769043}
{"Query_en": "Who has the highest citation count among the collaborators of Vladimir Ivashkin at Yandex?", "Answer": "Vadim Lebedev", "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Vladimir Ivashkin', 'organization': 'Yandex'}\nname = info['name']\norganization = info['organization']\n\n# Search the person\nperson_list = searchPerson(name=name, organization=organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# Get the coauthors\ncoauthors_list = getCoauthors(person_id=target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_citation = 0\nmax_citation_author_name = ''\n\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_citation = coauthor_info['num_citation']\n    if coauthor_citation > max_citation:\n        max_citation = coauthor_citation\n        max_citation_author_name = coauthor_info['name']\n\nfinal_result = max_citation_author_name\n", "result": "Vadim Lebedev", "exe_time": 3.5775034427642822}
{"Query_en": "Who has the most published papers among the collaborators of Shuwen Yang at School of Intelligence Science and Technology, Peking University?", "Answer": "Guojie Song", "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Shuwen Yang', 'organization': 'School of Intelligence Science and Technology, Peking University'}\nname = info['name']\norganization = info['organization']\n\n# Search the person\nperson_list = searchPerson(name=name, organization=organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# Get the coauthors\ncoauthors_list = getCoauthors(person_id=target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_pubs = 0\nmax_pubs_author_name = ''\n\n# Iterate each coauthor and calculate his/her publication number\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_pubs = coauthor_info['num_pubs']\n    if coauthor_pubs > max_pubs:\n        max_pubs = coauthor_pubs\n        max_pubs_author_name = coauthor_info['name']\n\nfinal_result = max_pubs_author_name\n", "result": "Guojie Song", "exe_time": 3.824016809463501}
{"Query_en": "Who among the collaborators of Jinghui Chen in Nonconvex Optimization field are at College of Information Sciences and Technology, Penn State Universityinstitution?", "Answer": ["Lu Lin"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Jinghui Chen', 'interest': 'Nonconvex Optimization'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\ncoauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\nfinal_result = coauthors_name_list\n", "result": ["Quanquan Gu", "Lu Lin", "Difan Zou", "Ting Wang", "Fenglong Ma", "Muchao Ye", "Juan Lavista Ferres"], "exe_time": 1.8835375308990479}
{"Query_en": "Who has the highest citation count among the collaborators of Ke Wang in Sentiment Analysis field?", "Answer": "Yanmin Zhu", "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Ke Wang', 'interest': 'Sentiment Analysis'}\nname = info['name']\ninterest = info['interest']\n\n# get specific person's information\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# Get the coauthors\ncoauthors_list = getCoauthors(person_id=target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_citation = 0\nmax_citation_author_name = ''\n\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_citation = coauthor_info['num_citation']\n    if coauthor_citation > max_citation:\n        max_citation = coauthor_citation\n        max_citation_author_name = coauthor_info['name']\n\nfinal_result = max_citation_author_name\n", "result": "Yanmin Zhu", "exe_time": 3.567841053009033}
{"Query_en": "Who has the most published papers among the collaborators of Logan Ward in Machine Learning field?", "Answer": "Ian T. Foster", "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Logan Ward', 'interest': 'Machine Learning'}\nname = info['name']\ninterest = info['interest']\n\n# get specific person's information\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# Get the coauthors\ncoauthors_list = getCoauthors(person_id=target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_pubs = 0\nmax_pubs_author_name = ''\n\n# Iterate each coauthor and calculate his/her publication number\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_pubs = coauthor_info['num_pubs']\n    if coauthor_pubs > max_pubs:\n        max_pubs = coauthor_pubs\n        max_pubs_author_name = coauthor_info['name']\n\nfinal_result = max_pubs_author_name\n", "result": "Ian T. Foster", "exe_time": 3.705136299133301}
{"Query_en": "Who are the collaborators of the collaborators of Qingwen Liu at College of Electronics and Information Engineering, Tongji University?", "Answer": ["Fei Sun", "Changhua Pei", "Yu Gong", "Qingwen Liu", "Yu Zhu", "Kenny Qili Zhu", "Zhao Li", "Xiaoyong Yang", "Jinyang Gao", "Xusheng Luo", "Dan Pei", "Zheng Qin", "Ziyu Guan", "Shuchang Liu", "Wenwu Ou", "Kenny Qili Zhu", "Zhao Li", "Qingwen Liu", "Yu Zhu", "Xusheng Luo", "Fei Sun", "Haoyuan Hu", "Ziyu Guan", "Philip S. Yu", "Deng Cai", "Shouling Ji", "Junxiong Zhu", "Benyou Wang", "Yaliang Li", "Bo Zheng", "Peng Zhang", "Lantao Yu", "Ziyu Guan", "Deng Cai", "Beidou Wang", "Wenwu Ou", "Yu Gong", "Martin Ester", "Qingwen Liu", "Junxiong Zhu", "Fei Sun", "Xiaofei He", "Kenny Qili Zhu", "Xusheng Luo", "Menghan Wang", "Zhao Li", "Shulong Tan", "Wenwu Ou", "Changhua Pei", "Bolin Ding", "Jinyang Gao", "Yanyan Lan", "Bin Cui", "Shuchang Liu", "Yu Gong", "Xiaoyong Yang", "Huawei Shen", "Qingwen Liu", "Xiangnan He", "Yu Zhu", "Yaliang Li", "Dan Pei", "Wei Zhao", "Deng Cai", "Xiaofei He", "Yaming Yang", "Xifeng Yan", "Yu Zhu", "Can Wang", "Beidou Wang", "Huan Sun", "Jianxin Li", "Shulong Tan", "Guang Qiu", "Dacheng Tao", "Martin Ester", "Wenwu Ou", "Yu Gong", "Wei Ning", "Junxiong Zhu", "Boxuan Zhang", "Guli Lin", "Xiao-Ming Wu", "Qingwen Liu", "Qimai Li"], "route": "searchPerson -> getCoauthors -> getCoauthors", "code": "info = {'name': 'Qingwen Liu', 'organization': 'College of Electronics and Information Engineering, Tongji University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors1_list = getCoauthors(person_id = target_person_id)\n\ncoauthors2_list = []\nfor coauthor in coauthors1_list:\n    coauthors2_list.extend(getCoauthors(person_id = coauthor['person_id']))\n\ncoauthors2_names = [coauthor['name'] for coauthor in coauthors2_list]\n\nfinal_result = coauthors2_names\n", "result": ["Fei Sun", "Changhua Pei", "Yu Gong", "Qingwen Liu", "Yu Zhu", "Kenny Qili Zhu", "Zhao Li", "Xiaoyong Yang", "Jinyang Gao", "Xusheng Luo", "Dan Pei", "Zheng Qin", "Ziyu Guan", "Shuchang Liu", "Wenwu Ou", "Kenny Qili Zhu", "Zhao Li", "Qingwen Liu", "Yu Zhu", "Xusheng Luo", "Fei Sun", "Haoyuan Hu", "Ziyu Guan", "Philip S. Yu", "Deng Cai", "Shouling Ji", "Junxiong Zhu", "Benyou Wang", "Yaliang Li", "Bo Zheng", "Peng Zhang", "Lantao Yu", "Ziyu Guan", "Deng Cai", "Beidou Wang", "Wenwu Ou", "Yu Gong", "Martin Ester", "Qingwen Liu", "Junxiong Zhu", "Fei Sun", "Xiaofei He", "Kenny Qili Zhu", "Xusheng Luo", "Menghan Wang", "Zhao Li", "Shulong Tan", "Wenwu Ou", "Changhua Pei", "Bolin Ding", "Jinyang Gao", "Yanyan Lan", "Bin Cui", "Shuchang Liu", "Yu Gong", "Xiaoyong Yang", "Huawei Shen", "Qingwen Liu", "Xiangnan He", "Yu Zhu", "Yaliang Li", "Dan Pei", "Wei Zhao", "Deng Cai", "Xiaofei He", "Yaming Yang", "Xifeng Yan", "Yu Zhu", "Can Wang", "Beidou Wang", "Huan Sun", "Jianxin Li", "Shulong Tan", "Guang Qiu", "Dacheng Tao", "Martin Ester", "Wenwu Ou", "Yu Gong", "Wei Ning", "Junxiong Zhu", "Boxuan Zhang", "Guli Lin", "Xiao-Ming Wu", "Qingwen Liu", "Qimai Li"], "exe_time": 2.6046690940856934}
{"Query_en": "Who are the collaborators of the collaborators of Yuxuan Zhao in Machine Learning (ml) field?", "Answer": ["Chengrun Yang", "Jicong Fan", "Lijun Ding", "Alp Yurtsever", "Nathan Kallus", "Yuxuan Zhao", "Chris De Sa", "Dae Won Kim", "Yuji Akimoto", "Dawn Song", "Ce Zhang", "Inderjit S. Dhillon", "Michael I. Jordan", "Alex Smola", "Lise Getoor"], "route": "searchPerson -> getCoauthors -> getCoauthors", "code": "info = {'name': 'Yuxuan Zhao', 'interest': 'Machine Learning (ml)'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors1_list = getCoauthors(person_id = target_person_id)\n\ncoauthors2_list = []\nfor coauthor in coauthors1_list:\n    coauthors2_list.extend(getCoauthors(person_id = coauthor['person_id']))\n\ncoauthors2_names = [coauthor['name'] for coauthor in coauthors2_list]\n\nfinal_result = coauthors2_names\n", "result": ["Chengrun Yang", "Jicong Fan", "Lijun Ding", "Alp Yurtsever", "Nathan Kallus", "Yuxuan Zhao", "Chris De Sa", "Dae Won Kim", "Yuji Akimoto", "Dawn Song", "Ce Zhang", "Inderjit S. Dhillon", "Michael I. Jordan", "Alex Smola", "Lise Getoor"], "exe_time": 2.5266940593719482}
{"Query_en": "What is the abstract of the representative work of Zhi-Hua Zhou at Nanjing University?", "Answer": "We study the problem of segmenting a sequence into k pieces so that the resulting segmentation satisfies monotonicity or unimodality constraints. Unimodal functions can be used to model phenomena in which a measured variable first increases to ...", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Zhi-Hua Zhou', 'organization': 'Nanjing University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_abstract = target_publication_info['abstract']\nfinal_result = target_abstract\n", "result": "We study the problem of segmenting a sequence into k pieces so that the resulting segmentation satisfies monotonicity or unimodality constraints. Unimodal functions can be used to model phenomena in which a measured variable first increases to ...", "exe_time": 2.461373805999756}
{"Query_en": "What is the PDF link of the representative work of Jiang Bian at Microsoft Research?", "Answer": "https://static.aminer.cn/storage/pdf/arxiv/21/2106/2106.09388.pdf", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Jiang Bian', 'organization': 'Microsoft Research'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_pdf = target_publication_info['pdf_link']\nfinal_result = target_pdf\n", "result": "https://static.aminer.cn/storage/pdf/arxiv/21/2106/2106.09388.pdf", "exe_time": 2.4100377559661865}
{"Query_en": "Which journal or conference included the representative work of Taichi Kiwaki at University of Tokyo?", "Answer": {"info": {"name": "American Journal of Ophthalmology", "publisher": "Elsevier"}, "issue": "", "volume": "193"}, "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Taichi Kiwaki', 'organization': 'University of Tokyo'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_venue = target_publication_info['venue']\nfinal_result = target_venue\n", "result": {"info": {"name": "American Journal of Ophthalmology", "publisher": "Elsevier"}, "issue": "", "volume": "193"}, "exe_time": 2.4365830421447754}
{"Query_en": "What is the abstract of the representative work of Elias Tragos in Faster Training field?", "Answer": "Federated learning (FL) is quickly becoming the de facto standard for the distributed training of deep recommendation models, using on-device user data and reducing server costs. In a typical FL process, a central server tasks end-users to train a shared recommendation model using their local data. The local models are trained over several rounds on the users' devices and the server combines them into a global model, which is sent to the devices for the purpose of providing recommendations. Standard FL approaches use randomly selected users for training at each round, and simply average their local models to compute the global model. The resulting federated recommendation models require significant client effort to train and many communication rounds before they converge to a satisfactory accuracy. Users are left with poor quality recommendations until the late stages of training. We present a novel technique, FedFast, to accelerate distributed learning which achieves good accuracy for all users very early in the training process. We achieve this by sampling from a diverse set of participating clients in each training round and applying an active aggregation method that propagates the updated model to the other clients. Consequently, with FedFast the users benefit from far lower communication costs and more accurate models that can be consumed anytime during the training process even at the very early stages. We demonstrate the efficacy of our approach across a variety of benchmark datasets and in comparison to state-of-the-art recommendation techniques.\n\n", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Elias Tragos', 'interest': 'Faster Training'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_abstract = target_publication_info['abstract']\nfinal_result = target_abstract\n", "result": "Federated learning (FL) is quickly becoming the de facto standard for the distributed training of deep recommendation models, using on-device user data and reducing server costs. In a typical FL process, a central server tasks end-users to train a shared recommendation model using their local data. The local models are trained over several rounds on the users' devices and the server combines them into a global model, which is sent to the devices for the purpose of providing recommendations. Standard FL approaches use randomly selected users for training at each round, and simply average their local models to compute the global model. The resulting federated recommendation models require significant client effort to train and many communication rounds before they converge to a satisfactory accuracy. Users are left with poor quality recommendations until the late stages of training. We present a novel technique, FedFast, to accelerate distributed learning which achieves good accuracy for all users very early in the training process. We achieve this by sampling from a diverse set of participating clients in each training round and applying an active aggregation method that propagates the updated model to the other clients. Consequently, with FedFast the users benefit from far lower communication costs and more accurate models that can be consumed anytime during the training process even at the very early stages. We demonstrate the efficacy of our approach across a variety of benchmark datasets and in comparison to state-of-the-art recommendation techniques.\n\n", "exe_time": 2.4130191802978516}
{"Query_en": "What is the PDF link of the representative work of Gregory Humberto Canal in Paired Comparisons field?", "Answer": "https://static.aminer.cn/upload/pdf/1754/1072/888/5f7fdd328de39f0828398085_0.pdf", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Gregory Humberto Canal', 'interest': 'Paired Comparisons'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_pdf = target_publication_info['pdf_link']\nfinal_result = target_pdf\n", "result": "https://static.aminer.cn/upload/pdf/1754/1072/888/5f7fdd328de39f0828398085_0.pdf", "exe_time": 2.469025135040283}
{"Query_en": "Which journal or conference included the representative work of Tadashi Okoshi in Attention Management field?", "Answer": {"id": "53a72cf620f7420be8c548e2", "info": {"name": "MobiSys"}, "issue": "", "type": 0, "volume": ""}, "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Tadashi Okoshi', 'interest': 'Attention Management'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_venue = target_publication_info['venue']\nfinal_result = target_venue\n", "result": {"id": "53a72cf620f7420be8c548e2", "info": {"name": "MobiSys"}, "issue": "", "type": 0, "volume": ""}, "exe_time": 2.4182536602020264}
