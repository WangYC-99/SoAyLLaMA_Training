{"Query_en": "Research interests of Yuandong Wang at Beihang University", "Answer": ["Demand Prediction", "Passenger Demand Prediction", "Representation Learning", "Dynamic Graph", "Chauffeured Car Service", "Ride Service", "Ride-hailing Application", "Graph Convolution", "Multi-task Learning", "Spatiotemporal Data Mining"], "route": "searchPerson", "code": "info = {'name': 'Yuandong Wang', 'organization': 'Beihang University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ninterests = target_person_info['interests']\nfinal_result = interests\n", "result": ["Demand Prediction", "Passenger Demand Prediction", "Representation Learning", "Dynamic Graph", "Chauffeured Car Service", "Ride Service", "Ride-hailing Application", "Graph Convolution", "Multi-task Learning", "Spatiotemporal Data Mining"], "exe_time": 1.1812365055084229}
{"Query_en": "Citation count of Vikas Raykar at IBM Research AI", "Answer": 5934, "route": "searchPerson", "code": "info = {'name': 'Vikas Raykar', 'organization': 'IBM Research AI'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\nnum_citation = target_person_info['num_citation']\nfinal_result = num_citation\n", "result": 5934, "exe_time": 1.2641360759735107}
{"Query_en": "Number of published papers by Karthikeyan Shanmugam at IBM Research AI", "Answer": 120, "route": "searchPerson", "code": "info = {'name': 'Karthikeyan Shanmugam', 'organization': 'IBM Research AI'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\nnum_pubs = target_person_info['num_pubs']\nfinal_result = num_pubs\n", "result": 120, "exe_time": 1.327404499053955}
{"Query_en": "Which institution does Saurabh Garg who researches in Saurabh Garg field belong to?", "Answer": "Machine Learning Department, School of Computer Science, Carnegie Mellon University", "route": "searchPerson", "code": "info = {'name': 'Saurabh Garg', 'interest': 'Saurabh Garg'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\norganization = target_person_info['organization']\nfinal_result = organization\n", "result": "Machine Learning Department, School of Computer Science, Carnegie Mellon University", "exe_time": 1.2092087268829346}
{"Query_en": "Citation count of Yu-Chia Chen who researches in Nervous System field", "Answer": 2, "route": "searchPerson", "code": "info = {'name': 'Yu-Chia Chen', 'interest': 'Nervous System'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\nnum_citation = target_person_info['num_citation']\nfinal_result = num_citation\n", "result": 2, "exe_time": 1.26381516456604}
{"Query_en": "Number of papers published by Samy Bengio who researches in Speech field", "Answer": 381, "route": "searchPerson", "code": "info = {'name': 'Samy Bengio', 'interest': 'Speech'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\nnum_pubs = target_person_info['num_pubs']\nfinal_result = num_pubs\n", "result": 381, "exe_time": 1.226353406906128}
{"Query_en": "Who are the researchers at Computer Science, University of Southern California?", "Answer": ["Basel Shbita"], "route": "searchPerson", "code": "info = {'organization': 'Computer Science, University of Southern California'}\norganization = info['organization']\n\nperson_list = searchPerson(organization = organization)\nname_list = [person_list[i]['name'] for i in range(len(person_list))]\nfinal_result = name_list\n", "result": ["Basel Shbita"], "exe_time": 1.0059258937835693}
{"Query_en": "Who are the researchers in Variational Autoencoder field?", "Answer": ["Chang Zhou", "Chuhan Wu", "Ming Ding", "Xianfeng Tang", "Yu-An Chung", "Kunpeng Zhang", "Jing Zhang", "Ting Zhong", "Ling Huang", "Ruocheng Guo"], "route": "searchPerson", "code": "info = {'interest': 'Variational Autoencoder'}\ninterest = info['interest']\n\nperson_list = searchPerson(interest = interest)\nname_list = [person_list[i]['name'] for i in range(len(person_list))]\nfinal_result = name_list\n", "result": ["Chang Zhou", "Chuhan Wu", "Ming Ding", "Xianfeng Tang", "Yu-An Chung", "Kunpeng Zhang", "Jing Zhang", "Ting Zhong", "Ling Huang", "Ruocheng Guo"], "exe_time": 0.9711549282073975}
{"Query_en": "Who are the collaborators of Gong Zhang at Huawei Technologies?", "Answer": ["Kai Lei", "Tong Yang", "Guihai Chen", "Bin Cui", "Bo Li"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Gong Zhang', 'organization': 'Huawei Technologies'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\ncoauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\nfinal_result = coauthors_name_list\n", "result": ["Kai Lei", "Tong Yang", "Guihai Chen", "Bin Cui", "Bo Li"], "exe_time": 1.8737220764160156}
{"Query_en": "Who are the collaborators of Yulin Wang in Semi-supervised Learning field?", "Answer": ["Yizeng Han", "Cheng Wu", "Xuran Pan", "Qi Tian", "Rui Lu", "Chaofei Wang", "Yuanze Lin"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Yulin Wang', 'interest': 'Semi-supervised Learning'}\ninterest = info['interest']\nname = info['name']\n\ninterest_person_list = searchPerson(interest = interest)\ninterest_person_id_list = [person['person_id'] for person in interest_person_list]\ntarget_list = []\nfor interest_person_id in interest_person_id_list:\n    coauthors = getCoauthors(person_id = interest_person_id)\n    coauthor_name_list = [coauthor['name'] for coauthor in coauthors]\n    if name in coauthor_name_list:\n        target_list.append(getPersonBasicInfo(person_id=interest_person_id)['name'])\nfinal_result = target_list\n", "result": [], "exe_time": 2.445909261703491}
{"Query_en": "Who at 4Paradigm has a collaboration with Mengshuo Wang?", "Answer": ["Yuanfei Luo"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Mengshuo Wang', 'organization': '4Paradigm'}\norganization = info['organization']\nname = info['name']\n\norganization_person_list = searchPerson(organization = organization)\norganization_person_id_list = [person['person_id'] for person in organization_person_list]\ntarget_list = []\nfor interest_person_id in organization_person_id_list:\n    coauthors = getCoauthors(person_id = interest_person_id)\n    coauthor_name_list = [coauthor['name'] for coauthor in coauthors]\n    if name in coauthor_name_list:\n        target_list.append(getPersonBasicInfo(person_id=interest_person_id)['name'])\nfinal_result = target_list\n", "result": ["Yuanfei Luo"], "exe_time": 2.4488930702209473}
{"Query_en": "Who in Indexation field has a collaboration with Yufei Tao?", "Answer": ["Jian Pei"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Yufei Tao', 'interest': 'Indexation'}\ninterest = info['interest']\nname = info['name']\n\ninterest_person_list = searchPerson(interest = interest)\ninterest_person_id_list = [person['person_id'] for person in interest_person_list]\ntarget_list = []\nfor interest_person_id in interest_person_id_list:\n    coauthors = getCoauthors(person_id = interest_person_id)\n    coauthor_name_list = [coauthor['name'] for coauthor in coauthors]\n    if name in coauthor_name_list:\n        target_list.append(getPersonBasicInfo(person_id=interest_person_id)['name'])\nfinal_result = target_list\n", "result": ["Jian Pei"], "exe_time": 2.422623634338379}
{"Query_en": "What are the papers published by ShijuÂ Li at Florida Institute of Technology?", "Answer": ["Estimating Distributions of Large Graphs from Incomplete Sampled Data", "Trapping Malicious Crawlers in Social Networks"], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Shiju\\xa0Li', 'organization': 'Florida Institute of Technology'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\npublications_title_list = [publication['title'] for publication in publications_list]\nfinal_result = publications_title_list\n", "result": ["Estimating Distributions of Large Graphs from Incomplete Sampled Data", "Trapping Malicious Crawlers in Social Networks"], "exe_time": 1.831845998764038}
{"Query_en": "What is the citation count of the representative work of Cristian Borcea at Department of Computer Science, New Jersey Institute of Technology?", "Answer": 618, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Cristian Borcea', 'organization': 'Department of Computer Science, New Jersey Institute of Technology'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_num_citation = target_publication_dict['num_citation']\nfinal_result = target_num_citation\n", "result": 618, "exe_time": 2.2116761207580566}
{"Query_en": "In which year was the representative work of Dave Debarr at Microsoft published?", "Answer": 2013, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Dave Debarr', 'organization': 'Microsoft'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\nmax_citation = publications_list[0]\nfinal_result = max_citation['year']\n", "result": 2013, "exe_time": 1.7743360996246338}
{"Query_en": "Who are the authors of the representative work of Kevin Yancey at Duolingo?", "Answer": ["Arya D. McCarthy", "Kevin P. Yancey", "Geoffrey T. LaFlair", "Jesse Egbert", "Manqian Liao", "Burr Settles"], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Kevin Yancey', 'organization': 'Duolingo'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\nauthor_name_list = target_publication_dict['authors_name_list']\nfinal_result = author_name_list\n", "result": ["Arya D. McCarthy", "Kevin P. Yancey", "Geoffrey T. LaFlair", "Jesse Egbert", "Manqian Liao", "Burr Settles"], "exe_time": 2.111832618713379}
{"Query_en": "What are the papers published by Jincheng Mei in Policy Gradient field?", "Answer": ["On the Global Convergence Rates of Softmax Policy Gradient Methods", "Locality Preserving Hashing", "Leveraging Non-uniformity in First-order Non-convex Optimization", "Escaping the Gravitational Pull of Softmax", "On Principled Entropy Exploration in Policy Optimization.", "Maximum Entropy Monte-Carlo Planning", "On the Optimality of Batch Policy Optimization Algorithms.", "Memory-Augmented Monte Carlo Tree Search.", "Identifying and Tracking Sentiments and Topics from Social Media Texts during Natural Disasters.", "Frequency-based Search-control in Dyna"], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Jincheng Mei', 'interest': 'Policy Gradient'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name=name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\npublications_title_list = [publication['title'] for publication in publications_list]\nfinal_result = publications_title_list\n", "result": ["On the Global Convergence Rates of Softmax Policy Gradient Methods", "Locality Preserving Hashing", "Leveraging Non-uniformity in First-order Non-convex Optimization", "Escaping the Gravitational Pull of Softmax", "On Principled Entropy Exploration in Policy Optimization.", "Maximum Entropy Monte-Carlo Planning", "On the Optimality of Batch Policy Optimization Algorithms.", "Memory-Augmented Monte Carlo Tree Search.", "Identifying and Tracking Sentiments and Topics from Social Media Texts during Natural Disasters.", "Frequency-based Search-control in Dyna"], "exe_time": 1.7856354713439941}
{"Query_en": "What is the citation count of the representative work of Thijs Vogels in Kernel Prediction field?", "Answer": 291, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Thijs Vogels', 'interest': 'Kernel Prediction'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_num_citation = target_publication_dict['num_citation']\nfinal_result = target_num_citation\n", "result": 291, "exe_time": 2.1088223457336426}
{"Query_en": "In which year was the representative work of Tao Jin in Reverse Engineering field published?", "Answer": 2006, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Tao Jin', 'interest': 'Reverse Engineering'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name=name, interest=interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\nperson_pubs = getPersonPubs(person_id=target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = person_pubs[0]\npublication_year = target_publication_dict['year']\nfinal_result = publication_year\n", "result": 2006, "exe_time": 1.9510364532470703}
{"Query_en": "Who are the authors of the representative work of Michael N. Arbel in Bilevel Optimization field?", "Answer": ["Mikolaj Binkowski", "Dougal J. Sutherland", "Michael Arbel", "Arthur Gretton"], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Michael N. Arbel', 'interest': 'Bilevel Optimization'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name=name, interest=interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id=target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\nauthor_name_list = target_publication_dict['authors_name_list']\nfinal_result = author_name_list\n", "result": ["Mikolaj Binkowski", "Dougal J. Sutherland", "Michael Arbel", "Arthur Gretton"], "exe_time": 2.142319440841675}
{"Query_en": "Is Shuang Yang at Alibaba Group male or female?", "Answer": "male", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Shuang Yang', 'organization': 'Alibaba Group'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_gender = target_person_basic_info['gender']\nfinal_result = target_person_gender\n", "result": "male", "exe_time": 1.777505874633789}
{"Query_en": "What is the title of Yanchao Tan at College of Computer and Data Science, Fuzhou University?", "Answer": "", "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Yanchao Tan', 'organization': 'College of Computer and Data Science, Fuzhou University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\nmax_citation = publications_list[0]\nfinal_result = max_citation['title']\n", "result": "exe error", "exe_time": 1.9029722213745117}
{"Query_en": "What is the introduction of Matteo Castiglioni at Department of Electronics, Information and Bioengineering, Politecnico di Milano?", "Answer": "My current research focuses on Artificial Intelligence and algorithmic game theory. In particular, I'm interested in combining machine learning techniques with economic paradigms to build strategic agents able to act in complex multi-agent environments.", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Matteo Castiglioni', 'organization': 'Department of Electronics, Information and Bioengineering, Politecnico di Milano'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_bio = target_person_basic_info['bio']\nfinal_result = target_person_bio\n", "result": "My current research focuses on Artificial Intelligence and algorithmic game theory. In particular, I'm interested in combining machine learning techniques with economic paradigms to build strategic agents able to act in complex multi-agent environments.", "exe_time": 1.9766221046447754}
{"Query_en": "What is the educational background of Shaunak Mishra at Yahoo Research?", "Answer": "PhD student at UCLA (Electrical Engineering, advisor Prof. Suhas Diggavi).", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Shaunak Mishra', 'organization': 'Yahoo Research'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_education_experience = target_person_basic_info['education_experience']\nfinal_result = target_person_education_experience\n", "result": "PhD student at UCLA (Electrical Engineering, advisor Prof. Suhas Diggavi).", "exe_time": 2.01419997215271}
{"Query_en": "What is the email of Jun Luo at Lenovo Group Limited?", "Answer": "", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Jun Luo', 'organization': 'Lenovo Group Limited'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_email = target_person_basic_info['email']\nfinal_result = target_person_email\n", "result": "", "exe_time": 1.7736992835998535}
{"Query_en": "Is Jack FitzGerald in Myocardial Infarction field male or female?", "Answer": "male", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Jack FitzGerald', 'interest': 'Myocardial Infarction'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_gender = target_person_basic_info['gender']\nfinal_result = target_person_gender\n", "result": "male", "exe_time": 1.8150725364685059}
{"Query_en": "What is the title of Bohang Zhang in Adversarial Robustness field?", "Answer": "Co-Founder", "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Bohang Zhang', 'interest': 'Adversarial Robustness'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_title = target_publication_dict['title']\nfinal_result = target_title\n", "result": "Improved Analysis of Clipping Algorithms for Non-convex Optimization", "exe_time": 2.0328996181488037}
{"Query_en": "What is the introduction of Heinrich Jiang in Churn field?", "Answer": "Honors & awards\nInternational Mathematics Olympiad (IMO) Bronze Medal\nUSA Computing Olympiad (USACO) Gold Division Qualifier\nUSA Mathematics Olympiad (USAMO) Top 30", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Heinrich Jiang', 'interest': 'Churn'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_bio = target_person_basic_info['bio']\nfinal_result = target_person_bio\n", "result": "Honors & awards\nInternational Mathematics Olympiad (IMO) Bronze Medal\nUSA Computing Olympiad (USACO) Gold Division Qualifier\nUSA Mathematics Olympiad (USAMO) Top 30", "exe_time": 1.7610666751861572}
{"Query_en": "What is the educational background of James Hong in Cable News field?", "Answer": "PhD Candidate, Stanford University 2017 - 2022<br><br>Master of Science, Stanford University 2015 - 2017<br><br>Bachelor of Science, Stanford University 2012 - 2016", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'James Hong', 'interest': 'Cable News'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_education_experience = target_person_basic_info['education_experience']\nfinal_result = target_person_education_experience\n", "result": "PhD Candidate, Stanford University 2017 - 2022<br><br>Master of Science, Stanford University 2015 - 2017<br><br>Bachelor of Science, Stanford University 2012 - 2016", "exe_time": 1.9435384273529053}
{"Query_en": "What is the email of Jin-Duk Park in Tomography field?", "Answer": "jindeok6@yonsei.ac.kr", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Jin-Duk Park', 'interest': 'Tomography'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_email = target_person_basic_info['email']\nfinal_result = target_person_email\n", "result": "jindeok6@yonsei.ac.kr", "exe_time": 1.7698307037353516}
{"Query_en": "Who among the collaborators of Guangde Chen at LinkedIn Corporation are researching in Internal Promotion field?", "Answer": ["Shipeng Yu", "Rupesh Gupta"], "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Guangde Chen', 'organization': 'LinkedIn Corporation'}\nname = info['name']\norganization = info['organization']\ntarget_interest = info['interest']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthor_list = getCoauthors(person_id = target_person_id)\n\ntarget_coauthor_names = []\nfor coauthor in coauthor_list:\n    coauthor_id = coauthor['person_id']\n    coauthor_interests_list = getPersonInterest(person_id = coauthor_id)\n    if target_interest in coauthor_interests_list:\n        target_coauthor_names.append(coauthor['name'])\n\nfinal_result = target_coauthor_names\n", "result": "exe error", "exe_time": 2.7377209663391113}
{"Query_en": "Who has the highest citation count among the collaborators of Artur Mrowca at BMW Group?", "Answer": "Stephan GÃ¼nnemann", "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Artur Mrowca', 'organization': 'BMW Group'}\nname = info['name']\norganization = info['organization']\n\n# Search the person\nperson_list = searchPerson(name=name, organization=organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# Get the coauthors\ncoauthors_list = getCoauthors(person_id=target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_citation = 0\nmax_citation_author_name = ''\n\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_citation = coauthor_info['num_citation']\n    if coauthor_citation > max_citation:\n        max_citation = coauthor_citation\n        max_citation_author_name = coauthor_info['name']\n\nfinal_result = max_citation_author_name\n", "result": "Stephan GÃ¼nnemann", "exe_time": 3.5587587356567383}
{"Query_en": "Who has the most published papers among the collaborators of Yu Zhu at Alibaba Group?", "Answer": "Xiaofei He", "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Yu Zhu', 'organization': 'Alibaba Group'}\nname = info['name']\norganization = info['organization']\n\n# Search the person\nperson_list = searchPerson(name=name, organization=organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# Get the coauthors\ncoauthors_list = getCoauthors(person_id=target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_pubs = 0\nmax_pubs_author_name = ''\n\n# Iterate each coauthor and calculate his/her publication number\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_pubs = coauthor_info['num_pubs']\n    if coauthor_pubs > max_pubs:\n        max_pubs = coauthor_pubs\n        max_pubs_author_name = coauthor_info['name']\n\nfinal_result = max_pubs_author_name\n", "result": "Xiaofei He", "exe_time": 3.719341278076172}
{"Query_en": "Who among the collaborators of Brian M. Bot in Digital Health field are at Sage Bionetworksinstitution?", "Answer": ["Elias Chaibub Neto", "Abhishek(Abhi) Pratap", "Larsson Omberg", "Thanneer Malai Perumal", "Meghasyam Tummalacherla"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Brian M. Bot', 'interest': 'Digital Health'}\ninterest = info['interest']\nname = info['name']\n\ninterest_person_list = searchPerson(interest = interest)\ninterest_person_id_list = [person['person_id'] for person in interest_person_list]\ntarget_list = []\nfor interest_person_id in interest_person_id_list:\n    coauthors = getCoauthors(person_id = interest_person_id)\n    coauthor_name_list = [coauthor['name'] for coauthor in coauthors]\n    if name in coauthor_name_list:\n        target_list.append(getPersonBasicInfo(person_id=interest_person_id)['name'])\nfinal_result = target_list\n", "result": ["Larsson Omberg", "Elias Chaibub Neto", "Thanneer Malai Perumal", "Abhishek(Abhi) Pratap", "Lara Mangravite", "Meghasyam Tummalacherla"], "exe_time": 2.434556245803833}
{"Query_en": "Who has the highest citation count among the collaborators of Kaiyu FENG in Big Bang Singularity field?", "Answer": "Guoren Wang", "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Kaiyu FENG', 'interest': 'Big Bang Singularity'}\nname = info['name']\ninterest = info['interest']\n\n# get specific person's information\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# Get the coauthors\ncoauthors_list = getCoauthors(person_id=target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_citation = 0\nmax_citation_author_name = ''\n\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_citation = coauthor_info['num_citation']\n    if coauthor_citation > max_citation:\n        max_citation = coauthor_citation\n        max_citation_author_name = coauthor_info['name']\n\nfinal_result = max_citation_author_name\n", "result": "Guoren Wang", "exe_time": 3.6508102416992188}
{"Query_en": "Who has the most published papers among the collaborators of Pauli Miettinen in Data Mining field?", "Answer": "Dacheng Tao", "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Pauli Miettinen', 'interest': 'Data Mining'}\nname = info['name']\ninterest = info['interest']\n\n# get specific person's information\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# Get the coauthors\ncoauthors_list = getCoauthors(person_id=target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_pubs = 0\nmax_pubs_author_name = ''\n\n# Iterate each coauthor and calculate his/her publication number\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_pubs = coauthor_info['num_pubs']\n    if coauthor_pubs > max_pubs:\n        max_pubs = coauthor_pubs\n        max_pubs_author_name = coauthor_info['name']\n\nfinal_result = max_pubs_author_name\n", "result": "Dacheng Tao", "exe_time": 3.73921275138855}
{"Query_en": "Who are the collaborators of the collaborators of Yuan Guo at Northeastern University?", "Answer": ["Jennifer G. Dy", "Deniz Erdogmus", "Michael F. Chiang", "Jayashree Kalpathy-Cramer", "Susan Ostmo", "Peng Tian", "Udi Weinsberg", "John Peter Campbell", "Zifeng Wang", "Yuan Guo", "JosÃ© Bento Ayres Pereira", "Jinyun Yan", "Jayashree Kalpathy-Cramer", "Michael F. Chiang", "Jennifer G. Dy", "Stratis Ioannidis", "Susan Ostmo", "Peng Tian", "John Peter Campbell", "Stratis Ioannidis", "Deniz Erdogmus", "Michael F. Chiang", "Susan Ostmo", "Jayashree Kalpathy-Cramer", "Zifeng Wang", "Peng Tian", "Junxiang Chen ", "John Peter Campbell", "Deniz Erdogmus", "Stratis Ioannidis", "Michael F. Chiang", "Susan Ostmo", "Jayashree Kalpathy-Cramer", "Jennifer G. Dy", "John Peter Campbell", "Yuan Guo", "Michael F. Chiang", "Jayashree Kalpathy-Cramer", "Deniz Erdogmus", "Stratis Ioannidis", "John Peter Campbell", "Jennifer G. Dy", "Peng Tian", "Yuan Guo", "Michael F. Chiang", "Susan Ostmo", "Deniz Erdogmus", "Stratis Ioannidis", "John Peter Campbell", "Jennifer G. Dy", "Peng Tian", "Susan Ostmo", "Jayashree Kalpathy-Cramer", "Deniz Erdogmus", "John Peter Campbell", "Stratis Ioannidis", "Jennifer G. Dy", "Peng Tian", "Michael F. Chiang", "Susan Ostmo", "Jayashree Kalpathy-Cramer", "Deniz Erdogmus", "Stratis Ioannidis", "Jennifer G. Dy", "Peng Tian", "Yuan Guo"], "route": "searchPerson -> getCoauthors -> getCoauthors", "code": "info = {'name': 'Yuan Guo', 'organization': 'Northeastern University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors1_list = getCoauthors(person_id = target_person_id)\n\ncoauthors2_list = []\nfor coauthor in coauthors1_list:\n    coauthors2_list.extend(getCoauthors(person_id = coauthor['person_id']))\n\ncoauthors2_names = [coauthor['name'] for coauthor in coauthors2_list]\n\nfinal_result = coauthors2_names\n", "result": ["Jennifer G. Dy", "Deniz Erdogmus", "Michael F. Chiang", "Jayashree Kalpathy-Cramer", "Susan Ostmo", "Peng Tian", "Udi Weinsberg", "John Peter Campbell", "Zifeng Wang", "Yuan Guo", "JosÃ© Bento Ayres Pereira", "Jinyun Yan", "Jayashree Kalpathy-Cramer", "Michael F. Chiang", "Jennifer G. Dy", "Stratis Ioannidis", "Susan Ostmo", "Peng Tian", "John Peter Campbell", "Stratis Ioannidis", "Deniz Erdogmus", "Michael F. Chiang", "Susan Ostmo", "Jayashree Kalpathy-Cramer", "Zifeng Wang", "Peng Tian", "Junxiang Chen ", "John Peter Campbell", "Deniz Erdogmus", "Stratis Ioannidis", "Michael F. Chiang", "Susan Ostmo", "Jayashree Kalpathy-Cramer", "Jennifer G. Dy", "John Peter Campbell", "Yuan Guo", "Michael F. Chiang", "Jayashree Kalpathy-Cramer", "Deniz Erdogmus", "Stratis Ioannidis", "John Peter Campbell", "Jennifer G. Dy", "Peng Tian", "Yuan Guo", "Michael F. Chiang", "Susan Ostmo", "Deniz Erdogmus", "Stratis Ioannidis", "John Peter Campbell", "Jennifer G. Dy", "Peng Tian", "Susan Ostmo", "Jayashree Kalpathy-Cramer", "Deniz Erdogmus", "John Peter Campbell", "Stratis Ioannidis", "Jennifer G. Dy", "Peng Tian", "Michael F. Chiang", "Susan Ostmo", "Jayashree Kalpathy-Cramer", "Deniz Erdogmus", "Stratis Ioannidis", "Jennifer G. Dy", "Peng Tian", "Yuan Guo"], "exe_time": 2.523940086364746}
{"Query_en": "Who are the collaborators of the collaborators of Gerd Stumme in Formal Concept Analysis field?", "Answer": ["Gerd Stumme", "Alvin Chin", "Jaideep Srivastava", "Olfa Nasraoui", "Gerd Stumme", "Dunia MladeniÄ", "Josif Grabocka", "Steffen Rendle", "Gerd Stumme", "Ahmed Rashed", "Marko Grobelnik", "Myra Spiliopoulou", "Gerd Stumme", "Rayid Ghani", "Lars Schmidt-Thieme", "Walid Krichene", "Gerd Stumme", "Yehuda Koren", "Ed H. Chi", "Xiangnan He", "Lichan Hong", "Bhargav Kanagal"], "route": "searchPerson -> getCoauthors -> getCoauthors", "code": "info = {'name': 'Gerd Stumme', 'interest': 'Formal Concept Analysis'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors1_list = getCoauthors(person_id = target_person_id)\n\ncoauthors2_list = []\nfor coauthor in coauthors1_list:\n    coauthors2_list.extend(getCoauthors(person_id = coauthor['person_id']))\n\ncoauthors2_names = [coauthor['name'] for coauthor in coauthors2_list]\n\nfinal_result = coauthors2_names\n", "result": ["Gerd Stumme", "Alvin Chin", "Jaideep Srivastava", "Olfa Nasraoui", "Gerd Stumme", "Dunia MladeniÄ", "Josif Grabocka", "Steffen Rendle", "Gerd Stumme", "Ahmed Rashed", "Marko Grobelnik", "Myra Spiliopoulou", "Gerd Stumme", "Rayid Ghani", "Lars Schmidt-Thieme", "Walid Krichene", "Gerd Stumme", "Yehuda Koren", "Ed H. Chi", "Xiangnan He", "Lichan Hong", "Bhargav Kanagal"], "exe_time": 2.5158331394195557}
{"Query_en": "What is the abstract of the representative work of Jiachen Sun at RobustNet Lab, University of Michigan, Ann Arbor?", "Answer": "Perception plays a pivotal role in autonomous driving systems, which utilizes onboard sensors like cameras and LiDARs (Light Detection and Ranging) to assess surroundings. Recent studies have demonstrated that LiDAR-based perception is vulnerable to spoofing attacks, in which adversaries spoof a fake vehicle in front of a victim self-driving car by strategically transmitting laser signals to the victim's LiDAR sensor. However, existing attacks suffer from effectiveness and generality limitations. In this work, we perform the first study to explore the general vulnerability of current LiDAR-based perception architectures and discover that the ignored occlusion patterns in LiDAR point clouds make self-driving cars vulnerable to spoofing attacks. We construct the first black-box spoofing attack based on our identified vulnerability, which universally achieves around 80% mean success rates on all target models. We perform the first defense study, proposing CARLO to mitigate LiDAR spoofing attacks. CARLO detects spoofed data by treating ignored occlusion patterns as invariant physical features, which reduces the mean attack success rate to 5.5%. Meanwhile, we take the first step towards exploring a general architecture for robust LiDAR-based perception, and propose SVF that embeds the neglected physical features into end-to-end learning. SVF further reduces the mean attack success rate to around 2.3%.", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Jiachen Sun', 'organization': 'RobustNet Lab, University of Michigan, Ann Arbor'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_abstract = target_publication_info['abstract']\nfinal_result = target_abstract\n", "result": "Perception plays a pivotal role in autonomous driving systems, which utilizes onboard sensors like cameras and LiDARs (Light Detection and Ranging) to assess surroundings. Recent studies have demonstrated that LiDAR-based perception is vulnerable to spoofing attacks, in which adversaries spoof a fake vehicle in front of a victim self-driving car by strategically transmitting laser signals to the victim's LiDAR sensor. However, existing attacks suffer from effectiveness and generality limitations. In this work, we perform the first study to explore the general vulnerability of current LiDAR-based perception architectures and discover that the ignored occlusion patterns in LiDAR point clouds make self-driving cars vulnerable to spoofing attacks. We construct the first black-box spoofing attack based on our identified vulnerability, which universally achieves around 80% mean success rates on all target models. We perform the first defense study, proposing CARLO to mitigate LiDAR spoofing attacks. CARLO detects spoofed data by treating ignored occlusion patterns as invariant physical features, which reduces the mean attack success rate to 5.5%. Meanwhile, we take the first step towards exploring a general architecture for robust LiDAR-based perception, and propose SVF that embeds the neglected physical features into end-to-end learning. SVF further reduces the mean attack success rate to around 2.3%.", "exe_time": 2.5046701431274414}
{"Query_en": "What is the PDF link of the representative work of Bo Li at School of Economics and Management, Tsinghua University?", "Answer": "https://static.aminer.cn/upload/pdf/476/985/1375/53e99bc0b7602d970246a830_0.pdf", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Bo Li', 'organization': 'School of Economics and Management, Tsinghua University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_pdf = target_publication_info['pdf_link']\nfinal_result = target_pdf\n", "result": "https://static.aminer.cn/upload/pdf/476/985/1375/53e99bc0b7602d970246a830_0.pdf", "exe_time": 2.514087677001953}
{"Query_en": "Which journal or conference included the representative work of Rui Zhang at School of Computing and Information Systems, The University of Melbourne?", "Answer": {"id": "53e17f7020f7dfbc07e8ace0", "info": {"name": "ACM Transactions on Database Systems"}, "issue": "2", "type": 1, "volume": "30"}, "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Rui Zhang', 'organization': 'School of Computing and Information Systems, The University of Melbourne'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_venue = target_publication_info['venue']\nfinal_result = target_venue\n", "result": {"id": "53e17f7020f7dfbc07e8ace0", "info": {"name": "ACM Transactions on Database Systems"}, "issue": "2", "type": 1, "volume": "30"}, "exe_time": 2.5183215141296387}
{"Query_en": "What is the abstract of the representative work of Martin Pavlovski in Deep Learning field?", "Answer": "Objective: We sought to predict if patients with type 2 diabetes mellitus (DM2) would develop 10 selected complications. Accurate prediction of complications could help with more targeted measures that would prevent or slow down their development.Materials and Methods: Experiments were conducted on the Healthcare Cost and Utilization Project State Inpatient Databases of California for the period of 2003 to 2011. Recurrent neural network (RNN) long short-term memory (LSTM) and RNN gated recurrent unit (GRU) deep learning methods were designed and compared with random forest and multilayer perceptron traditional models. Prediction accuracy of selected complications were compared on 3 settings corresponding to minimum number of hospitalizations between diabetes diagnosis and the diagnosis of complications.Results: The diagnosis domain was used for experiments. The best results were achieved with RNN GRU model, followed by RNN LSTM model. The prediction accuracy achieved with RNN GRU model was between 73% (myocardial infarction) and 83% (chronic ischemic heart disease), while accuracy of traditional models was between 66% - 76%.Discussion: The number of hospitalizations was an important factor for the prediction accuracy. Experiments with 4 hospitalizations achieved significantly better accuracy than with 2 hospitalizations. To achieve improved accuracy deep learning models required training on at least 1000 patients and accuracy significantly dropped if training datasets contained 500 patients. The prediction accuracy of complications decreases over time period. Considering individual complications, the best accuracy was achieved on depressive disorder and chronic ischemic heart disease.Conclusions: The RNN GRU model was the best choice for electronic medical record type of data, based on the achieved results.", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Martin Pavlovski', 'interest': 'Deep Learning'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_abstract = target_publication_info['abstract']\nfinal_result = target_abstract\n", "result": "Objective: We sought to predict if patients with type 2 diabetes mellitus (DM2) would develop 10 selected complications. Accurate prediction of complications could help with more targeted measures that would prevent or slow down their development.Materials and Methods: Experiments were conducted on the Healthcare Cost and Utilization Project State Inpatient Databases of California for the period of 2003 to 2011. Recurrent neural network (RNN) long short-term memory (LSTM) and RNN gated recurrent unit (GRU) deep learning methods were designed and compared with random forest and multilayer perceptron traditional models. Prediction accuracy of selected complications were compared on 3 settings corresponding to minimum number of hospitalizations between diabetes diagnosis and the diagnosis of complications.Results: The diagnosis domain was used for experiments. The best results were achieved with RNN GRU model, followed by RNN LSTM model. The prediction accuracy achieved with RNN GRU model was between 73% (myocardial infarction) and 83% (chronic ischemic heart disease), while accuracy of traditional models was between 66% - 76%.Discussion: The number of hospitalizations was an important factor for the prediction accuracy. Experiments with 4 hospitalizations achieved significantly better accuracy than with 2 hospitalizations. To achieve improved accuracy deep learning models required training on at least 1000 patients and accuracy significantly dropped if training datasets contained 500 patients. The prediction accuracy of complications decreases over time period. Considering individual complications, the best accuracy was achieved on depressive disorder and chronic ischemic heart disease.Conclusions: The RNN GRU model was the best choice for electronic medical record type of data, based on the achieved results.", "exe_time": 2.4049859046936035}
{"Query_en": "What is the PDF link of the representative work of Bowen Cheng in Object Detection field?", "Answer": "https://static.aminer.cn/upload/pdf/1465/842/1302/60efb7915244ab9dcbd261bd_0.pdf", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Bowen Cheng', 'interest': 'Object Detection'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_pdf = target_publication_info['pdf_link']\nfinal_result = target_pdf\n", "result": "https://static.aminer.cn/upload/pdf/1465/842/1302/60efb7915244ab9dcbd261bd_0.pdf", "exe_time": 2.4481008052825928}
{"Query_en": "Which journal or conference included the representative work of Stefano Ermon in Machine Learning field?", "Answer": {"info": {"name": "ADVANCES IN NEURAL INFORMATION PROCESSING SYSTEMS 29 (NIPS 2016)"}, "issue": "", "volume": "29"}, "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Stefano Ermon', 'interest': 'Machine Learning'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_venue = target_publication_info['venue']\nfinal_result = target_venue\n", "result": {"info": {"name": "ADVANCES IN NEURAL INFORMATION PROCESSING SYSTEMS 29 (NIPS 2016)"}, "issue": "", "volume": "29"}, "exe_time": 2.4088847637176514}
