{"Query_en": "Research interests of Kai Zheng at School of Conmputer Science and Engineering, University of Electronic Science and Technology of China", "Answer": ["Spatial Crowdsourcing", "Trajectory", "Activity Trajectory", "Query Processing", "Indexes", "Semantics", "Task Assignment", "Collaborative Filtering", "Crowdsourcing", "Data Mining"], "route": "searchPerson", "code": "info = {'name': 'Kai Zheng', 'organization': 'School of Conmputer Science and Engineering, University of Electronic Science and Technology of China'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ninterests = target_person_info['interests']\nfinal_result = interests\n", "result": ["Spatial Crowdsourcing", "Trajectory", "Activity Trajectory", "Query Processing", "Indexes", "Semantics", "Task Assignment", "Collaborative Filtering", "Crowdsourcing", "Data Mining"], "exe_time": 1.3428752422332764}
{"Query_en": "Citation count of Qiaozhu Mei at Department of Electrical Engineering and Computer Science, School of Information, University of Michigan", "Answer": 21703, "route": "searchPerson", "code": "info = {'name': 'Qiaozhu Mei', 'organization': 'Department of Electrical Engineering and Computer Science, School of Information, University of Michigan'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\nnum_citation = target_person_info['num_citation']\nfinal_result = num_citation\n", "result": 21703, "exe_time": 1.4246726036071777}
{"Query_en": "Number of published papers by Shubhanshu Shekhar at Department of Statistics and Data Science, Dietrich College of Humanities and Social Sciences, Carnegie Mellon University", "Answer": 12, "route": "searchPerson", "code": "info = {'name': 'Shubhanshu Shekhar', 'organization': 'Department of Statistics and Data Science, Dietrich College of Humanities and Social Sciences, Carnegie Mellon University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\nnum_pubs = target_person_info['num_pubs']\nfinal_result = num_pubs\n", "result": 12, "exe_time": 1.5339348316192627}
{"Query_en": "Which institution does Chongsheng Zhang who researches in Chongsheng Zhang field belong to?", "Answer": "Department of Data Science, Henan University", "route": "searchPerson", "code": "info = {'name': 'Chongsheng Zhang', 'interest': 'Chongsheng Zhang'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\norganization = target_person_info['organization']\nfinal_result = organization\n", "result": "Department of Data Science, Henan University", "exe_time": 1.2155704498291016}
{"Query_en": "Citation count of Mariana S. C. Almeida who researches in Image Restoration field", "Answer": 946, "route": "searchPerson", "code": "info = {'name': 'Mariana S. C. Almeida', 'interest': 'Image Restoration'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\nnum_citation = target_person_info['num_citation']\nfinal_result = num_citation\n", "result": 946, "exe_time": 1.2861311435699463}
{"Query_en": "Number of papers published by Ahmed Abdulaal who researches in Anomaly Detection field", "Answer": 1, "route": "searchPerson", "code": "info = {'name': 'Ahmed\\xa0Abdulaal', 'interest': 'Anomaly Detection'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\nnum_pubs = target_person_info['num_pubs']\nfinal_result = num_pubs\n", "result": 1, "exe_time": 1.3184130191802979}
{"Query_en": "Who are the researchers at Microsoft?", "Answer": ["Eric Joel Horvitz", "Alexey Svyatkovskiy", "Thomas Finley", "Manish Gupta", "Linjun Yang", "Kaitao Song", "Yue Wu", "Li Zhao", "Sheng Zhao"], "route": "searchPerson", "code": "info = {'organization': 'Microsoft'}\norganization = info['organization']\n\nperson_list = searchPerson(organization = organization)\nname_list = [person_list[i]['name'] for i in range(len(person_list))]\nfinal_result = name_list\n", "result": ["Eric Joel Horvitz", "Alexey Svyatkovskiy", "Thomas Finley", "Manish Gupta", "Linjun Yang", "Kaitao Song", "Yue Wu", "Li Zhao", "Sheng Zhao"], "exe_time": 0.9365496635437012}
{"Query_en": "Who are the researchers in Optimization field?", "Answer": ["Michael I. Jordan", "Quoc Viet Le", "Philip S. Yu", "Yangqing Jia", "Alex Smola", "Qiang Yang", "Dacheng Tao", "George Karypis", "Carlos Guestrin", "Zhi-Hua Zhou"], "route": "searchPerson", "code": "info = {'interest': 'Optimization'}\ninterest = info['interest']\n\nperson_list = searchPerson(interest = interest)\nname_list = [person_list[i]['name'] for i in range(len(person_list))]\nfinal_result = name_list\n", "result": ["Michael I. Jordan", "Quoc Viet Le", "Philip S. Yu", "Yangqing Jia", "Alex Smola", "Qiang Yang", "Dacheng Tao", "George Karypis", "Carlos Guestrin", "Zhi-Hua Zhou"], "exe_time": 0.9457972049713135}
{"Query_en": "Who are the collaborators of Po-An Wang at Division of Decision and Control Systems, KTH Royal Institute of Technology?", "Answer": ["Aristides Gionis"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Po-An Wang', 'organization': 'Division of Decision and Control Systems, KTH Royal Institute of Technology'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\ncoauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\nfinal_result = coauthors_name_list\n", "result": ["Aristides Gionis"], "exe_time": 1.9827604293823242}
{"Query_en": "Who are the collaborators of Jinhua Zhu in Graph Neural Network field?", "Answer": ["Tao Qin", "Tie-Yan Liu", "Lijun Wu", "Bohan Wang", "Kaiyuan Gao", "Li Zhao", "Jianhuang Lai", "Rui Yan", "Jian Li"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Jinhua Zhu', 'interest': 'Graph Neural Network'}\ninterest = info['interest']\nname = info['name']\n\ninterest_person_list = searchPerson(interest = interest)\ninterest_person_id_list = [person['person_id'] for person in interest_person_list]\ntarget_list = []\nfor interest_person_id in interest_person_id_list:\n    coauthors = getCoauthors(person_id = interest_person_id)\n    coauthor_name_list = [coauthor['name'] for coauthor in coauthors]\n    if name in coauthor_name_list:\n        target_list.append(getPersonBasicInfo(person_id=interest_person_id)['name'])\nfinal_result = target_list\n", "result": [], "exe_time": 2.442155599594116}
{"Query_en": "Who at Northwestern University has a collaboration with Dipendra Jha?", "Answer": ["Ankit Agrawal"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Dipendra Jha', 'organization': 'Northwestern University'}\norganization = info['organization']\nname = info['name']\n\norganization_person_list = searchPerson(organization = organization)\norganization_person_id_list = [person['person_id'] for person in organization_person_list]\ntarget_list = []\nfor interest_person_id in organization_person_id_list:\n    coauthors = getCoauthors(person_id = interest_person_id)\n    coauthor_name_list = [coauthor['name'] for coauthor in coauthors]\n    if name in coauthor_name_list:\n        target_list.append(getPersonBasicInfo(person_id=interest_person_id)['name'])\nfinal_result = target_list\n", "result": ["Ankit Agrawal"], "exe_time": 2.4400925636291504}
{"Query_en": "Who in Data Mining field has a collaboration with Gowtham Atluri?", "Answer": ["Vipin Kumar"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Gowtham Atluri', 'interest': 'Data Mining'}\ninterest = info['interest']\nname = info['name']\n\ninterest_person_list = searchPerson(interest = interest)\ninterest_person_id_list = [person['person_id'] for person in interest_person_list]\ntarget_list = []\nfor interest_person_id in interest_person_id_list:\n    coauthors = getCoauthors(person_id = interest_person_id)\n    coauthor_name_list = [coauthor['name'] for coauthor in coauthors]\n    if name in coauthor_name_list:\n        target_list.append(getPersonBasicInfo(person_id=interest_person_id)['name'])\nfinal_result = target_list\n", "result": ["Vipin Kumar"], "exe_time": 2.434156656265259}
{"Query_en": "What are the papers published by Dunia Mladenić at Atrificial Intelligence Laboratory, Jozef Stefan Institute?", "Answer": ["A SURVEY OF ONTOLOGY EVALUATION TECHNIQUES", "Feature Selection for Unbalanced Class Distribution and Naive Bayes", "Text-Learning and Related Intelligent Agents: A Survey", "Feature selection using linear classifier weights: interaction with classification models", "Semi-automatic construction of topic ontologies", "Feature selection on hierarchy of web documents", "The Role of Hubness in Clustering High-Dimensional Data", "Data sparsity issues in the collaborative filtering framework", "Feature Subset Selection in Text-Learning", "Visualization Of Text Document Corpus"], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Dunia Mladenić', 'organization': 'Atrificial Intelligence Laboratory, Jozef Stefan Institute'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\npublications_title_list = [publication['title'] for publication in publications_list]\nfinal_result = publications_title_list\n", "result": ["A SURVEY OF ONTOLOGY EVALUATION TECHNIQUES", "Feature Selection for Unbalanced Class Distribution and Naive Bayes", "Text-Learning and Related Intelligent Agents: A Survey", "Feature selection using linear classifier weights: interaction with classification models", "Semi-automatic construction of topic ontologies", "Feature selection on hierarchy of web documents", "The Role of Hubness in Clustering High-Dimensional Data", "Data sparsity issues in the collaborative filtering framework", "Feature Subset Selection in Text-Learning", "Visualization Of Text Document Corpus"], "exe_time": 1.9235858917236328}
{"Query_en": "What is the citation count of the representative work of Yurong Cheng at School of Computer Science and Technology, Beijing Institute of Technology?", "Answer": 195, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Yurong Cheng', 'organization': 'School of Computer Science and Technology, Beijing Institute of Technology'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_num_citation = target_publication_dict['num_citation']\nfinal_result = target_num_citation\n", "result": 195, "exe_time": 2.225545644760132}
{"Query_en": "In which year was the representative work of Ritika Pandey at Indiana University–Purdue University Indianapolis published?", "Answer": 2019, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Ritika Pandey', 'organization': 'Indiana University–Purdue University Indianapolis'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\nmax_citation = publications_list[0]\nfinal_result = max_citation['year']\n", "result": 2019, "exe_time": 1.899761438369751}
{"Query_en": "Who are the authors of the representative work of Wei Feng at Data Science Team, Hulu?", "Answer": ["Wei Feng", "Chao Zhang", "Wei Zhang", "Jiawei Han", "Jianyong Wang", "Charu Aggarwal", "Jianbin Huang"], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Wei Feng', 'organization': 'Data Science Team, Hulu'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\nmax_citation = publications_list[0]\nfinal_result = max_citation['year']\n", "result": 2015, "exe_time": 1.8287343978881836}
{"Query_en": "What are the papers published by Ching-Yao Chuang in Domain Critic field?", "Answer": ["Contrastive Learning with Hard Negative Samples", "Debiased Contrastive Learning", "Leveraging Video Descriptions to Learn Video Question Answering.", "Show, Adapt and Tell: Adversarial Training of Cross-Domain Image Captioner", "Fair Mixup: Fairness via Interpolation", "Learning to Act Properly: Predicting and Explaining Affordances from Images.", "Robust Contrastive Learning against Noisy Views", "Estimating Generalization under Distribution Shifts via Domain-Invariant  Representations", "Measuring Generalization with Optimal Transport.", "Tree Mover's Distance: Bridging Graph Metrics and Stability of Graph\n  Neural Networks"], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Ching-Yao Chuang', 'interest': 'Domain Critic'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name=name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\npublications_title_list = [publication['title'] for publication in publications_list]\nfinal_result = publications_title_list\n", "result": ["Contrastive Learning with Hard Negative Samples", "Debiased Contrastive Learning", "Leveraging Video Descriptions to Learn Video Question Answering.", "Show, Adapt and Tell: Adversarial Training of Cross-Domain Image Captioner", "Fair Mixup: Fairness via Interpolation", "Learning to Act Properly: Predicting and Explaining Affordances from Images.", "Robust Contrastive Learning against Noisy Views", "Estimating Generalization under Distribution Shifts via Domain-Invariant  Representations", "Measuring Generalization with Optimal Transport.", "Tree Mover's Distance: Bridging Graph Metrics and Stability of Graph\n  Neural Networks"], "exe_time": 1.8144736289978027}
{"Query_en": "What is the citation count of the representative work of Tianwen Chen in User Interaction field?", "Answer": 196, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Tianwen Chen', 'interest': 'User Interaction'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_num_citation = target_publication_dict['num_citation']\nfinal_result = target_num_citation\n", "result": 196, "exe_time": 2.087684392929077}
{"Query_en": "In which year was the representative work of Joseph Early in Mental Health field published?", "Answer": 2022, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Joseph Early', 'interest': 'Mental Health'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name=name, interest=interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\nperson_pubs = getPersonPubs(person_id=target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = person_pubs[0]\npublication_year = target_publication_dict['year']\nfinal_result = publication_year\n", "result": 2022, "exe_time": 1.9591236114501953}
{"Query_en": "Who are the authors of the representative work of Kejing Yin in Tensor Factorization field?", "Answer": ["Lihong Song", "Chin Wang Cheong", "Kejing Yin", "William K. Cheung", "Benjamin C. M. Fung", "Jonathan Poon"], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Kejing Yin', 'interest': 'Tensor Factorization'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\nauthor_name_list = target_publication_dict['authors_name_list']\nfinal_result = author_name_list\n", "result": ["Lihong Song", "Chin Wang Cheong", "Kejing Yin", "William K. Cheung", "Benjamin C. M. Fung", "Jonathan Poon"], "exe_time": 2.1196482181549072}
{"Query_en": "Is Weize Kong at Google Research male or female?", "Answer": "male", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Weize Kong', 'organization': 'Google Research'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_gender = target_person_basic_info['gender']\nfinal_result = target_person_gender\n", "result": "male", "exe_time": 1.734807014465332}
{"Query_en": "What is the title of Larsson Omberg at Sage Bionetworks?", "Answer": "Other", "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Larsson Omberg', 'organization': 'Sage Bionetworks'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_title = target_publication_dict['title']\nfinal_result = target_publication_title\n", "result": "An Integrated TCGA Pan-Cancer Clinical Data Resource to Drive High-Quality Survival Outcome Analytics.", "exe_time": 2.0867855548858643}
{"Query_en": "What is the introduction of Jiawei Wen at The Pennsylvania State University, University Park?", "Answer": "", "route": "searchPerson -> getPersonBasicInfo -> getPersonBasicInfo", "code": "info = {'name': 'Jiawei Wen', 'organization': 'The Pennsylvania State University, University Park'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_bio = target_person_basic_info['bio']\nfinal_result = target_person_bio\n", "result": "", "exe_time": 1.879112720489502}
{"Query_en": "What is the educational background of Zhiqiang Zhang at Ant Financial Services Group?", "Answer": "", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Zhiqiang Zhang', 'organization': 'Ant Financial Services Group'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_education_experience = target_person_basic_info['education_experience']\nfinal_result = target_person_education_experience\n", "result": "", "exe_time": 2.015542507171631}
{"Query_en": "What is the email of Arun S. Maiya at Institute for Defense Analyses?", "Answer": "arun@maiya.net", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Arun S. Maiya', 'organization': 'Institute for Defense Analyses'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_email = target_person_basic_info['email']\nfinal_result = target_person_email\n", "result": "arun@maiya.net", "exe_time": 1.8360199928283691}
{"Query_en": "Is Tat-Seng Chua in Question Answering field male or female?", "Answer": "male", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Tat-Seng Chua', 'interest': 'Question Answering'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_gender = target_person_basic_info['gender']\nfinal_result = target_person_gender\n", "result": "male", "exe_time": 1.7970576286315918}
{"Query_en": "What is the title of Zhiting Hu in Probabilistic Generative Model field?", "Answer": "Visiting Scientist", "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Zhiting Hu', 'interest': 'Probabilistic Generative Model'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_abstract = target_publication_dict['abstract']\nfinal_result = target_abstract\n", "result": "exe error", "exe_time": 2.026970624923706}
{"Query_en": "What is the introduction of Chenliang Li in Deep Learning field?", "Answer": "RESEARCH INTERESTS<br>Information Retrieval<br>Natural Language Processing<br>Statistics Learning<br>Data Mining<br>Social Media Analysis and Mining", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Chenliang Li', 'interest': 'Deep Learning'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_bio = target_person_basic_info['bio']\nfinal_result = target_person_bio\n", "result": "RESEARCH INTERESTS<br>Information Retrieval<br>Natural Language Processing<br>Statistics Learning<br>Data Mining<br>Social Media Analysis and Mining", "exe_time": 1.768155574798584}
{"Query_en": "What is the educational background of Shubham Gupta in Optimization field?", "Answer": "Indian Institute of Science (IISc) Doctor of Philosophy - PhD 2016 - 2021", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Shubham Gupta', 'interest': 'Optimization'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_education_experience = target_person_basic_info['education_experience']\nfinal_result = target_person_education_experience\n", "result": "Indian Institute of Science (IISc) Doctor of Philosophy - PhD 2016 - 2021", "exe_time": 1.9715840816497803}
{"Query_en": "What is the email of Bogdan Gabrys in Machine Learning field?", "Answer": "bogdan.gabrys@uts.edu.au", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Bogdan Gabrys', 'interest': 'Machine Learning'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_email = target_person_basic_info['email']\nfinal_result = target_person_email\n", "result": "bogdan.gabrys@uts.edu.au", "exe_time": 1.7578134536743164}
{"Query_en": "Who among the collaborators of Lukas Dauterman at Microsoft are researching in Automated Transfer Assistance field?", "Answer": ["Vivek Jain"], "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Lukas Dauterman', 'organization': 'Microsoft'}\nname = info['name']\norganization = info['organization']\ntarget_interest = info['interest']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthor_list = getCoauthors(person_id = target_person_id)\n\ntarget_coauthor_names = []\nfor coauthor in coauthor_list:\n    coauthor_id = coauthor['person_id']\n    coauthor_interests_list = getPersonInterest(person_id = coauthor_id)\n    if target_interest in coauthor_interests_list:\n        target_coauthor_names.append(coauthor['name'])\n\nfinal_result = target_coauthor_names\n", "result": "exe error", "exe_time": 2.724149465560913}
{"Query_en": "Who has the highest citation count among the collaborators of Yingyong Qi at Qualcomm Inc.?", "Answer": "Yiran Chen", "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Yingyong Qi', 'organization': 'Qualcomm Inc.'}\nname = info['name']\norganization = info['organization']\n\n# Search the person\nperson_list = searchPerson(name=name, organization=organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# Get the coauthors\ncoauthors_list = getCoauthors(person_id=target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_citation = 0\nmax_citation_author_name = ''\n\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_citation = coauthor_info['num_citation']\n    if coauthor_citation > max_citation:\n        max_citation = coauthor_citation\n        max_citation_author_name = coauthor_info['name']\n\nfinal_result = max_citation_author_name\n", "result": "Yiran Chen", "exe_time": 3.5743343830108643}
{"Query_en": "Who has the most published papers among the collaborators of Ling Pan at Mila - Quebec Artificial Intelligence Institute?", "Answer": "Tie-Yan Liu", "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Ling Pan', 'organization': 'Mila - Quebec Artificial Intelligence Institute'}\nname = info['name']\norganization = info['organization']\n\n# Search the person\nperson_list = searchPerson(name=name, organization=organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# Get the coauthors\ncoauthors_list = getCoauthors(person_id=target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_pubs = 0\nmax_pubs_author_name = ''\n\n# Iterate each coauthor and calculate his/her publication number\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_pubs = coauthor_info['num_pubs']\n    if coauthor_pubs > max_pubs:\n        max_pubs = coauthor_pubs\n        max_pubs_author_name = coauthor_info['name']\n\nfinal_result = max_pubs_author_name\n", "result": "Tie-Yan Liu", "exe_time": 3.7734906673431396}
{"Query_en": "Who among the collaborators of Roman Holenstein in Gesture Recognition field are at Apple Incinstitution?", "Answer": ["Kevin Lynch", "Tim Paek", "Sethu Raman", "Krishna Sridhar", "Shawn Scully", "Shiwen Zhao"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Roman Holenstein', 'interest': 'Gesture Recognition'}\ninterest = info['interest']\nname = info['name']\n\ninterest_person_list = searchPerson(interest = interest)\ninterest_person_id_list = [person['person_id'] for person in interest_person_list]\ntarget_list = []\nfor interest_person_id in interest_person_id_list:\n    coauthors = getCoauthors(person_id = interest_person_id)\n    coauthor_name_list = [coauthor['name'] for coauthor in coauthors]\n    if name in coauthor_name_list:\n        target_list.append(getPersonBasicInfo(person_id=interest_person_id)['name'])\nfinal_result = target_list\n", "result": "exe error", "exe_time": 2.43440842628479}
{"Query_en": "Who has the highest citation count among the collaborators of Jiao Su in Lost Shale Gas Content field?", "Answer": "Xu Yu", "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Jiao Su', 'interest': 'Lost Shale Gas Content'}\nname = info['name']\ninterest = info['interest']\n\n# get specific person's information\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# Get the coauthors\ncoauthors_list = getCoauthors(person_id=target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_citation = 0\nmax_citation_author_name = ''\n\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_citation = coauthor_info['num_citation']\n    if coauthor_citation > max_citation:\n        max_citation = coauthor_citation\n        max_citation_author_name = coauthor_info['name']\n\nfinal_result = max_citation_author_name\n", "result": "Xu Yu", "exe_time": 3.59954833984375}
{"Query_en": "Who has the most published papers among the collaborators of Hyokun Yun in Scalability field?", "Answer": "Alex Smola", "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Hyokun Yun', 'interest': 'Scalability'}\nname = info['name']\ninterest = info['interest']\n\n# get specific person's information\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# Get the coauthors\ncoauthors_list = getCoauthors(person_id=target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_pubs = 0\nmax_pubs_author_name = ''\n\n# Iterate each coauthor and calculate his/her publication number\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_pubs = coauthor_info['num_pubs']\n    if coauthor_pubs > max_pubs:\n        max_pubs = coauthor_pubs\n        max_pubs_author_name = coauthor_info['name']\n\nfinal_result = max_pubs_author_name\n", "result": "Alex Smola", "exe_time": 3.735914468765259}
{"Query_en": "Who are the collaborators of the collaborators of Shipeng Yu at LinkedIn Corporation?", "Answer": ["Shuiwang Ji", "Jiayu Zhou", "Paul M. Thompson", "Qingyang Li", "Hongtu Zhu", "Zhiwei Qin (Tony)", "Jie Wang", "Zheng Wang", "Liang Sun", "Ian N. Davidson", "Lingyu Zhang", "Xiaocheng Tang", "Xiaofei He", "Shipeng Yu", "Faisal Farooq", "Vikas Raykar", "Jinbo Bi", "Xuejun Liao", "Romer Rosales", "Harald Steck", "Jennifer G. Dy", "Qiang Yang", "Andrew Tomkins", "Rayid Ghani", "Jimeng Sun", "Fei Wang", "Nitesh Chawla", "Bala Krishnapuram", "Shipeng Yu", "Prithwish Chakraborty", "Romer Rosales", "Shipeng Yu", "Rupesh Gupta", "Shipeng Yu", "Guangde Chen", "Liang Zhang", "Yiming Ma", "Qi He", "Bee-Chung Chen", "Deepak Agarwal", "Qingsong Wen", "Jieping Ye", "Rong Jin", "Shuiwang Ji", "Xiaomin Song", "Xue Wang", "Shenghuo Zhu", "Ming Lin", "Yan Li", "Qi Qian", "Weiqi Chen", "Huan Xu", "Junchi Yan", "Linxiao Yang", "Yiyuan Yang", "Wenwu Ou", "Changhua Pei", "Bolin Ding", "Jinyang Gao", "Yanyan Lan", "Bin Cui", "Shuchang Liu", "Yu Gong", "Xiaoyong Yang", "Huawei Shen", "Qingwen Liu", "Xiangnan He", "Yu Zhu", "Yaliang Li", "Dan Pei", "Jiliang Tang", "Kai Shu", "Suhang Wang", "Jundong Li", "Xia \"Ben\" Hu", "Reza Zafarani", "Kaize Ding", "Ruocheng Guo", "Liang Wu", "Charu C. Aggarwal", "Philip S. Yu", "Dongwon Lee", "Wayne Xin Zhao", "Kun Zhou", "Deng Cai", "Zhewei Wei", "Yaliang Li", "Xiao Zhang", "Xing Xie", "Shuo Shang", "Yuqi Huo", "Yupeng Hou", "Yulei Niu", "Xiaofei He", "Mingyu Ding", "Edward Chang", "Srinivasan Parthasarathy", "Mohammad Al Hasan", "Vineet Chaoji", "Bart Goethals", "Lingfei Wu (Teddy)", "Naren Ramakrishnan", "Xu Yu", "Charu C. Aggarwal", "Vipin Kumar", "Xindong Wu", "George Karypis", "Diya Li", "Wei Wang", "George Karypis", "Xiaowei Jia", "Pang-Ning Tan", "Shashi Shekhar", "Anuj Karpatne", "Gyorgy Simon", "Jaideep Srivastava", "Rahul Ghosh", "Hui Xiong", "Gowtham Atluri", "Sanjoy Dey", "Varun Chandola", "Auroop R. Ganguly"], "route": "searchPerson -> getCoauthors -> getCoauthors", "code": "info = {'name': 'Shipeng Yu', 'organization': 'LinkedIn Corporation'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors1_list = getCoauthors(person_id = target_person_id)\n\ncoauthors2_list = []\nfor coauthor in coauthors1_list:\n    coauthors2_list.extend(getCoauthors(person_id = coauthor['person_id']))\n\ncoauthors2_names = [coauthor['name'] for coauthor in coauthors2_list]\n\nfinal_result = coauthors2_names\n", "result": ["Shuiwang Ji", "Jiayu Zhou", "Paul M. Thompson", "Qingyang Li", "Hongtu Zhu", "Zhiwei Qin (Tony)", "Jie Wang", "Zheng Wang", "Liang Sun", "Ian N. Davidson", "Lingyu Zhang", "Xiaocheng Tang", "Xiaofei He", "Shipeng Yu", "Faisal Farooq", "Vikas Raykar", "Jinbo Bi", "Xuejun Liao", "Romer Rosales", "Harald Steck", "Jennifer G. Dy", "Qiang Yang", "Andrew Tomkins", "Rayid Ghani", "Jimeng Sun", "Fei Wang", "Nitesh Chawla", "Bala Krishnapuram", "Shipeng Yu", "Prithwish Chakraborty", "Romer Rosales", "Shipeng Yu", "Rupesh Gupta", "Shipeng Yu", "Guangde Chen", "Liang Zhang", "Yiming Ma", "Qi He", "Bee-Chung Chen", "Deepak Agarwal", "Qingsong Wen", "Jieping Ye", "Rong Jin", "Shuiwang Ji", "Xiaomin Song", "Xue Wang", "Shenghuo Zhu", "Ming Lin", "Yan Li", "Qi Qian", "Weiqi Chen", "Huan Xu", "Junchi Yan", "Linxiao Yang", "Yiyuan Yang", "Wenwu Ou", "Changhua Pei", "Bolin Ding", "Jinyang Gao", "Yanyan Lan", "Bin Cui", "Shuchang Liu", "Yu Gong", "Xiaoyong Yang", "Huawei Shen", "Qingwen Liu", "Xiangnan He", "Yu Zhu", "Yaliang Li", "Dan Pei", "Jiliang Tang", "Kai Shu", "Suhang Wang", "Jundong Li", "Xia \"Ben\" Hu", "Reza Zafarani", "Kaize Ding", "Ruocheng Guo", "Liang Wu", "Charu C. Aggarwal", "Philip S. Yu", "Dongwon Lee", "Wayne Xin Zhao", "Kun Zhou", "Deng Cai", "Zhewei Wei", "Yaliang Li", "Xiao Zhang", "Xing Xie", "Shuo Shang", "Yuqi Huo", "Yupeng Hou", "Yulei Niu", "Xiaofei He", "Mingyu Ding", "Edward Chang", "Srinivasan Parthasarathy", "Mohammad Al Hasan", "Vineet Chaoji", "Bart Goethals", "Lingfei Wu (Teddy)", "Naren Ramakrishnan", "Xu Yu", "Charu C. Aggarwal", "Vipin Kumar", "Xindong Wu", "George Karypis", "Diya Li", "Wei Wang", "George Karypis", "Xiaowei Jia", "Pang-Ning Tan", "Shashi Shekhar", "Anuj Karpatne", "Gyorgy Simon", "Jaideep Srivastava", "Rahul Ghosh", "Hui Xiong", "Gowtham Atluri", "Sanjoy Dey", "Varun Chandola", "Auroop R. Ganguly"], "exe_time": 2.497365951538086}
{"Query_en": "Who are the collaborators of the collaborators of Yongming Rao in Representation Learning field?", "Answer": ["Yongming Rao", "Quanquan Gu", "Wanhua Li", "Qi Tian", "Yongming Rao", "Jie Zhou", "Yizhao Gao", "Shengding Hu", "Jifan Yu", "Ming Ding", "Juanzi Li", "Minghao (Alan) Xu", "Liang Zhang", "Huan Zhang", "Inderjit S. Dhillon", "Kai-Wei Chang", "Si Si", "Hsiangfu Yu", "Xuanqing Liu", "Pinyu Chen", "Jinfeng Yi", "Chih-Jen Lin", "Zhouxing Shi", "James Sharpnack", "Wei-Cheng Chang", "Ruochen Wang", "Yang Li", "Jiong Zhang", "Xuanjing Huang", "QIN DING", "Licheng Lan", "Arindam Banerjee", "Sijia Liu", "Matyas A Sustik", "Hsiang-Fu Yu", "Ligeng Zhu", "Jie Zhou", "Muyang Li", "Yongming Rao", "Chenlin Meng", "Ting Chen", "Stefano Ermon", "Denny Zhou", "Devansh Arpit", "Yujia Zheng", "Shaoan Xie", "Yongming Rao", "Steven Chu-Hong Hoi", "Chenghao Liu", "Jirong Wen", "Haoyu Lu", "Yuqi Huo", "Xin Gao", "Liang Zhang", "Shengding Hu", "Ziyi Wang", "Yuchong Sun", "Jifan Yu", "Shizhe Chen", "Ming Ding", "Zhiyuan Liu", "Juanzi Li", "Cheng Yang", "Jie Tang", "Yizhao Gao", "Ziyi Wang", "Yongming Rao"], "route": "searchPerson -> getCoauthors -> getCoauthors", "code": "info = {'name': 'Yongming Rao', 'interest': 'Representation Learning'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors1_list = getCoauthors(person_id = target_person_id)\n\ncoauthors2_list = []\nfor coauthor in coauthors1_list:\n    coauthors2_list.extend(getCoauthors(person_id = coauthor['person_id']))\n\ncoauthors2_names = [coauthor['name'] for coauthor in coauthors2_list]\n\nfinal_result = coauthors2_names\n", "result": ["Yongming Rao", "Quanquan Gu", "Wanhua Li", "Qi Tian", "Yongming Rao", "Jie Zhou", "Yizhao Gao", "Shengding Hu", "Jifan Yu", "Ming Ding", "Juanzi Li", "Minghao (Alan) Xu", "Liang Zhang", "Huan Zhang", "Inderjit S. Dhillon", "Kai-Wei Chang", "Si Si", "Hsiangfu Yu", "Xuanqing Liu", "Pinyu Chen", "Jinfeng Yi", "Chih-Jen Lin", "Zhouxing Shi", "James Sharpnack", "Wei-Cheng Chang", "Ruochen Wang", "Yang Li", "Jiong Zhang", "Xuanjing Huang", "QIN DING", "Licheng Lan", "Arindam Banerjee", "Sijia Liu", "Matyas A Sustik", "Hsiang-Fu Yu", "Ligeng Zhu", "Jie Zhou", "Muyang Li", "Yongming Rao", "Chenlin Meng", "Ting Chen", "Stefano Ermon", "Denny Zhou", "Devansh Arpit", "Yujia Zheng", "Shaoan Xie", "Yongming Rao", "Steven Chu-Hong Hoi", "Chenghao Liu", "Jirong Wen", "Haoyu Lu", "Yuqi Huo", "Xin Gao", "Liang Zhang", "Shengding Hu", "Ziyi Wang", "Yuchong Sun", "Jifan Yu", "Shizhe Chen", "Ming Ding", "Zhiyuan Liu", "Juanzi Li", "Cheng Yang", "Jie Tang", "Yizhao Gao", "Ziyi Wang", "Yongming Rao"], "exe_time": 2.495378255844116}
{"Query_en": "What is the abstract of the representative work of Panagiotis Mandros at Max-Planck-Institut fur Informatik?", "Answer": "Given a database and a target attribute of interest, how can we tell whether there exists a functional, or approximately functional dependence of the target on any set of other attributes in the data? How can we reliably, without bias to sample size or dimensionality, measure the strength of such a dependence? And, how can we efficiently discover the optimal or α-approximate top-k dependencies? These are exactly the questions we answer in this paper. As we want to be agnostic on the form of the dependence, we adopt an information-theoretic approach, and construct a reliable, bias correcting score that can be efficiently computed. Moreover, we give an effective optimistic estimator of this score, by which for the first time we can mine the approximate functional dependencies from data with guarantees of optimality. Empirical evaluation shows that the derived score achieves a good bias for variance trade-off, can be used within an efficient discovery algorithm, and indeed discovers meaningful dependencies. Most important, it remains reliable in the face of data sparsity.", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Panagiotis Mandros', 'organization': 'Max-Planck-Institut fur Informatik'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_abstract = target_publication_info['abstract']\nfinal_result = target_abstract\n", "result": "Given a database and a target attribute of interest, how can we tell whether there exists a functional, or approximately functional dependence of the target on any set of other attributes in the data? How can we reliably, without bias to sample size or dimensionality, measure the strength of such a dependence? And, how can we efficiently discover the optimal or α-approximate top-k dependencies? These are exactly the questions we answer in this paper. As we want to be agnostic on the form of the dependence, we adopt an information-theoretic approach, and construct a reliable, bias correcting score that can be efficiently computed. Moreover, we give an effective optimistic estimator of this score, by which for the first time we can mine the approximate functional dependencies from data with guarantees of optimality. Empirical evaluation shows that the derived score achieves a good bias for variance trade-off, can be used within an efficient discovery algorithm, and indeed discovers meaningful dependencies. Most important, it remains reliable in the face of data sparsity.", "exe_time": 2.500399351119995}
{"Query_en": "What is the PDF link of the representative work of Pietro Michiardi at Computer Science and head of the Data Science Department, EURECOM?", "Answer": "https://cz5waila03cyo0tux1owpyofgoryroob.oss-cn-beijing.aliyuncs.com/D6/47/EB/D647EBA7413E362285316C45E31F39E5.pdf", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Pietro Michiardi', 'organization': 'Computer Science and head of the Data Science Department, EURECOM'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_pdf = target_publication_info['pdf_link']\nfinal_result = target_pdf\n", "result": "https://cz5waila03cyo0tux1owpyofgoryroob.oss-cn-beijing.aliyuncs.com/D6/47/EB/D647EBA7413E362285316C45E31F39E5.pdf", "exe_time": 2.567974328994751}
{"Query_en": "Which journal or conference included the representative work of Yihan Zeng at MoE Key Lab of Artificial Intelligence, AI Institute, Shanghai Jiao Tong University?", "Answer": {"info": {"name": "2021 IEEE/RSJ INTERNATIONAL CONFERENCE ON INTELLIGENT ROBOTS AND SYSTEMS (IROS)"}}, "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Yihan Zeng', 'organization': 'MoE Key Lab of Artificial Intelligence, AI Institute, Shanghai Jiao Tong University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_venue = target_publication_info['venue']\nfinal_result = target_venue\n", "result": {"info": {"name": "2021 IEEE/RSJ INTERNATIONAL CONFERENCE ON INTELLIGENT ROBOTS AND SYSTEMS (IROS)"}}, "exe_time": 2.6339409351348877}
{"Query_en": "What is the abstract of the representative work of Yan Li in Survival Analysis field?", "Answer": "Survival analysis is a subfield of statistics where the goal is to analyze and model data where the outcome is the time until an event of interest occurs. One of the main challenges in this context is the presence of instances whose event outcomes become unobservable after a certain time point or when some instances do not experience any event during the monitoring period. This so-called censoring can be handled most effectively using survival analysis techniques. Traditionally, statistical approaches have been widely developed in the literature to overcome the issue of censoring. In addition, many machine learning algorithms have been adapted to deal with such censored data and tackle other challenging problems that arise in real-world data. In this survey, we provide a comprehensive and structured review of the statistical methods typically used and the machine learning techniques developed for survival analysis, along with a detailed taxonomy of the existing methods. We also discuss several topics that are closely related to survival analysis and describe several successful applications in a variety of real-world application domains. We hope that this article will give readers a more comprehensive understanding of recent advances in survival analysis and offer some guidelines for applying these approaches to solve new problems arising in applications involving censored data.\n\n", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Yan Li', 'interest': 'Survival Analysis'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_abstract = target_publication_info['abstract']\nfinal_result = target_abstract\n", "result": "Survival analysis is a subfield of statistics where the goal is to analyze and model data where the outcome is the time until an event of interest occurs. One of the main challenges in this context is the presence of instances whose event outcomes become unobservable after a certain time point or when some instances do not experience any event during the monitoring period. This so-called censoring can be handled most effectively using survival analysis techniques. Traditionally, statistical approaches have been widely developed in the literature to overcome the issue of censoring. In addition, many machine learning algorithms have been adapted to deal with such censored data and tackle other challenging problems that arise in real-world data. In this survey, we provide a comprehensive and structured review of the statistical methods typically used and the machine learning techniques developed for survival analysis, along with a detailed taxonomy of the existing methods. We also discuss several topics that are closely related to survival analysis and describe several successful applications in a variety of real-world application domains. We hope that this article will give readers a more comprehensive understanding of recent advances in survival analysis and offer some guidelines for applying these approaches to solve new problems arising in applications involving censored data.\n\n", "exe_time": 2.400895833969116}
{"Query_en": "What is the PDF link of the representative work of Jean Barbier in Mutual Information field?", "Answer": "//static.aminer.cn/misc/pdf/NIPS/2018/5b3d98cc17c44a510f801b5c.pdf", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Jean Barbier', 'interest': 'Mutual Information'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_pdf = target_publication_info['pdf_link']\nfinal_result = target_pdf\n", "result": "//static.aminer.cn/misc/pdf/NIPS/2018/5b3d98cc17c44a510f801b5c.pdf", "exe_time": 2.56978702545166}
{"Query_en": "Which journal or conference included the representative work of Junwen Bai in Relaxation Methods field?", "Answer": {"info": {"name": "arXiv: Learning"}, "issue": "", "volume": ""}, "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Junwen Bai', 'interest': 'Relaxation Methods'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_venue = target_publication_info['venue']\nfinal_result = target_venue\n", "result": {"info": {"name": "arXiv: Learning"}, "issue": "", "volume": ""}, "exe_time": 2.4386463165283203}
