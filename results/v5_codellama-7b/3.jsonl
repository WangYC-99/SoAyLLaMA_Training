{"Query_en": "Research interests of Svetha Venkatesh at Applied Artificial Intelligence Institute, Deakin University", "Answer": ["Computer Vision", "Feature Extraction", "Face Recognition", "Data Mining", "Hidden Markov Models", "Image Processing", "Machine Learning", "Social Media", "Activity Recognition", "Hidden Markov Model"], "route": "searchPerson", "code": "info = {'name': 'Svetha Venkatesh', 'organization': 'Applied Artificial Intelligence Institute, Deakin University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ninterests = target_person_info['interests']\nfinal_result = interests\n", "result": ["Computer Vision", "Feature Extraction", "Face Recognition", "Data Mining", "Hidden Markov Models", "Image Processing", "Machine Learning", "Social Media", "Activity Recognition", "Hidden Markov Model"], "exe_time": 1.315326452255249}
{"Query_en": "Citation count of Arindam Bhattacharya at Computer Science and Engineering Department, Indian Institute of Technology", "Answer": 6, "route": "searchPerson", "code": "info = {'name': 'Arindam Bhattacharya', 'organization': 'Computer Science and Engineering Department, Indian Institute of Technology'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\nnum_citation = target_person_info['num_citation']\nfinal_result = num_citation\n", "result": 6, "exe_time": 1.3534941673278809}
{"Query_en": "Number of published papers by Shentao Yang at Stats Group, The University of Texas at Austin", "Answer": 3, "route": "searchPerson", "code": "info = {'name': 'Shentao Yang', 'organization': 'Stats Group, The University of Texas at Austin'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\nnum_pubs = target_person_info['num_pubs']\nfinal_result = num_pubs\n", "result": 3, "exe_time": 1.2981431484222412}
{"Query_en": "Which institution does Shirui Pan who researches in Shirui Pan field belong to?", "Answer": "School of Information and Communication Technology, Griffith University", "route": "searchPerson", "code": "info = {'name': 'Shirui Pan', 'interest': 'Shirui Pan'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\norganization = target_person_info['organization']\nfinal_result = organization\n", "result": "School of Information and Communication Technology, Griffith University", "exe_time": 1.162428379058838}
{"Query_en": "Citation count of Yanjun Han who researches in Entropy field", "Answer": 1409, "route": "searchPerson", "code": "info = {'name': 'Yanjun Han', 'interest': 'Entropy'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\nnum_citation = target_person_info['num_citation']\nfinal_result = num_citation\n", "result": 1409, "exe_time": 1.2297866344451904}
{"Query_en": "Number of papers published by Chris Lauren who researches in Machine Learning field", "Answer": 1, "route": "searchPerson", "code": "info = {'name': 'Chris Lauren', 'interest': 'Machine Learning'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\nnum_pubs = target_person_info['num_pubs']\nfinal_result = num_pubs\n", "result": 1, "exe_time": 1.21921968460083}
{"Query_en": "Who are the researchers at Sage Bionetworks?", "Answer": ["Larsson Omberg", "Brian M. Bot", "Elias Chaibub Neto", "Thanneer Malai Perumal", "Abhishek(Abhi) Pratap", "Lara Mangravite", "Meghasyam Tummalacherla"], "route": "searchPerson -> getCoauthors", "code": "info = {'organization': 'Sage Bionetworks'}\norganization = info['organization']\n\nperson_list = searchPerson(organization = organization)\nname_list = [person_list[i]['name'] for i in range(len(person_list))]\nfinal_result = name_list\n", "result": ["Larsson Omberg", "Brian M. Bot", "Elias Chaibub Neto", "Thanneer Malai Perumal", "Abhishek(Abhi) Pratap", "Lara Mangravite", "Meghasyam Tummalacherla"], "exe_time": 1.038677453994751}
{"Query_en": "Who are the researchers in Optimization field?", "Answer": ["Michael I. Jordan", "Quoc Viet Le", "Philip S. Yu", "Yangqing Jia", "Alex Smola", "Qiang Yang", "Dacheng Tao", "George Karypis", "Carlos Guestrin", "Zhi-Hua Zhou"], "route": "searchPerson", "code": "info = {'interest': 'Optimization'}\ninterest = info['interest']\n\nperson_list = searchPerson(interest = interest)\nname_list = [person_list[i]['name'] for i in range(len(person_list))]\nfinal_result = name_list\n", "result": ["Michael I. Jordan", "Quoc Viet Le", "Philip S. Yu", "Yangqing Jia", "Alex Smola", "Qiang Yang", "Dacheng Tao", "George Karypis", "Carlos Guestrin", "Zhi-Hua Zhou"], "exe_time": 0.9514682292938232}
{"Query_en": "Who are the collaborators of Bowen Jin at University of Illinois Urbana-Champaign?", "Answer": ["Jiawei Han", "Yu Zhang", "Yu Meng", "Xiangnan He", "Tianxin Wei", "Zhengyang Wang", "Depeng Jin", "Xianfeng Tang", "Yunyi Zhang", "Yong Li", "Chen Gao", "Suhang Wang", "Qi(Bran) Zhu"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Bowen Jin', 'organization': 'University of Illinois Urbana-Champaign'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\ncoauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\nfinal_result = coauthors_name_list\n", "result": ["Jiawei Han", "Yu Zhang", "Yu Meng", "Xiangnan He", "Tianxin Wei", "Zhengyang Wang", "Depeng Jin", "Xianfeng Tang", "Yunyi Zhang", "Yong Li", "Chen Gao", "Suhang Wang", "Qi(Bran) Zhu"], "exe_time": 1.9346919059753418}
{"Query_en": "Who are the collaborators of Isak Karlsson in Adverse Drug Events field?", "Answer": ["Panagiotis Papapetrou", "Henrik Boström", "Andreas Henelius", "Tony Lindgren", "Aristides Gionis", "Kai Puolamäki", "Jaakko Hollmén's"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Isak Karlsson', 'interest': 'Adverse Drug Events'}\ninterest = info['interest']\nname = info['name']\n\ninterest_person_list = searchPerson(interest = interest)\ninterest_person_id_list = [person['person_id'] for person in interest_person_list]\ntarget_list = []\nfor interest_person_id in interest_person_id_list:\n    coauthors = getCoauthors(person_id = interest_person_id)\n    coauthor_name_list = [coauthor['name'] for coauthor in coauthors]\n    if name in coauthor_name_list:\n        target_list.append(getPersonBasicInfo(person_id=interest_person_id)['name'])\nfinal_result = target_list\n", "result": ["Panagiotis Papapetrou", "Henrik Boström", "Andreas Henelius"], "exe_time": 2.4329586029052734}
{"Query_en": "Who at Games24x7 has a collaboration with Deepanshi Seth?", "Answer": ["Samrat Dattagupta", "Mridul Sachdeva"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Deepanshi Seth', 'organization': 'Games24x7'}\norganization = info['organization']\nname = info['name']\n\norganization_person_list = searchPerson(organization = organization)\norganization_person_id_list = [person['person_id'] for person in organization_person_list]\ntarget_list = []\nfor interest_person_id in organization_person_id_list:\n    coauthors = getCoauthors(person_id = interest_person_id)\n    coauthor_name_list = [coauthor['name'] for coauthor in coauthors]\n    if name in coauthor_name_list:\n        target_list.append(getPersonBasicInfo(person_id=interest_person_id)['name'])\nfinal_result = target_list\n", "result": ["Samrat Dattagupta", "Mridul Sachdeva"], "exe_time": 2.4689531326293945}
{"Query_en": "Who in Substance Use Disorder field has a collaboration with Winkler Stephanie?", "Answer": ["Maryam Tabar"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Winkler Stephanie', 'interest': 'Substance Use Disorder'}\ninterest = info['interest']\nname = info['name']\n\ninterest_person_list = searchPerson(interest = interest)\ninterest_person_id_list = [person['person_id'] for person in interest_person_list]\ntarget_list = []\nfor interest_person_id in interest_person_id_list:\n    coauthors = getCoauthors(person_id = interest_person_id)\n    coauthor_name_list = [coauthor['name'] for coauthor in coauthors]\n    if name in coauthor_name_list:\n        target_list.append(getPersonBasicInfo(person_id=interest_person_id)['name'])\nfinal_result = target_list\n", "result": ["Maryam Tabar"], "exe_time": 2.4615070819854736}
{"Query_en": "What are the papers published by Asaf Cassel at School of Computer Science, Tel Aviv University?", "Answer": ["A General Approach to Multi-Armed Bandits Under Risk Criteria.", "Logarithmic Regret for Learning Linear Quadratic Regulators Efficiently", "Bandit Linear Control", "Online Policy Gradient For Model Free Learning Of Linear Quadratic Regulators With Root T Regret", "Rate-Optimal Online Convex Optimization in Adaptive Linear Control", "Efficient Online Linear Control with Stochastic Convex Costs and Unknown Dynamics."], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Asaf Cassel', 'organization': 'School of Computer Science, Tel Aviv University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\npublications_title_list = [publication['title'] for publication in publications_list]\nfinal_result = publications_title_list\n", "result": ["A General Approach to Multi-Armed Bandits Under Risk Criteria.", "Logarithmic Regret for Learning Linear Quadratic Regulators Efficiently", "Bandit Linear Control", "Online Policy Gradient For Model Free Learning Of Linear Quadratic Regulators With Root T Regret", "Rate-Optimal Online Convex Optimization in Adaptive Linear Control", "Efficient Online Linear Control with Stochastic Convex Costs and Unknown Dynamics."], "exe_time": 1.8562142848968506}
{"Query_en": "What is the citation count of the representative work of Yuhang Wu at Department of IEOR, University of California, Berkeley?", "Answer": 0, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Yuhang Wu', 'organization': 'Department of IEOR, University of California, Berkeley'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_num_citation = target_publication_dict['num_citation']\nfinal_result = target_num_citation\n", "result": 0, "exe_time": 2.207618474960327}
{"Query_en": "In which year was the representative work of Najeeb Kazmi at Microsoft published?", "Answer": 2019, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Najeeb Kazmi', 'organization': 'Microsoft'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\nmax_citation = publications_list[0]\nfinal_result = max_citation['year']\n", "result": 2019, "exe_time": 1.7902631759643555}
{"Query_en": "Who are the authors of the representative work of Fan-Keng Sun at Electrical Engineering and Computer Science, Massachusetts Institute of Technology?", "Answer": ["Shun-Yao Shih", "Fan-Keng Sun", "Hung-yi Lee"], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Fan-Keng Sun', 'organization': 'Electrical Engineering and Computer Science, Massachusetts Institute of Technology'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\nmax_citation = publications_list[0]\nfinal_result = max_citation['year']\n", "result": 2019, "exe_time": 1.9266679286956787}
{"Query_en": "What are the papers published by Henry C. Lin in Lower Bound field?", "Answer": ["Eradication of small intestinal bacterial overgrowth reduces symptoms of irritable bowel syndrome.", "Structure-based discovery of opioid analgesics with reduced side effects", "Lower frequency of MMC is found in IBS subjects with abnormal lactulose breath test, suggesting bacterial overgrowth.", "Identification of a prodromal period in Crohn's disease but not ulcerative colitis.", "Chemical informatics and target identification in a zebrafish phenotypic screen.", "Jejunal brake", "Normalization of lactulose breath testing correlates with symptom improvement in irritable bowel syndrome", "A pharmacological organization of G protein-coupled receptors.", "Robust optimization of contaminant sensor placement for community water systems", "AGORA: Assembly Guided by Optical Restriction Alignment."], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Henry C. Lin', 'interest': 'Lower Bound'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name=name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\npublications_title_list = [publication['title'] for publication in publications_list]\nfinal_result = publications_title_list\n", "result": ["Eradication of small intestinal bacterial overgrowth reduces symptoms of irritable bowel syndrome.", "Structure-based discovery of opioid analgesics with reduced side effects", "Lower frequency of MMC is found in IBS subjects with abnormal lactulose breath test, suggesting bacterial overgrowth.", "Identification of a prodromal period in Crohn's disease but not ulcerative colitis.", "Chemical informatics and target identification in a zebrafish phenotypic screen.", "Jejunal brake", "Normalization of lactulose breath testing correlates with symptom improvement in irritable bowel syndrome", "A pharmacological organization of G protein-coupled receptors.", "Robust optimization of contaminant sensor placement for community water systems", "AGORA: Assembly Guided by Optical Restriction Alignment."], "exe_time": 1.7835781574249268}
{"Query_en": "What is the citation count of the representative work of Alp Yurtsever in Convex-concave Procedure field?", "Answer": 155, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Alp Yurtsever', 'interest': 'Convex-concave Procedure'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_num_citation = target_publication_dict['num_citation']\nfinal_result = target_num_citation\n", "result": 155, "exe_time": 2.171464681625366}
{"Query_en": "In which year was the representative work of Hao Liao in Complex Networks field published?", "Answer": 2017, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Hao Liao', 'interest': 'Complex Networks'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\nperson_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = person_pubs[0]\npublication_year = target_publication_dict['year']\nfinal_result = publication_year\n", "result": 2017, "exe_time": 1.972475528717041}
{"Query_en": "Who are the authors of the representative work of Zenan Wang in Causal Meta-mediation Analysis Inferring field?", "Answer": ["Zenan Wang", "Carlos Carrion", "Xiliang Lin", "Fuhua Ji", "Yongjun Bao", "Weipeng Yan"], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Zenan Wang', 'interest': 'Causal Meta-mediation Analysis Inferring'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\nauthor_name_list = target_publication_dict['authors_name_list']\nfinal_result = author_name_list\n", "result": ["Zenan Wang", "Carlos Carrion", "Xiliang Lin", "Fuhua Ji", "Yongjun Bao", "Weipeng Yan"], "exe_time": 2.1841001510620117}
{"Query_en": "Is Jiacheng Guo at Baidu, Inc. male or female?", "Answer": "male", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Jiacheng Guo', 'organization': 'Baidu, Inc.'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_gender = target_person_basic_info['gender']\nfinal_result = target_person_gender\n", "result": "male", "exe_time": 1.8282885551452637}
{"Query_en": "What is the title of Jinbae Im at Knowledge AI Lab., NCSOFT Co.?", "Answer": "Other", "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Jinbae Im', 'organization': 'Knowledge AI Lab., NCSOFT Co.'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_title = target_publication_dict['title']\nfinal_result = target_publication_title\n", "result": "MeLU: Meta-Learned User Preference Estimator for Cold-Start Recommendation", "exe_time": 2.1651406288146973}
{"Query_en": "What is the introduction of Yuhang Zhou at Department of Computer Science and Technology, Nanjing University?", "Answer": "I am interested in Machine Learning and Data Mining. Currently I am focusing on the subfields of Deep Learning, Reinforcement Learning, Distributed Machine Learning and Trading via Machine Learning.", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Yuhang Zhou', 'organization': 'Department of Computer Science and Technology, Nanjing University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_bio = target_person_basic_info['bio']\nfinal_result = target_person_bio\n", "result": "I am interested in Machine Learning and Data Mining. Currently I am focusing on the subfields of Deep Learning, Reinforcement Learning, Distributed Machine Learning and Trading via Machine Learning.", "exe_time": 1.8913347721099854}
{"Query_en": "What is the educational background of Fuzheng Zhang at NLP Center, Kuaishou?", "Answer": "[09/2010 - 06/2015] Ph.D., Dept. Computer Science, University of Science and Technology of China & Microsoft Research Asia<br>[01/2007 - 12/2009] B.S., Dept. Statistics and Finance, University of Science and Technology of China<br>[09/2006 - 06/2010] B.S., Dept. Computer Science, University of Science and Technology of China", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Fuzheng Zhang', 'organization': 'NLP Center, Kuaishou'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_education_experience = target_person_basic_info['education_experience']\nfinal_result = target_person_education_experience\n", "result": "[09/2010 - 06/2015] Ph.D., Dept. Computer Science, University of Science and Technology of China & Microsoft Research Asia<br>[01/2007 - 12/2009] B.S., Dept. Statistics and Finance, University of Science and Technology of China<br>[09/2006 - 06/2010] B.S., Dept. Computer Science, University of Science and Technology of China", "exe_time": 2.042940139770508}
{"Query_en": "What is the email of Aniruddha Adiga at Biocomplexity Institute and Initiative, University of Virginia?", "Answer": "aa5dw@virginia.edu", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Aniruddha Adiga', 'organization': 'Biocomplexity Institute and Initiative, University of Virginia'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_email = target_person_basic_info['email']\nfinal_result = target_person_email\n", "result": "aa5dw@virginia.edu", "exe_time": 1.905890703201294}
{"Query_en": "Is Kareem Ahmed in Data Migration field male or female?", "Answer": "unknown", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Kareem Ahmed', 'interest': 'Data Migration'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_gender = target_person_basic_info['gender']\nfinal_result = target_person_gender\n", "result": "unknown", "exe_time": 1.7733333110809326}
{"Query_en": "What is the title of Jing Jiang in Optimization field?", "Answer": "Assistant Professor", "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Jing Jiang', 'interest': 'Optimization'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_title = target_publication_dict['title']\nfinal_result = target_publication_title\n", "result": "Graph WaveNet for Deep Spatial-Temporal Graph Modeling.", "exe_time": 2.053377389907837}
{"Query_en": "What is the introduction of Ylli Sadikaj in Graph Embedding field?", "Answer": "", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Ylli Sadikaj', 'interest': 'Graph Embedding'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_bio = target_person_basic_info['bio']\nfinal_result = target_person_bio\n", "result": "", "exe_time": 1.7972033023834229}
{"Query_en": "What is the educational background of Ariel Gordon in Statistical Mechanics field?", "Answer": "", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Ariel Gordon', 'interest': 'Statistical Mechanics'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_education_experience = target_person_basic_info['education_experience']\nfinal_result = target_person_education_experience\n", "result": "", "exe_time": 1.9737205505371094}
{"Query_en": "What is the email of M Akash Kumar in Image Captioning field?", "Answer": "makashkumar@microsoft.com;makashkumar99@gmail.com", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'M Akash Kumar', 'interest': 'Image Captioning'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_email = target_person_basic_info['email']\nfinal_result = target_person_email\n", "result": "makashkumar@microsoft.com;makashkumar99@gmail.com", "exe_time": 1.7863450050354004}
{"Query_en": "Who among the collaborators of Bowen Du at State Key Lab of Software Development Environment, School of Computer Science and Engineering, Beihang University are researching in Deep Learning field?", "Answer": ["Leilei Sun", "Hao Peng"], "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Bowen Du', 'organization': 'State Key Lab of Software Development Environment, School of Computer Science and Engineering, Beihang University'}\nname = info['name']\norganization = info['organization']\ntarget_interest = info['interest']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthor_list = getCoauthors(person_id = target_person_id)\n\ntarget_coauthor_names = []\nfor coauthor in coauthor_list:\n    coauthor_id = coauthor['person_id']\n    coauthor_interests_list = getPersonInterest(person_id = coauthor_id)\n    if target_interest in coauthor_interests_list:\n        target_coauthor_names.append(coauthor['name'])\n\nfinal_result = target_coauthor_names\n", "result": "exe error", "exe_time": 2.9166982173919678}
{"Query_en": "Who has the highest citation count among the collaborators of Lei Jiang at Beijing Jiaotong University?", "Answer": "Qingyong Li", "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Lei Jiang', 'organization': 'Beijing Jiaotong University'}\nname = info['name']\norganization = info['organization']\n\n# Search the person\nperson_list = searchPerson(name=name, organization=organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# Get the coauthors\ncoauthors_list = getCoauthors(person_id=target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_citation = 0\nmax_citation_author_name = ''\n\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_citation = coauthor_info['num_citation']\n    if coauthor_citation > max_citation:\n        max_citation = coauthor_citation\n        max_citation_author_name = coauthor_info['name']\n\nfinal_result = max_citation_author_name\n", "result": "Qingyong Li", "exe_time": 3.606663465499878}
{"Query_en": "Who has the most published papers among the collaborators of Vinayak Gupta at IBM Research?", "Answer": "Abir De", "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Vinayak Gupta', 'organization': 'IBM Research'}\nname = info['name']\norganization = info['organization']\n\n# Search the person\nperson_list = searchPerson(name=name, organization=organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# Get the coauthors\ncoauthors_list = getCoauthors(person_id=target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_pubs = 0\nmax_pubs_author_name = ''\n\n# Iterate each coauthor and calculate his/her publication number\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_pubs = coauthor_info['num_pubs']\n    if coauthor_pubs > max_pubs:\n        max_pubs = coauthor_pubs\n        max_pubs_author_name = coauthor_info['name']\n\nfinal_result = max_pubs_author_name\n", "result": "Abir De", "exe_time": 3.734219789505005}
{"Query_en": "Who among the collaborators of Dmitri Goldenberg in Personalization field are at Booking.cominstitution?", "Answer": ["Pablo Estevez", "Lucas Bernardi"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Dmitri Goldenberg', 'interest': 'Personalization'}\ninterest = info['interest']\nname = info['name']\n\ninterest_person_list = searchPerson(interest = interest)\ninterest_person_id_list = [person['person_id'] for person in interest_person_list]\ntarget_list = []\nfor interest_person_id in interest_person_id_list:\n    coauthors = getCoauthors(person_id = interest_person_id)\n    coauthor_name_list = [coauthor['name'] for coauthor in coauthors]\n    if name in coauthor_name_list:\n        target_list.append(getPersonBasicInfo(person_id=interest_person_id)['organization'])\nfinal_result = target_list\n", "result": [], "exe_time": 2.442425012588501}
{"Query_en": "Who has the highest citation count among the collaborators of Ruizhong Qiu in Combinatorial Optimization field?", "Answer": "Yiming Yang", "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Ruizhong Qiu', 'interest': 'Combinatorial Optimization'}\nname = info['name']\ninterest = info['interest']\n\n# get specific person's information\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# get coauthors of the specific person\ncoauthors_list = getCoauthors(person_id = target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_citation = 0\nmax_citation_author_name = ''\n\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_citation = coauthor_info['num_citation']\n    if coauthor_citation > max_citation:\n        max_citation = coauthor_citation\n        max_citation_author_name = coauthor_info['name']\n\nfinal_result = max_citation_author_name\n", "result": "Yiming Yang", "exe_time": 3.677596092224121}
{"Query_en": "Who has the most published papers among the collaborators of Qingsong Wen in Computational Complexity field?", "Answer": "Rong Jin", "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Qingsong Wen', 'interest': 'Computational Complexity'}\nname = info['name']\ninterest = info['interest']\n\n# get specific person's information\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# Get the coauthors\ncoauthors_list = getCoauthors(person_id=target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_pubs = 0\nmax_pubs_author_name = ''\n\n# Iterate each coauthor and calculate his/her publication number\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_pubs = coauthor_info['num_pubs']\n    if coauthor_pubs > max_pubs:\n        max_pubs = coauthor_pubs\n        max_pubs_author_name = coauthor_info['name']\n\nfinal_result = max_pubs_author_name\n", "result": "Rong Jin", "exe_time": 3.762143850326538}
{"Query_en": "Who are the collaborators of the collaborators of Michael T. Schaub at Massachusetts Institute of Technology, University of Oxford?", "Answer": ["Ananthram Swami", "Michael T. Schaub", "Danai Koutra", "Michael T. Schaub", "Yujun Yan", "Mark Heimann", "Marlena Duda", "Lingxiao Zhao", "Chandra Sripada", "Leman Akoglu", "Anup B. Rao", "Eric Solarz", "Nesreen Kamel Ahmed", "Ryan Anthony Rossi", "Jiaqi Ma", "Jingrui He", "Qiaozhu Mei", "Yuxiao Dong", "Marinka Zitnik", "Jon M. Kleinberg", "David F. Gleich", "Nate Veldt", "Junteng Jia", "Jure Leskovec", "Andrew Tomkins", "Ravi Kumar", "Michael T. Schaub", "Kiran Tomlinson", "Vasilis Charisopoulos", "Johan Ugander", "Moses Charikar", "Raunak Kumar", "Rongzhe Wei", "Santiago Segarra", "Danai Koutra", "Jiong Zhu", "Di Jin", "Yujun Yan", "Tara Safavi", "Michael T. Schaub", "Wei Lee", "Jay Thiagarajan", "Lingxiao Zhao", "Leman Akoglu", "Puja Trivedi", "Lindsay Snider", "Mengdi Wang", "Ryan Anthony Rossi", "Emilio Ferrara", "Christos Faloutsos", "Tara Safavi", "Di Jin", "Mark Heimann", "Jiong Zhu", "Ryan Anthony Rossi", "Vagelis Papalexakis", "Yujun Yan", "U Kang", "Brian Gallagher", "Pravallika Devineni", "Neil Shah", "Caleb Belth", "Leman Akoglu", "Marlena Duda", "Jay-Yoon Lee", "Jay Thiagarajan", "Hanghang Tong", "Jilles Vreeken", "Tina Eliassi-Rad", "Chandra Sripada", "Stephan Günnemann", "Puja Trivedi", "Anup B. Rao", "Sungchul Kim", "Di Jin（Derek）", "Nesreen Kamel Ahmed", "Eunyee Koh", "Joshua T. Vogelstein", "Michael T. Schaub", "Wei Lee"], "route": "searchPerson -> getCoauthors -> getCoauthors", "code": "info = {'name': 'Michael T. Schaub', 'organization': 'Massachusetts Institute of Technology, University of Oxford'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors1_list = getCoauthors(person_id = target_person_id)\n\ncoauthors2_list = []\nfor coauthor in coauthors1_list:\n    coauthors2_list.extend(getCoauthors(person_id = coauthor['person_id']))\n\ncoauthors2_names = [coauthor['name'] for coauthor in coauthors2_list]\n\nfinal_result = coauthors2_names\n", "result": ["Ananthram Swami", "Michael T. Schaub", "Danai Koutra", "Michael T. Schaub", "Yujun Yan", "Mark Heimann", "Marlena Duda", "Lingxiao Zhao", "Chandra Sripada", "Leman Akoglu", "Anup B. Rao", "Eric Solarz", "Nesreen Kamel Ahmed", "Ryan Anthony Rossi", "Jiaqi Ma", "Jingrui He", "Qiaozhu Mei", "Yuxiao Dong", "Marinka Zitnik", "Jon M. Kleinberg", "David F. Gleich", "Nate Veldt", "Junteng Jia", "Jure Leskovec", "Andrew Tomkins", "Ravi Kumar", "Michael T. Schaub", "Kiran Tomlinson", "Vasilis Charisopoulos", "Johan Ugander", "Moses Charikar", "Raunak Kumar", "Rongzhe Wei", "Santiago Segarra", "Danai Koutra", "Jiong Zhu", "Di Jin", "Yujun Yan", "Tara Safavi", "Michael T. Schaub", "Wei Lee", "Jay Thiagarajan", "Lingxiao Zhao", "Leman Akoglu", "Puja Trivedi", "Lindsay Snider", "Mengdi Wang", "Ryan Anthony Rossi", "Emilio Ferrara", "Christos Faloutsos", "Tara Safavi", "Di Jin", "Mark Heimann", "Jiong Zhu", "Ryan Anthony Rossi", "Vagelis Papalexakis", "Yujun Yan", "U Kang", "Brian Gallagher", "Pravallika Devineni", "Neil Shah", "Caleb Belth", "Leman Akoglu", "Marlena Duda", "Jay-Yoon Lee", "Jay Thiagarajan", "Hanghang Tong", "Jilles Vreeken", "Tina Eliassi-Rad", "Chandra Sripada", "Stephan Günnemann", "Puja Trivedi", "Anup B. Rao", "Sungchul Kim", "Di Jin（Derek）", "Nesreen Kamel Ahmed", "Eunyee Koh", "Joshua T. Vogelstein", "Michael T. Schaub", "Wei Lee"], "exe_time": 2.5850911140441895}
{"Query_en": "Who are the collaborators of the collaborators of Denian Yang in Multicast field?", "Answer": ["Charu C. Aggarwal", "Jiawei Zhang", "Hao Peng", "Lifang He", "Jiawei Han", "Sihong Xie", "Xiangnan Kong", "Chuan Shi", "Longbing Cao", "Chenwei Zhang", "Xifeng Yan", "Bing Liu", "Jianxin Li", "Lichao Sun", "Michail Vlachos", "Chengqi Zhang", "Changdong Wang", "Mingsheng Long", "Jian Pei", "Ke Wang", "Vincent Shin-Mu Tseng", "Christos Faloutsos", "Katharina Morik", "Denian Yang", "Vincent Shin-Mu Tseng", "Nico Piatkowski", "Philip S. Yu", "Longbing Cao", "Jian Pei"], "route": "searchPerson -> getCoauthors -> getCoauthors", "code": "info = {'name': 'Denian Yang', 'interest': 'Multicast'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors1_list = getCoauthors(person_id = target_person_id)\n\ncoauthors2_list = []\nfor coauthor in coauthors1_list:\n    coauthors2_list.extend(getCoauthors(person_id = coauthor['person_id']))\n\ncoauthors2_names = [coauthor['name'] for coauthor in coauthors2_list]\n\nfinal_result = coauthors2_names\n", "result": ["Charu C. Aggarwal", "Jiawei Zhang", "Hao Peng", "Lifang He", "Jiawei Han", "Sihong Xie", "Xiangnan Kong", "Chuan Shi", "Longbing Cao", "Chenwei Zhang", "Xifeng Yan", "Bing Liu", "Jianxin Li", "Lichao Sun", "Michail Vlachos", "Chengqi Zhang", "Changdong Wang", "Mingsheng Long", "Jian Pei", "Ke Wang", "Vincent Shin-Mu Tseng", "Christos Faloutsos", "Katharina Morik", "Denian Yang", "Vincent Shin-Mu Tseng", "Nico Piatkowski", "Philip S. Yu", "Longbing Cao", "Jian Pei"], "exe_time": 2.476707696914673}
{"Query_en": "What is the abstract of the representative work of Yongqi Zhang at 4Paradigm Inc.?", "Answer": "Knowledge graph (KG) embedding is a fundamental problem in data mining research with many real-world applications. It aims to encode the entities and relations in the graph into low dimensional vector space, which can be used for subsequent algorithms. Negative sampling, which samples negative triplets from non-observed ones in the training data, is an important step in KG embedding. Recently, generative adversarial network (GAN), has been introduced in negative sampling. By sampling negative triplets with large scores, these methods avoid the problem of vanishing gradient and thus obtain better performance. However, using GAN makes the original model more complex and harder to train, where reinforcement learning must be used. In this paper, motivated by the observation that negative triplets with large scores are important but rare, we propose to directly keep track of them with cache. However, how to sample from and update the cache are two important questions. We carefully design the solutions, which are not only efficient but also achieve good balance between exploration and exploitation. In this way, our method acts as a \"distilled\" version of previous GAN-based methods, which does not waste training time on additional parameters to fit the full distribution of negative triplets. The extensive experiments show that our method can gain significant improvement on various KG embedding models, and outperform the state-of-the-arts negative sampling methods based on GAN.", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Yongqi Zhang', 'organization': '4Paradigm Inc.'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_abstract = target_publication_info['abstract']\nfinal_result = target_abstract\n", "result": "Knowledge graph (KG) embedding is a fundamental problem in data mining research with many real-world applications. It aims to encode the entities and relations in the graph into low dimensional vector space, which can be used for subsequent algorithms. Negative sampling, which samples negative triplets from non-observed ones in the training data, is an important step in KG embedding. Recently, generative adversarial network (GAN), has been introduced in negative sampling. By sampling negative triplets with large scores, these methods avoid the problem of vanishing gradient and thus obtain better performance. However, using GAN makes the original model more complex and harder to train, where reinforcement learning must be used. In this paper, motivated by the observation that negative triplets with large scores are important but rare, we propose to directly keep track of them with cache. However, how to sample from and update the cache are two important questions. We carefully design the solutions, which are not only efficient but also achieve good balance between exploration and exploitation. In this way, our method acts as a \"distilled\" version of previous GAN-based methods, which does not waste training time on additional parameters to fit the full distribution of negative triplets. The extensive experiments show that our method can gain significant improvement on various KG embedding models, and outperform the state-of-the-arts negative sampling methods based on GAN.", "exe_time": 2.4645519256591797}
{"Query_en": "What is the PDF link of the representative work of Jiarui Jin at Department of Computer Science and Engineering, Shanghai Jiao Tong University?", "Answer": "https://static.aminer.cn/storage/pdf/arxiv/20/2005/2005.14171.pdf", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Jiarui Jin', 'organization': 'Department of Computer Science and Engineering, Shanghai Jiao Tong University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_pdf = target_publication_info['pdf_link']\nfinal_result = target_pdf\n", "result": "https://static.aminer.cn/storage/pdf/arxiv/20/2005/2005.14171.pdf", "exe_time": 2.5747122764587402}
{"Query_en": "Which journal or conference included the representative work of Wanwan Tang at Baidu Inc.?", "Answer": {"info": {"name": "KDD '20: The 26th ACM SIGKDD Conference on Knowledge Discovery and Data Mining\n\t\t      Virtual Event\n\t\t      CA\n\t\t      USA\n\t\t    July, 2020", "name_s": "KDD"}}, "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Wanwan Tang', 'organization': 'Baidu Inc.'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_venue = target_publication_info['venue']\nfinal_result = target_venue\n", "result": {"info": {"name": "KDD '20: The 26th ACM SIGKDD Conference on Knowledge Discovery and Data Mining\n\t\t      Virtual Event\n\t\t      CA\n\t\t      USA\n\t\t    July, 2020", "name_s": "KDD"}}, "exe_time": 2.4423704147338867}
{"Query_en": "What is the abstract of the representative work of Jessica Hwang in Western United States field?", "Answer": "Water managers in the western United States (U.S.) rely on longterm forecasts of temperature and precipitation to prepare for droughts and other wet weather extremes. To improve the accuracy of these longterm forecasts, the U.S. Bureau of Reclamation and the National Oceanic and Atmospheric Administration (NOAA) launched the Subseasonal Climate Forecast Rodeo, a year-long real-time forecasting challenge in which participants aimed to skillfully predict temperature and precipitation in the western U.S. two to four weeks and four to six weeks in advance. Here we present and evaluate our machine learning approach to the Rodeo and release our SubseasonalRodeo dataset, collected to train and evaluate our forecasting system. Our system is an ensemble of two regression models. The first integrates the diverse collection of meteorological measurements and dynamic model forecasts in the SubseasonalRodeo dataset and prunes irrelevant predictors using a customized multitask model selection procedure. The second uses only historical measurements of the target variable (temperature or precipitation) and introduces multitask nearest neighbor features into a weighted local linear regression. Each model alone is significantly more accurate than the debiased operational U.S. Climate Forecasting System (CFSv2), and our ensemble skill exceeds that of the top Rodeo competitor for each target variable and forecast horizon. Moreover, over 2011-2018, an ensemble of our regression models and debiased CFSv2 improves debiased CFSv2 skill by 40-50% for temperature and 129-169% for precipitation. We hope that both our dataset and our methods will help to advance the state of the art in subseasonal forecasting.", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Jessica Hwang', 'interest': 'Western United States'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_abstract = target_publication_info['abstract']\nfinal_result = target_abstract\n", "result": "Water managers in the western United States (U.S.) rely on longterm forecasts of temperature and precipitation to prepare for droughts and other wet weather extremes. To improve the accuracy of these longterm forecasts, the U.S. Bureau of Reclamation and the National Oceanic and Atmospheric Administration (NOAA) launched the Subseasonal Climate Forecast Rodeo, a year-long real-time forecasting challenge in which participants aimed to skillfully predict temperature and precipitation in the western U.S. two to four weeks and four to six weeks in advance. Here we present and evaluate our machine learning approach to the Rodeo and release our SubseasonalRodeo dataset, collected to train and evaluate our forecasting system. Our system is an ensemble of two regression models. The first integrates the diverse collection of meteorological measurements and dynamic model forecasts in the SubseasonalRodeo dataset and prunes irrelevant predictors using a customized multitask model selection procedure. The second uses only historical measurements of the target variable (temperature or precipitation) and introduces multitask nearest neighbor features into a weighted local linear regression. Each model alone is significantly more accurate than the debiased operational U.S. Climate Forecasting System (CFSv2), and our ensemble skill exceeds that of the top Rodeo competitor for each target variable and forecast horizon. Moreover, over 2011-2018, an ensemble of our regression models and debiased CFSv2 improves debiased CFSv2 skill by 40-50% for temperature and 129-169% for precipitation. We hope that both our dataset and our methods will help to advance the state of the art in subseasonal forecasting.", "exe_time": 2.4474782943725586}
{"Query_en": "What is the PDF link of the representative work of Chen Zhu in Geochemical Modeling field?", "Answer": "https://cz5waila03cyo0tux1owpyofgoryroob.oss-cn-beijing.aliyuncs.com/52/CB/96/52CB965DFEA7ACE9C884632656FE8DAB.pdf", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Chen Zhu', 'interest': 'Geochemical Modeling'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_pdf = target_publication_info['pdf_link']\nfinal_result = target_pdf\n", "result": "https://cz5waila03cyo0tux1owpyofgoryroob.oss-cn-beijing.aliyuncs.com/52/CB/96/52CB965DFEA7ACE9C884632656FE8DAB.pdf", "exe_time": 2.4699974060058594}
{"Query_en": "Which journal or conference included the representative work of Myra Spiliopoulou in Data Mining field?", "Answer": {"id": "55f957a9c35f4fb0d21cdfb3", "info": {"name": "Knowledge and Data Engineering, IEEE Transactions  ", "name_zh": ""}, "issue": "4", "type": 1, "volume": "14"}, "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Myra Spiliopoulou', 'interest': 'Data Mining'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_venue = target_publication_info['venue']\nfinal_result = target_venue\n", "result": {"id": "55f957a9c35f4fb0d21cdfb3", "info": {"name": "Knowledge and Data Engineering, IEEE Transactions  ", "name_zh": ""}, "issue": "4", "type": 1, "volume": "14"}, "exe_time": 2.436814308166504}
