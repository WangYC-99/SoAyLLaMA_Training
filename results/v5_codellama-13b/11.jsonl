{"Query_en": "Research interests of Satoshi Hara at The Institute of Scientific and Industrial Research, Osaka University", "Answer": ["Data Analysis", "Generalized Eigenvalue Problem", "Stationary Subspace Analysis", "Non-stationary Source", "Multiple Graphical Gaussian Model", "Feature Selection", "Alternating Direction Method", "Multiple Datasets", "Dual Augmented Lagrangian", "Parameter Estimation"], "route": "searchPerson", "code": "info = {'name': 'Satoshi Hara', 'organization': 'The Institute of Scientific and Industrial Research, Osaka University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ninterests = target_person_info['interests']\nfinal_result = interests\n", "result": ["Data Analysis", "Generalized Eigenvalue Problem", "Stationary Subspace Analysis", "Non-stationary Source", "Multiple Graphical Gaussian Model", "Feature Selection", "Alternating Direction Method", "Multiple Datasets", "Dual Augmented Lagrangian", "Parameter Estimation"], "exe_time": 2.2440366744995117}
{"Query_en": "Citation count of Chengqi Zhang at Centre for Quantum Computation and Intelligent Systems, University of Technology Sydney", "Answer": 32678, "route": "searchPerson", "code": "info = {'name': 'Chengqi Zhang', 'organization': 'Centre for Quantum Computation and Intelligent Systems, University of Technology Sydney'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\nnum_citation = target_person_info['num_citation']\nfinal_result = num_citation\n", "result": 32678, "exe_time": 2.4660286903381348}
{"Query_en": "Number of published papers by Shuai Zhao at Amazon Alexa AI", "Answer": 14, "route": "searchPerson", "code": "info = {'name': 'Shuai Zhao', 'organization': 'Amazon Alexa AI'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\nnum_pubs = target_person_info['num_pubs']\nfinal_result = num_pubs\n", "result": 14, "exe_time": 2.283909559249878}
{"Query_en": "Which institution does Sasan Tavakkol who researches in Sasan Tavakkol field belong to?", "Answer": "Google AI", "route": "searchPerson", "code": "info = {'name': 'Sasan Tavakkol', 'interest': 'Sasan Tavakkol'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\norganization = target_person_info['organization']\nfinal_result = organization\n", "result": "Google AI", "exe_time": 2.1645774841308594}
{"Query_en": "Citation count of Panpan Zhang who researches in Minimum Entropy Deconvolution field", "Answer": 77, "route": "searchPerson", "code": "info = {'name': 'Panpan Zhang', 'interest': 'Minimum Entropy Deconvolution'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\nnum_citation = target_person_info['num_citation']\nfinal_result = num_citation\n", "result": 77, "exe_time": 2.242973804473877}
{"Query_en": "Number of papers published by Cheng Deng who researches in Feature Extraction field", "Answer": 270, "route": "searchPerson", "code": "info = {'name': 'Cheng Deng', 'interest': 'Feature Extraction'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\nnum_pubs = target_person_info['num_pubs']\nfinal_result = num_pubs\n", "result": 270, "exe_time": 2.162641763687134}
{"Query_en": "Who are the researchers at Department of Computer Science, City University of Hong Kong?", "Answer": ["Ying Wei", "Chen Ma", "Xi Lin"], "route": "searchPerson", "code": "info = {'organization': 'Department of Computer Science, City University of Hong Kong'}\norganization = info['organization']\n\nperson_list = searchPerson(organization = organization)\nname_list = [person_list[i]['name'] for i in range(len(person_list))]\nfinal_result = name_list\n", "result": ["Ying Wei", "Chen Ma", "Xi Lin"], "exe_time": 1.848449945449829}
{"Query_en": "Who are the researchers in Spark Graphframes field?", "Answer": ["Alexey Svyatkovskiy"], "route": "searchPerson", "code": "info = {'interest': 'Spark Graphframes'}\ninterest = info['interest']\n\nperson_list = searchPerson(interest = interest)\nname_list = [person_list[i]['name'] for i in range(len(person_list))]\nfinal_result = name_list\n", "result": ["Alexey Svyatkovskiy"], "exe_time": 1.689239740371704}
{"Query_en": "Who are the collaborators of Qingsong Lv at Tsinghua University?", "Answer": ["Ming Ding", "Jie Tang", "Yuxiao Dong", "Juanzi Li", "Zhen Yang", "Chang Zhou"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Qingsong Lv', 'organization': 'Tsinghua University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\ncoauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\nfinal_result = coauthors_name_list\n", "result": ["Ming Ding", "Jie Tang", "Yuxiao Dong", "Juanzi Li", "Zhen Yang", "Chang Zhou"], "exe_time": 3.319094181060791}
{"Query_en": "Who are the collaborators of Jia Zeng in Latent Dirichlet Allocation field?", "Answer": ["Mingxuan Yuan", "Weixiong Rao", "Yanhua Li", "Jianguo Yao", "Lei Chen", "Qiang Yang", "Jie Wang", "Wenyuan Dai", "Huamin Qu", "Peng Zhao"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Jia Zeng', 'interest': 'Latent Dirichlet Allocation'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\ncoauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\nfinal_result = coauthors_name_list\n", "result": ["Mingxuan Yuan", "Weixiong Rao", "Yanhua Li", "Jianguo Yao", "Lei Chen", "Qiang Yang", "Jie Wang", "Wenyuan Dai", "Huamin Qu", "Peng Zhao"], "exe_time": 3.3323349952697754}
{"Query_en": "Who at Department of Computer Science, University of Virginia has a collaboration with Chuanhao Li?", "Answer": ["Hongning Wang"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Chuanhao Li', 'organization': 'Department of Computer Science, University of Virginia'}\norganization = info['organization']\nname = info['name']\n\norganization_person_list = searchPerson(organization = organization)\norganization_person_id_list = [person['person_id'] for person in organization_person_list]\ntarget_list = []\nfor interest_person_id in organization_person_id_list:\n    coauthors = getCoauthors(person_id = interest_person_id)\n    coauthor_name_list = [coauthor['name'] for coauthor in coauthors]\n    if name in coauthor_name_list:\n        target_list.append(getPersonBasicInfo(person_id=interest_person_id)['name'])\nfinal_result = target_list\n", "result": ["Hongning Wang"], "exe_time": 4.404435157775879}
{"Query_en": "Who in Text Embedding field has a collaboration with Jinfeng Zhuang?", "Answer": ["Yu Liu"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Jinfeng Zhuang', 'interest': 'Text Embedding'}\ninterest = info['interest']\nname = info['name']\n\ninterest_person_list = searchPerson(interest = interest)\ninterest_person_id_list = [person['person_id'] for person in interest_person_list]\ntarget_list = []\nfor interest_person_id in interest_person_id_list:\n    coauthors = getCoauthors(person_id = interest_person_id)\n    coauthor_name_list = [coauthor['name'] for coauthor in coauthors]\n    if name in coauthor_name_list:\n        target_list.append(getPersonBasicInfo(person_id=interest_person_id)['name'])\nfinal_result = target_list\n", "result": ["Yu Liu"], "exe_time": 4.318623304367065}
{"Query_en": "What are the papers published by Jianguo Yao at State Grid(State Grid Electric Power Research Institute,State Grid Corporation of China),Beijing,China?", "Answer": ["Practice and Prospects of Intelligent Dispatch with Chinese Characteristics", "VGRIS: virtualized GPU resource isolation and scheduling in cloud gaming", "VGRIS: Virtualized GPU Resource Isolation and Scheduling in Cloud Gaming", "Differential privacy in telco big data platform", "Load Following of Multiple Heterogeneous TCL Aggregators by Centralized Control", "The essential cause and technical requirements of the smart grid", "vGASA: Adaptive Scheduling Algorithm of Virtualized GPU Resource in Cloud Gaming", "System-level calibration for data fusion in wireless sensor networks", "Design and implementation of a new generation distribution automation and management system", "NetSimplex: Controller Fault Tolerance Architecture in Networked Control Systems"], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Jianguo Yao', 'organization': 'State Grid(State Grid Electric Power Research Institute,State Grid Corporation of China),Beijing,China'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\npublications_title_list = [publication['title'] for publication in publications_list]\nfinal_result = publications_title_list\n", "result": ["Practice and Prospects of Intelligent Dispatch with Chinese Characteristics", "VGRIS: virtualized GPU resource isolation and scheduling in cloud gaming", "VGRIS: Virtualized GPU Resource Isolation and Scheduling in Cloud Gaming", "Differential privacy in telco big data platform", "Load Following of Multiple Heterogeneous TCL Aggregators by Centralized Control", "The essential cause and technical requirements of the smart grid", "vGASA: Adaptive Scheduling Algorithm of Virtualized GPU Resource in Cloud Gaming", "System-level calibration for data fusion in wireless sensor networks", "Design and implementation of a new generation distribution automation and management system", "NetSimplex: Controller Fault Tolerance Architecture in Networked Control Systems"], "exe_time": 3.5376782417297363}
{"Query_en": "What is the citation count of the representative work of Lei Zheng at Shanghai Jiao Tong University?", "Answer": 467, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Lei Zheng', 'organization': 'Shanghai Jiao Tong University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\n# Assuming the representative work is the one with the most citations\n# The list was sorted by citation\nmax_citation = publications_list[0]\nfinal_result = max_citation['num_citation']\n", "result": 467, "exe_time": 3.5925259590148926}
{"Query_en": "In which year was the representative work of Wenjie Li at Department of Computing, Faculty of Engineering, The Hong Kong Polytechnic University published?", "Answer": 2018, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Wenjie Li', 'organization': 'Department of Computing, Faculty of Engineering, The Hong Kong Polytechnic University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\n# Assuming the representative work is the one with the most citations\n# The list was sorted by citation\nmax_citation = publications_list[0]\nfinal_result = max_citation['num_citation']\n", "result": 897, "exe_time": 3.8374054431915283}
{"Query_en": "Who are the authors of the representative work of Yunqing Zhao at Singapore University of Technology and Design?", "Answer": ["Jiamei Sun", "Sebastian Lapuschkin", "Wojciech Samek", "Yunqing Zhao", "Ngai-Man Cheung", "Alexander Binder"], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Yunqing Zhao', 'organization': 'Singapore University of Technology and Design'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\nmax_citation = publications_list[0]\nfinal_result = max_citation['year']\n", "result": 2020, "exe_time": 3.3137221336364746}
{"Query_en": "What are the papers published by Sijie Ruan in Urban Computing field?", "Answer": ["Planning Bike Lanes based on Sharing-Bikes' Trajectories", "UrbanFM: Inferring Fine-Grained Urban Flows.", "Just: Jd Urban Spatio-Temporal Data Engine", "Detecting Vehicle Illegal Parking Events using Sharing Bikes' Trajectories.", "Trajmesa: A Distributed Nosql Storage Engine For Big Trajectory Data", "Learning To Generate Maps From Trajectories", "Fine-Grained Urban Flow Inference", "What is the Human Mobility in a New City: Transfer Mobility Knowledge Across Cities", "Cloudtp: A Cloud-Based Flexible Trajectory Preprocessing Framework", "Doing in One Go: Delivered Time Inference Based on Coueriers' Trajectories"], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Sijie Ruan', 'interest': 'Urban Computing'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name=name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\npublications_title_list = [publication['title'] for publication in publications_list]\nfinal_result = publications_title_list\n", "result": ["Planning Bike Lanes based on Sharing-Bikes' Trajectories", "UrbanFM: Inferring Fine-Grained Urban Flows.", "Just: Jd Urban Spatio-Temporal Data Engine", "Detecting Vehicle Illegal Parking Events using Sharing Bikes' Trajectories.", "Trajmesa: A Distributed Nosql Storage Engine For Big Trajectory Data", "Learning To Generate Maps From Trajectories", "Fine-Grained Urban Flow Inference", "What is the Human Mobility in a New City: Transfer Mobility Knowledge Across Cities", "Cloudtp: A Cloud-Based Flexible Trajectory Preprocessing Framework", "Doing in One Go: Delivered Time Inference Based on Coueriers' Trajectories"], "exe_time": 3.1736161708831787}
{"Query_en": "What is the citation count of the representative work of Sid Reddy in Adaptive Response field?", "Answer": 192, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Sid Reddy', 'interest': 'Adaptive Response'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_num_citation = target_publication_dict['num_citation']\nfinal_result = target_num_citation\n", "result": 192, "exe_time": 3.712175130844116}
{"Query_en": "In which year was the representative work of Dong Deng in Similarity Search field published?", "Answer": 2016, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Dong Deng', 'interest': 'Similarity Search'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_num_citation = target_publication_dict['num_citation']\nfinal_result = target_num_citation\n", "result": 258, "exe_time": 3.6967275142669678}
{"Query_en": "Who are the authors of the representative work of Yifei Wang in Convex Optimization field?", "Answer": ["Yifei Wang", "Qi Zhang", "Yisen Wang", "Jiansheng Yang", "Zhouchen Lin"], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Yifei Wang', 'interest': 'Convex Optimization'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\nauthor_name_list = target_publication_dict['authors_name_list']\nfinal_result = author_name_list\n", "result": ["Yifei Wang", "Qi Zhang", "Yisen Wang", "Jiansheng Yang", "Zhouchen Lin"], "exe_time": 3.7248518466949463}
{"Query_en": "Is Panagiotis Papapetrou at Stockholm University, Sweden Faculty of Social Sciences Department of Computer and Systems Sciences male or female?", "Answer": "male", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Panagiotis Papapetrou', 'organization': 'Stockholm University, Sweden Faculty of Social Sciences Department of Computer and Systems Sciences'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_gender = target_person_basic_info['gender']\nfinal_result = target_person_gender\n", "result": "male", "exe_time": 3.4566357135772705}
{"Query_en": "What is the title of Jingbo Shang at University of California, San Diego?", "Answer": "Assistant Professor", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Jingbo Shang', 'organization': 'University of California, San Diego'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_abstract = target_publication_info['abstract']\nfinal_result = target_abstract\n", "result": "Linguistic sequence labeling is a general modeling approach that encompasses a variety of problems, such as part-of-speech tagging and named entity recognition. Recent advances in neural networks (NNs) make it possible to build reliable models without handcrafted features. However, in many cases, it is hard to obtain sufficient annotations to train these models. In this study, we develop a novel neural framework to extract abundant knowledge hidden in raw texts to empower the sequence labeling task. Besides word-level knowledge contained in pre-trained word embeddings, character-aware neural language models are incorporated to extract character-level knowledge. Transfer learning techniques are further adopted to mediate different components and guide the language model towards the key knowledge. Comparing to previous methods, these task-specific knowledge allows us to adopt a more concise model and conduct more efficient training. Different from most transfer learning methods, the proposed framework does not rely on any additional supervision. It extracts knowledge from self-contained order information of training sequences. Extensive experiments on benchmark datasets demonstrate the effectiveness of leveraging character-level knowledge and the efficiency of co-training. For example, on the CoNLL03 NER task, model training completes in about 6 hours on a single GPU, reaching F1 score of 91.71$pm$0.10 without using any extra annotation.", "exe_time": 4.300623655319214}
{"Query_en": "What is the introduction of Matteo Interlandi at University of Modena and Reggio Emilia, Italy?", "Answer": "Professional activities<br>Program Committee: VLDB 2021, EuroSys 2020, TaPP 2020, DASFAA 2020, DASFAA 2019, MLOSS 2018, TaPP 2018, SoCC 2018, SIGMOD 2017 (Demo Track), HotCloud 2016.<br>External Reviewer: CIKM 2018, SIGMOD 2017, VLDB 2016, SIGMOD 2016, JDIQ 2016, TODS 2015, VLDB 2015, ICDE 2015, VLDB 2014, VLDB 2013, ICDE 2013.", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Matteo Interlandi', 'organization': 'University of Modena and Reggio Emilia, Italy'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_bio = target_person_basic_info['bio']\nfinal_result = target_person_bio\n", "result": "Professional activities<br>Program Committee: VLDB 2021, EuroSys 2020, TaPP 2020, DASFAA 2020, DASFAA 2019, MLOSS 2018, TaPP 2018, SoCC 2018, SIGMOD 2017 (Demo Track), HotCloud 2016.<br>External Reviewer: CIKM 2018, SIGMOD 2017, VLDB 2016, SIGMOD 2016, JDIQ 2016, TODS 2015, VLDB 2015, ICDE 2015, VLDB 2014, VLDB 2013, ICDE 2013.", "exe_time": 3.3127918243408203}
{"Query_en": "What is the educational background of Yi-Shan Lin at Department of Computer Science, Purdue University?", "Answer": "M.S. in Computer Science, Purdue University, USA 2017-Present<br><br>M.S. in Computer Science, National Tsing-Hua University, Taiwan 2008-2009<br><br>B.S. in Computer Science, National Tsing Hua University, Taiwan 2004-2008", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Yi-Shan Lin', 'organization': 'Department of Computer Science, Purdue University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_education_experience = target_person_basic_info['education_experience']\nfinal_result = target_person_education_experience\n", "result": "M.S. in Computer Science, Purdue University, USA 2017-Present<br><br>M.S. in Computer Science, National Tsing-Hua University, Taiwan 2008-2009<br><br>B.S. in Computer Science, National Tsing Hua University, Taiwan 2004-2008", "exe_time": 3.6295042037963867}
{"Query_en": "What is the email of Aravind Sukumaran Rajam at Washington State University?", "Answer": "a.sukumaranrajam@wsu.edu", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Aravind Sukumaran Rajam', 'organization': 'Washington State University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_email = target_person_basic_info['email']\nfinal_result = target_person_email\n", "result": "a.sukumaranrajam@wsu.edu", "exe_time": 3.218412399291992}
{"Query_en": "Is Quanyu Dai in Network Embedding field male or female?", "Answer": "unknown", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Quanyu Dai', 'interest': 'Network Embedding'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_gender = target_person_basic_info['gender']\nfinal_result = target_person_gender\n", "result": "unknown", "exe_time": 3.1424741744995117}
{"Query_en": "What is the title of Gabriel Ilharco in Distribution Shift field?", "Answer": "Ph.D", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Gabriel Ilharco', 'interest': 'Distribution Shift'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_abstract = target_publication_info['abstract']\nfinal_result = target_abstract\n", "result": "  Fine-tuning pretrained contextual word embedding models to supervised downstream tasks has become commonplace in natural language processing. This process, however, is often brittle: even with the same hyperparameter values, distinct random seeds can lead to substantially different results. To better understand this phenomenon, we experiment with four datasets from the GLUE benchmark, fine-tuning BERT hundreds of times on each while varying only the random seeds. We find substantial performance increases compared to previously reported results, and we quantify how the performance of the best-found model varies as a function of the number of fine-tuning trials. Further, we examine two factors influenced by the choice of random seed: weight initialization and training data order. We find that both contribute comparably to the variance of out-of-sample performance, and that some weight initializations perform well across all tasks explored. On small datasets, we observe that many fine-tuning trials diverge part of the way through training, and we offer best practices for practitioners to stop training less promising runs early. We publicly release all of our experimental data, including training and validation scores for 2,100 trials, to encourage further analysis of training dynamics during fine-tuning. ", "exe_time": 4.282354354858398}
{"Query_en": "What is the introduction of Dawn Song in Security field?", "Answer": "Research Interests: Deep learning, security, and blockchain. Deep learning and program synthesis and analysis. Secure deep learning and artificial intelligence. Blockchain and decentralized systems. Computer security, privacy, and applied cryptography, including security and privacy issues in systems, software, networking, and databases. Using program analysis, algorithms design, and machine learning for security and privacy.<br>", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Dawn Song', 'interest': 'Security'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_bio = target_person_basic_info['bio']\nfinal_result = target_person_bio\n", "result": "Research Interests: Deep learning, security, and blockchain. Deep learning and program synthesis and analysis. Secure deep learning and artificial intelligence. Blockchain and decentralized systems. Computer security, privacy, and applied cryptography, including security and privacy issues in systems, software, networking, and databases. Using program analysis, algorithms design, and machine learning for security and privacy.<br>", "exe_time": 3.033940553665161}
{"Query_en": "What is the educational background of Yalou Huang in Data Mining field?", "Answer": "", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Yalou Huang', 'interest': 'Data Mining'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_education_experience = target_person_basic_info['education_experience']\nfinal_result = target_person_education_experience\n", "result": "", "exe_time": 3.470231056213379}
{"Query_en": "What is the email of Ani Nenkova in Computer Science field?", "Answer": "nenkova@adobe.com;nenkova@seas.upenn.edu", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Ani Nenkova', 'interest': 'Computer Science'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_email = target_person_basic_info['email']\nfinal_result = target_person_email\n", "result": "nenkova@adobe.com;nenkova@seas.upenn.edu", "exe_time": 3.11327862739563}
{"Query_en": "Who among the collaborators of Maxime Voisin at Splash are researching in Deep Learning field?", "Answer": ["Anand Avati", "Alireza Aliamiri", "Yichen (Eddie) Shen", "Awni Hannun", "Andrew Ng"], "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Maxime Voisin', 'organization': 'Splash'}\nname = info['name']\norganization = info['organization']\ntarget_interest = info['interest']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthor_list = getCoauthors(person_id = target_person_id)\n\ntarget_coauthor_names = []\nfor coauthor in coauthor_list:\n    coauthor_id = coauthor['person_id']\n    coauthor_interests_list = getPersonInterest(person_id = coauthor_id)\n    if target_interest in coauthor_interests_list:\n        target_coauthor_names.append(coauthor['name'])\n\nfinal_result = target_coauthor_names\n", "result": "exe error", "exe_time": 4.82761549949646}
{"Query_en": "Who has the highest citation count among the collaborators of Corinna Coupette at Max Planck Institute for Informatics?", "Answer": "Aristides Gionis", "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Corinna Coupette', 'organization': 'Max Planck Institute for Informatics'}\nname = info['name']\norganization = info['organization']\n\n# get specific person's information\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# get coauthors of the specific person\ncoauthors_list = getCoauthors(person_id = target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_citation = 0\nmax_citation_author_name = ''\n\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_citation = coauthor_info['num_citation']\n    if coauthor_citation > max_citation:\n        max_citation = coauthor_citation\n        max_citation_author_name = coauthor_info['name']\n\nfinal_result = max_citation_author_name\n", "result": "Aristides Gionis", "exe_time": 6.495500087738037}
{"Query_en": "Who has the most published papers among the collaborators of Yuval Shahar at Department of Information Systems Engineering, Faculty of Engineering Sciences, Ben-Gurion University of the Negev?", "Answer": "Nir Nissim", "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Yuval Shahar', 'organization': 'Department of Information Systems Engineering, Faculty of Engineering Sciences, Ben-Gurion University of the Negev'}\nname = info['name']\norganization = info['organization']\n\n# Search the person\nperson_list = searchPerson(name=name, organization=organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# Get the coauthors\ncoauthors_list = getCoauthors(person_id=target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_pubs = 0\nmax_pubs_author_name = ''\n\n# Iterate each coauthor and calculate his/her publication number\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_pubs = coauthor_info['num_pubs']\n    if coauthor_pubs > max_pubs:\n        max_pubs = coauthor_pubs\n        max_pubs_author_name = coauthor_info['name']\n\nfinal_result = max_pubs_author_name\n", "result": "Nir Nissim", "exe_time": 6.962617874145508}
{"Query_en": "Who among the collaborators of Patrick Thiran in Network Topology field are at School of Computer and Communication Sciences, Ecole Polytechnique Federale de Lausanneinstitution?", "Answer": ["Matthias Grossglauser"], "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Patrick Thiran', 'interest': 'Network Topology'}\nname = info['name']\ninterest = info['interest']\ntarget_organization = info['organization']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthor_list = getCoauthors(person_id = target_person_id)\n\ntarget_coauthor_names = []\nfor coauthor in coauthor_list:\n    coauthor_name = coauthor['name']\n    coauthor_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_list[0]\n    coauthor_organization = coauthor_info['organization']\n    if coauthor_organization == target_organization:\n        target_coauthor_names.append(coauthor['name'])\n\nfinal_result = target_coauthor_names\n", "result": "exe error", "exe_time": 5.215609073638916}
{"Query_en": "Who has the highest citation count among the collaborators of Huiwen Jia in Noncoding Rna field?", "Answer": "Xiaohu Qie", "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Huiwen Jia', 'interest': 'Noncoding Rna'}\nname = info['name']\ninterest = info['interest']\n\n# get specific person's information\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# Get the coauthors\ncoauthors_list = getCoauthors(person_id=target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_citation = 0\nmax_citation_author_name = ''\n\n# Iterate each coauthor and calculate his/her citation\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_citation = coauthor_info['num_citation']\n    if coauthor_citation > max_citation:\n        max_citation = coauthor_citation\n        max_citation_author_name = coauthor_info['name']\n\nfinal_result = max_citation_author_name\n", "result": "Xiaohu Qie", "exe_time": 6.619865655899048}
{"Query_en": "Who has the most published papers among the collaborators of Takato Honda in Time-series field?", "Answer": "Yasushi Sakurai", "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Takato Honda', 'interest': 'Time-series'}\nname = info['name']\ninterest = info['interest']\n\n# get specific person's information\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# Get the coauthors\ncoauthors_list = getCoauthors(person_id=target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_pubs = 0\nmax_pubs_author_name = ''\n\n# Iterate each coauthor and calculate his/her publication number\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_pubs = coauthor_info['num_pubs']\n    if coauthor_pubs > max_pubs:\n        max_pubs = coauthor_pubs\n        max_pubs_author_name = coauthor_info['name']\n\nfinal_result = max_pubs_author_name\n", "result": "Yasushi Sakurai", "exe_time": 6.5990986824035645}
{"Query_en": "Who are the collaborators of the collaborators of Hongyang Gao at Department of Computer Science, Iowa State University?", "Answer": ["Jieping Ye", "Zhengyang Wang", "Hao Yuan", "Meng Liu", "Hongyang Gao", "Yi Liu", "Lei Cai", "Limei Wang", "Yaochen (Ethan) Xie", "Xia \"Ben\" Hu", "Liang Sun", "Jie Wang", "Fan Yang", "Keqiang Yan", "Zhi-Hua Zhou", "Mengnan Du", "Ian N. Davidson", "Cheng Deng", "Shuiwang Ji", "Hongyang Gao", "Xianfeng Tang", "Hao Yuan", "Suhang Wang", "Yaochen (Ethan) Xie", "Limei Wang", "Limeng Cui", "Meng Liu", "Haoming Jiang", "Xia \"Ben\" Hu", "Yizhou Sun", "Xin Luna Dong", "Yu Wang", "Haoyu Wang", "Xiang Ren", "Yifan Ethan Xu", "Tianxin Wei", "Chenwei Zhang", "Lei Cai", "Hongzhi Wen", "Hengrui Zhang", "Yaqing Wang", "Tuo Zhao", "Bowen Jin", "Jiliang Tang", "Shuiwang Ji", "Limei Wang", "Meng Liu", "Hao Yuan", "Keqiang Yan", "Yaochen (Ethan) Xie", "Fan Yang", "Hongyang Gao", "Mengnan Du", "Shuiwang Ji", "Limei Wang", "Yaochen (Ethan) Xie", "Yi Liu", "Keqiang Yan", "Zhengyang Wang", "Hao Yuan", "Stefano Ermon", "Cheng Deng", "Jure Leskovec", "Tianfan Fu", "Rose Yu", "Hongyang Gao", "Nicholas Gao", "Tailin Wu", "Hong Yu", "Shuiwang Ji", "Shuiwang Ji", "Xia \"Ben\" Hu", "Zhengyang Wang", "Yi Liu", "Fan Yang", "Mengnan Du", "Lei Cai", "Jie Wang", "Limei Wang", "Meng Liu", "Yaochen (Ethan) Xie", "Hongyang Gao", "Keqiang Yan", "Jiliang Tang", "Cheng Deng"], "route": "searchPerson -> getCoauthors -> getCoauthors", "code": "info = {'name': 'Hongyang Gao', 'organization': 'Department of Computer Science, Iowa State University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors1_list = getCoauthors(person_id = target_person_id)\n\ncoauthors2_list = []\nfor coauthor in coauthors1_list:\n    coauthors2_list.extend(getCoauthors(person_id = coauthor['person_id']))\n\ncoauthors2_names = [coauthor['name'] for coauthor in coauthors2_list]\n\nfinal_result = coauthors2_names\n", "result": ["Jieping Ye", "Zhengyang Wang", "Hao Yuan", "Meng Liu", "Hongyang Gao", "Yi Liu", "Lei Cai", "Limei Wang", "Yaochen (Ethan) Xie", "Xia \"Ben\" Hu", "Liang Sun", "Jie Wang", "Fan Yang", "Keqiang Yan", "Zhi-Hua Zhou", "Mengnan Du", "Ian N. Davidson", "Cheng Deng", "Shuiwang Ji", "Hongyang Gao", "Xianfeng Tang", "Hao Yuan", "Suhang Wang", "Yaochen (Ethan) Xie", "Limei Wang", "Limeng Cui", "Meng Liu", "Haoming Jiang", "Xia \"Ben\" Hu", "Yizhou Sun", "Xin Luna Dong", "Yu Wang", "Haoyu Wang", "Xiang Ren", "Yifan Ethan Xu", "Tianxin Wei", "Chenwei Zhang", "Lei Cai", "Hongzhi Wen", "Hengrui Zhang", "Yaqing Wang", "Tuo Zhao", "Bowen Jin", "Jiliang Tang", "Shuiwang Ji", "Limei Wang", "Meng Liu", "Hao Yuan", "Keqiang Yan", "Yaochen (Ethan) Xie", "Fan Yang", "Hongyang Gao", "Mengnan Du", "Shuiwang Ji", "Limei Wang", "Yaochen (Ethan) Xie", "Yi Liu", "Keqiang Yan", "Zhengyang Wang", "Hao Yuan", "Stefano Ermon", "Cheng Deng", "Jure Leskovec", "Tianfan Fu", "Rose Yu", "Hongyang Gao", "Nicholas Gao", "Tailin Wu", "Hong Yu", "Shuiwang Ji", "Shuiwang Ji", "Xia \"Ben\" Hu", "Zhengyang Wang", "Yi Liu", "Fan Yang", "Mengnan Du", "Lei Cai", "Jie Wang", "Limei Wang", "Meng Liu", "Yaochen (Ethan) Xie", "Hongyang Gao", "Keqiang Yan", "Jiliang Tang", "Cheng Deng"], "exe_time": 4.54429292678833}
{"Query_en": "Who are the collaborators of the collaborators of Denizalp Goktas in Market Equilibrium field?", "Answer": ["Georgios Piliouras", "Shayegan Omidshafiei", "Maria Florina Balcan", "Shayegan Omidshafiei", "Luke Marris"], "route": "searchPerson -> getCoauthors -> getCoauthors", "code": "info = {'name': 'Denizalp Goktas', 'interest': 'Market Equilibrium'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors1_list = getCoauthors(person_id = target_person_id)\n\ncoauthors2_list = []\nfor coauthor in coauthors1_list:\n    coauthors2_list.extend(getCoauthors(person_id = coauthor['person_id']))\n\ncoauthors2_names = [coauthor['name'] for coauthor in coauthors2_list]\n\nfinal_result = coauthors2_names\n", "result": ["Georgios Piliouras", "Shayegan Omidshafiei", "Maria Florina Balcan", "Shayegan Omidshafiei", "Luke Marris"], "exe_time": 4.486236572265625}
{"Query_en": "What is the abstract of the representative work of Wenwu Zhu at Department of Computer Science and Technology, Tsinghua University?", "Answer": "Network embedding is an important method to learn low-dimensional representations of vertexes in networks, aiming to capture and preserve the network structure. Almost all the existing network embedding methods adopt shallow models. However, since the underlying network structure is complex, shallow models cannot capture the highly non-linear network structure, resulting in sub-optimal network representations. Therefore, how to find a method that is able to effectively capture the highly non-linear network structure and preserve the global and local structure is an open yet important problem. To solve this problem, in this paper we propose a Structural Deep Network Embedding method, namely SDNE. More specifically, we first propose a semi-supervised deep model, which has multiple layers of non-linear functions, thereby being able to capture the highly non-linear network structure. Then we propose to exploit the first-order and second-order proximity jointly to preserve the network structure. The second-order proximity is used by the unsupervised component to capture the global network structure. While the first-order proximity is used as the supervised information in the supervised component to preserve the local network structure. By jointly optimizing them in the semi-supervised deep model, our method can preserve both the local and global network structure and is robust to sparse networks. Empirically, we conduct the experiments on five real-world networks, including a language network, a citation network and three social networks. The results show that compared to the baselines, our method can reconstruct the original network significantly better and achieves substantial gains in three applications, i.e. multi-label classification, link prediction and visualization.", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Wenwu Zhu', 'organization': 'Department of Computer Science and Technology, Tsinghua University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_abstract = target_publication_info['abstract']\nfinal_result = target_abstract\n", "result": "Network embedding is an important method to learn low-dimensional representations of vertexes in networks, aiming to capture and preserve the network structure. Almost all the existing network embedding methods adopt shallow models. However, since the underlying network structure is complex, shallow models cannot capture the highly non-linear network structure, resulting in sub-optimal network representations. Therefore, how to find a method that is able to effectively capture the highly non-linear network structure and preserve the global and local structure is an open yet important problem. To solve this problem, in this paper we propose a Structural Deep Network Embedding method, namely SDNE. More specifically, we first propose a semi-supervised deep model, which has multiple layers of non-linear functions, thereby being able to capture the highly non-linear network structure. Then we propose to exploit the first-order and second-order proximity jointly to preserve the network structure. The second-order proximity is used by the unsupervised component to capture the global network structure. While the first-order proximity is used as the supervised information in the supervised component to preserve the local network structure. By jointly optimizing them in the semi-supervised deep model, our method can preserve both the local and global network structure and is robust to sparse networks. Empirically, we conduct the experiments on five real-world networks, including a language network, a citation network and three social networks. The results show that compared to the baselines, our method can reconstruct the original network significantly better and achieves substantial gains in three applications, i.e. multi-label classification, link prediction and visualization.", "exe_time": 4.490533828735352}
{"Query_en": "What is the PDF link of the representative work of Chen Ma at Institute of Materia Medica, Peking Union Medical College?", "Answer": "https://cz5waila03cyo0tux1owpyofgoryroob.oss-cn-beijing.aliyuncs.com/56/EC/B2/56ECB25F5B6739DCFF504DDDE04D913F.pdf", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Chen Ma', 'organization': 'Institute of Materia Medica, Peking Union Medical College'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_pdf = target_publication_info['pdf_link']\nfinal_result = target_pdf\n", "result": "https://cz5waila03cyo0tux1owpyofgoryroob.oss-cn-beijing.aliyuncs.com/56/EC/B2/56ECB25F5B6739DCFF504DDDE04D913F.pdf", "exe_time": 4.4972240924835205}
{"Query_en": "Which journal or conference included the representative work of Madelon Hulsebos at The HEINEKEN Company?", "Answer": {"info": {"name": "KDD"}, "issue": "", "volume": "abs/1905.10688"}, "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Madelon Hulsebos', 'organization': 'The HEINEKEN Company'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_venue = target_publication_info['venue']\nfinal_result = target_venue\n", "result": {"info": {"name": "KDD"}, "issue": "", "volume": "abs/1905.10688"}, "exe_time": 4.330309867858887}
{"Query_en": "What is the abstract of the representative work of Albert Bifet in Data Streams field?", "Answer": "Concept drift primarily refers to an online supervised learning scenario when the relation between the input data and the target variable changes over time. Assuming a general knowledge of supervised learning in this article, we characterize adaptive learning processes; categorize existing strategies for handling concept drift; overview the most representative, distinct, and popular techniques and algorithms; discuss evaluation methodology of adaptive algorithms; and present a set of illustrative applications. The survey covers the different facets of concept drift in an integrated way to reflect on the existing scattered state of the art. Thus, it aims at providing a comprehensive introduction to the concept drift adaptation for researchers, industry analysts, and practitioners.", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Albert Bifet', 'interest': 'Data Streams'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_abstract = target_publication_info['abstract']\nfinal_result = target_abstract\n", "result": "Concept drift primarily refers to an online supervised learning scenario when the relation between the input data and the target variable changes over time. Assuming a general knowledge of supervised learning in this article, we characterize adaptive learning processes; categorize existing strategies for handling concept drift; overview the most representative, distinct, and popular techniques and algorithms; discuss evaluation methodology of adaptive algorithms; and present a set of illustrative applications. The survey covers the different facets of concept drift in an integrated way to reflect on the existing scattered state of the art. Thus, it aims at providing a comprehensive introduction to the concept drift adaptation for researchers, industry analysts, and practitioners.", "exe_time": 4.243431329727173}
{"Query_en": "What is the PDF link of the representative work of Vladimir R. Kostic in Wireless Sensor Networks field?", "Answer": "https://cz5waila03cyo0tux1owpyofgoryroob.oss-cn-beijing.aliyuncs.com/A7/DD/DC/A7DDDCA7D76EECA9008ED964227685AC.pdf", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Vladimir R. Kostic', 'interest': 'Wireless Sensor Networks'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_pdf = target_publication_info['pdf_link']\nfinal_result = target_pdf\n", "result": "https://cz5waila03cyo0tux1owpyofgoryroob.oss-cn-beijing.aliyuncs.com/A7/DD/DC/A7DDDCA7D76EECA9008ED964227685AC.pdf", "exe_time": 4.410888195037842}
{"Query_en": "Which journal or conference included the representative work of Ebrahim Bagheri in Feature Model field?", "Answer": {"id": "556a87ae240167ab39031703", "info": {"name": "Ottawa, ON", "name_zh": ""}, "issue": "", "type": 1, "volume": ""}, "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Ebrahim Bagheri', 'interest': 'Feature Model'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_venue = target_publication_info['venue']\nfinal_result = target_venue\n", "result": {"id": "556a87ae240167ab39031703", "info": {"name": "Ottawa, ON", "name_zh": ""}, "issue": "", "type": 1, "volume": ""}, "exe_time": 4.246614217758179}
