{"Query_en": "Research interests of Pulcrano Salvatore at Amazon", "Answer": ["Bayesian Optimization", "Scalable Hyperparameter Transfer Learning", "Algorithmic Complexity", "Transfer Learning", "Hyperparameter Optimization", "Common Practice", "Proposed Method", "Gaussian Process", "Neural Net", "Box Function"], "route": "searchPerson", "code": "info = {'name': 'Pulcrano Salvatore', 'organization': 'Amazon'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ninterests = target_person_info['interests']\nfinal_result = interests\n", "result": ["Bayesian Optimization", "Scalable Hyperparameter Transfer Learning", "Algorithmic Complexity", "Transfer Learning", "Hyperparameter Optimization", "Common Practice", "Proposed Method", "Gaussian Process", "Neural Net", "Box Function"], "exe_time": 2.0727107524871826}
{"Query_en": "Citation count of Valerii Likhosherstov at Department of Engineering, University of Cambridge", "Answer": 985, "route": "searchPerson", "code": "info = {'name': 'Valerii Likhosherstov', 'organization': 'Department of Engineering, University of Cambridge'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\nnum_citation = target_person_info['num_citation']\nfinal_result = num_citation\n", "result": 985, "exe_time": 2.388225555419922}
{"Query_en": "Number of published papers by Mahito Sugiyama at National Institute of Informatics", "Answer": 48, "route": "searchPerson", "code": "info = {'name': 'Mahito Sugiyama', 'organization': 'National Institute of Informatics'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\nnum_pubs = target_person_info['num_pubs']\nfinal_result = num_pubs\n", "result": 48, "exe_time": 2.263409376144409}
{"Query_en": "Which institution does Takeru Miyato who researches in Takeru Miyato field belong to?", "Answer": "Autonomous Vision Group, University of Tübingen", "route": "searchPerson", "code": "info = {'name': 'Takeru Miyato', 'interest': 'Takeru Miyato'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\norganization = target_person_info['organization']\nfinal_result = organization\n", "result": "Autonomous Vision Group, University of Tübingen", "exe_time": 2.1232612133026123}
{"Query_en": "Citation count of Zhiqi Bu who researches in Sorted ℓ₁ Regression field", "Answer": 272, "route": "searchPerson", "code": "info = {'name': 'Zhiqi Bu', 'interest': 'Sorted ℓ₁ Regression'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\nnum_citation = target_person_info['num_citation']\nfinal_result = num_citation\n", "result": 272, "exe_time": 2.2424967288970947}
{"Query_en": "Number of papers published by Shiqi Wu who researches in Behavior Pattern field", "Answer": 5, "route": "searchPerson", "code": "info = {'name': 'Shiqi Wu', 'interest': 'Behavior Pattern'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\nnum_pubs = target_person_info['num_pubs']\nfinal_result = num_pubs\n", "result": 5, "exe_time": 2.141561269760132}
{"Query_en": "Who are the researchers at Department of Computer Science, University of California, Santa Cruz?", "Answer": ["S. V. N. Vishwanathan", "Noujan Pashanasangi"], "route": "searchPerson", "code": "info = {'organization': 'Department of Computer Science, University of California, Santa Cruz'}\norganization = info['organization']\n\nperson_list = searchPerson(organization = organization)\nname_list = [person_list[i]['name'] for i in range(len(person_list))]\nfinal_result = name_list\n", "result": ["S. V. N. Vishwanathan", "Noujan Pashanasangi"], "exe_time": 1.8660941123962402}
{"Query_en": "Who are the researchers in Prototypical Parts field?", "Answer": ["Dawid Rymarczyk"], "route": "searchPerson", "code": "info = {'interest': 'Prototypical Parts'}\ninterest = info['interest']\n\nperson_list = searchPerson(interest = interest)\nname_list = [person_list[i]['name'] for i in range(len(person_list))]\nfinal_result = name_list\n", "result": ["Dawid Rymarczyk"], "exe_time": 1.7252135276794434}
{"Query_en": "Who are the collaborators of Johan Larsson at Department of Statistics, Lund University?", "Answer": ["Binh T. Nguyen", "Mathieu Dagréou", "Thomas Moreau"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Johan Larsson', 'organization': 'Department of Statistics, Lund University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\ncoauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\nfinal_result = coauthors_name_list\n", "result": ["Binh T. Nguyen", "Mathieu Dagréou", "Thomas Moreau"], "exe_time": 3.368459463119507}
{"Query_en": "Who are the collaborators of Dantong Yu in Deep Learning field?", "Answer": ["Aidong Zhang", "Shibo Yao", "Ian T. Foster"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Dantong Yu', 'interest': 'Deep Learning'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\ncoauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\nfinal_result = coauthors_name_list\n", "result": ["Aidong Zhang", "Shibo Yao", "Ian T. Foster"], "exe_time": 3.2512569427490234}
{"Query_en": "Who at Toyota Technological Institute at Chicago has a collaboration with Omar Montasser?", "Answer": ["Avrim Blum", "Han Shao"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Omar Montasser', 'organization': 'Toyota Technological Institute at Chicago'}\norganization = info['organization']\nname = info['name']\n\norganization_person_list = searchPerson(organization = organization)\norganization_person_id_list = [person['person_id'] for person in organization_person_list]\ntarget_list = []\nfor interest_person_id in organization_person_id_list:\n    coauthors = getCoauthors(person_id = interest_person_id)\n    coauthor_name_list = [coauthor['name'] for coauthor in coauthors]\n    if name in coauthor_name_list:\n        target_list.append(getPersonBasicInfo(person_id=interest_person_id)['name'])\nfinal_result = target_list\n", "result": ["Avrim Blum", "Han Shao"], "exe_time": 4.348140478134155}
{"Query_en": "Who in Active Learning field has a collaboration with Shengjun Huang?", "Answer": ["Zhi-Hua Zhou"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Shengjun Huang', 'interest': 'Active Learning'}\ninterest = info['interest']\nname = info['name']\n\ninterest_person_list = searchPerson(interest = interest)\ninterest_person_id_list = [person['person_id'] for person in interest_person_list]\ntarget_list = []\nfor interest_person_id in interest_person_id_list:\n    coauthors = getCoauthors(person_id = interest_person_id)\n    coauthor_name_list = [coauthor['name'] for coauthor in coauthors]\n    if name in coauthor_name_list:\n        target_list.append(getPersonBasicInfo(person_id=interest_person_id)['name'])\nfinal_result = target_list\n", "result": ["Zhi-Hua Zhou"], "exe_time": 4.263524532318115}
{"Query_en": "What are the papers published by Marton Havasi at Data to Actionable Knowledge Lab, School of Engineering and Applied Sciences, Harvard University?", "Answer": ["Training independent subnetworks for robust prediction", "Inference in Deep Gaussian Processes using Stochastic Gradient Hamiltonian Monte Carlo.", "Minimal Random Code Learning: Getting Bits Back from Compressed Model Parameters.", "Compressing Images by Encoding Their Latent Representations with  Relative Entropy Coding", "Addressing Leakage in Concept Bottleneck Models", "Uncertainty Baselines: Benchmarks for Uncertainty & Robustness in Deep  Learning", "Determining Optimal Coherency Interface for Many-Accelerator SoCs Using Bayesian Optimization", "A comprehensive methodology to determine optimal coherence interfaces for many-accelerator SoCs", "Refining the variational posterior through iterative optimization", "Compression without Quantization"], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Marton Havasi', 'organization': 'Data to Actionable Knowledge Lab, School of Engineering and Applied Sciences, Harvard University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\npublications_title_list = [publication['title'] for publication in publications_list]\nfinal_result = publications_title_list\n", "result": ["Training independent subnetworks for robust prediction", "Inference in Deep Gaussian Processes using Stochastic Gradient Hamiltonian Monte Carlo.", "Minimal Random Code Learning: Getting Bits Back from Compressed Model Parameters.", "Compressing Images by Encoding Their Latent Representations with  Relative Entropy Coding", "Addressing Leakage in Concept Bottleneck Models", "Uncertainty Baselines: Benchmarks for Uncertainty & Robustness in Deep  Learning", "Determining Optimal Coherency Interface for Many-Accelerator SoCs Using Bayesian Optimization", "A comprehensive methodology to determine optimal coherence interfaces for many-accelerator SoCs", "Refining the variational posterior through iterative optimization", "Compression without Quantization"], "exe_time": 3.5934901237487793}
{"Query_en": "What is the citation count of the representative work of Itaru Nishioka at Deloitte Touche Tohmatsu LLC?", "Answer": 51, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Itaru Nishioka', 'organization': 'Deloitte Touche Tohmatsu LLC'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\n# Assuming the representative work is the one with the most citations\n# The list was sorted by citation\nmax_citation = publications_list[0]\nfinal_result = max_citation['num_citation']\n", "result": 51, "exe_time": 3.801886796951294}
{"Query_en": "In which year was the representative work of Yungui Huang at Nationwide Children's Hospital published?", "Answer": 2020, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Yungui Huang', 'organization': \"Nationwide Children's Hospital\"}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\nmax_citation = publications_list[0]\nfinal_result = max_citation['num_citation']\n", "result": 301, "exe_time": 3.317965269088745}
{"Query_en": "Who are the authors of the representative work of Yu Zhang at University of Illinois at Urbana-Champaign?", "Answer": ["Xuan Wang", "Yu Zhang", "Xiang Ren", "Yuhao Zhang", "Marinka Zitnik", "Jingbo Shang", "Curtis Langlotz", "Jiawei Han"], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Yu Zhang', 'organization': 'University of Illinois at Urbana-Champaign'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\nmax_citation = publications_list[0]\nfinal_result = max_citation['year']\n", "result": 2019, "exe_time": 3.3425979614257812}
{"Query_en": "What are the papers published by Konstantinos Sotiropoulos in Community Detection field?", "Answer": ["Node Embeddings and Exact Low-Rank Representations of Complex Networks", "Triangle-aware Spectral Sparsifiers and Community Detection", "DeepWalking Backwards: From Embeddings Back to Graphs", "Hyperbolic Embedding for Efficient Computation of Path Centralities and Adaptive Routing in Large-Scale Complex Commodity Networks.", "On the Power of Edge Independent Graph Models.", "TwitterMancer: Predicting Interactions on Twitter Accurately.", "Hyperbolic Traffic Load Centrality for large-scale complex communications networks", "TwitterMancer - Predicting User Interactions on Twitter.", "Enhancing Community Detection for Big Sensor Data Clustering via Hyperbolic Network Embedding"], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Konstantinos Sotiropoulos', 'interest': 'Community Detection'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name=name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\npublications_title_list = [publication['title'] for publication in publications_list]\nfinal_result = publications_title_list\n", "result": ["Node Embeddings and Exact Low-Rank Representations of Complex Networks", "Triangle-aware Spectral Sparsifiers and Community Detection", "DeepWalking Backwards: From Embeddings Back to Graphs", "Hyperbolic Embedding for Efficient Computation of Path Centralities and Adaptive Routing in Large-Scale Complex Commodity Networks.", "On the Power of Edge Independent Graph Models.", "TwitterMancer: Predicting Interactions on Twitter Accurately.", "Hyperbolic Traffic Load Centrality for large-scale complex communications networks", "TwitterMancer - Predicting User Interactions on Twitter.", "Enhancing Community Detection for Big Sensor Data Clustering via Hyperbolic Network Embedding"], "exe_time": 3.2798984050750732}
{"Query_en": "What is the citation count of the representative work of Lue Tao in Parallel Algorithm field?", "Answer": 40, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Lue Tao', 'interest': 'Parallel Algorithm'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_num_citation = target_publication_dict['num_citation']\nfinal_result = target_num_citation\n", "result": 40, "exe_time": 3.6772382259368896}
{"Query_en": "In which year was the representative work of Shanshan Zhang in Attribute-based Encryption field published?", "Answer": 2018, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Shanshan Zhang', 'interest': 'Attribute-based Encryption'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_num_citation = target_publication_dict['num_citation']\nfinal_result = target_num_citation\n", "result": 158, "exe_time": 3.7385447025299072}
{"Query_en": "Who are the authors of the representative work of Kazuki Osawa in Deep Learning field?", "Answer": ["Kazuki Osawa", "Siddharth Swaroop", "Anirudh Jain", "Runa Eschenhagen", "Richard E. Turner", "Rio Yokota", "Mohammad Emtiyaz Khan"], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Kazuki Osawa', 'interest': 'Deep Learning'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\nauthor_name_list = target_publication_dict['authors_name_list']\nfinal_result = author_name_list\n", "result": ["Kazuki Osawa", "Siddharth Swaroop", "Anirudh Jain", "Runa Eschenhagen", "Richard E. Turner", "Rio Yokota", "Mohammad Emtiyaz Khan"], "exe_time": 3.693880558013916}
{"Query_en": "Is Chuishi Meng at Department of Computer Science and Engineering, State University of New York at Buffalo male or female?", "Answer": "male", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Chuishi Meng', 'organization': 'Department of Computer Science and Engineering, State University of New York at Buffalo'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_gender = target_person_basic_info['gender']\nfinal_result = target_person_gender\n", "result": "male", "exe_time": 3.4021759033203125}
{"Query_en": "What is the title of Bing Liu at Department of Computer Science, College of Engineering, University of Illinois at Chicago?", "Answer": "Distinguished Professor", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Bing Liu', 'organization': 'Department of Computer Science, College of Engineering, University of Illinois at Chicago'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_position = target_person_basic_info['position']\nfinal_result = target_person_position\n", "result": "Distinguished Professor", "exe_time": 3.3616232872009277}
{"Query_en": "What is the introduction of Yi Wang at School of Mathematical Sciences, USTC?", "Answer": "Research Interest:  Differential Equations &amp; Dynamical Systems;Mathematical Biology", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Yi Wang', 'organization': 'School of Mathematical Sciences, USTC'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_bio = target_person_basic_info['bio']\nfinal_result = target_person_bio\n", "result": "Research Interest:  Differential Equations &amp; Dynamical Systems;Mathematical Biology", "exe_time": 3.2193996906280518}
{"Query_en": "What is the educational background of James Bailey at School of Computing and Information Systems, The University of Melbourne?", "Answer": "", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'James Bailey', 'organization': 'School of Computing and Information Systems, The University of Melbourne'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_education_experience = target_person_basic_info['education_experience']\nfinal_result = target_person_education_experience\n", "result": "", "exe_time": 3.6368870735168457}
{"Query_en": "What is the email of Zhe Lin at Adobe Systems Incorporated?", "Answer": "zlin@adobe.com;limcher2001@gmail.com", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Zhe Lin', 'organization': 'Adobe Systems Incorporated'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_email = target_person_basic_info['email']\nfinal_result = target_person_email\n", "result": "zlin@adobe.com;limcher2001@gmail.com", "exe_time": 3.1640701293945312}
{"Query_en": "Is Limeng Cui in Fake News field male or female?", "Answer": "female", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Limeng Cui', 'interest': 'Fake News'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_gender = target_person_basic_info['gender']\nfinal_result = target_person_gender\n", "result": "female", "exe_time": 3.1214370727539062}
{"Query_en": "What is the title of Laurent Meunier in Benchmarking field?", "Answer": "Ph.D", "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Laurent Meunier', 'interest': 'Benchmarking'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_num_citation = target_publication_dict['num_citation']\nfinal_result = target_num_citation\n", "result": 75, "exe_time": 3.6986546516418457}
{"Query_en": "What is the introduction of Mahdi Hajiabadi in Feature Extraction field?", "Answer": "Mahdi’s research is about using graph theory algorithms, data mining and machine learning in order to analyze biological data. In particular, it focuses on summarizing/clustering biological data which is useful in many areas such as noise reduction, extracting hidden information, and visualization.", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Mahdi\\xa0Hajiabadi', 'interest': 'Feature Extraction'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_bio = target_person_basic_info['bio']\nfinal_result = target_person_bio\n", "result": "Mahdi’s research is about using graph theory algorithms, data mining and machine learning in order to analyze biological data. In particular, it focuses on summarizing/clustering biological data which is useful in many areas such as noise reduction, extracting hidden information, and visualization.", "exe_time": 3.236020803451538}
{"Query_en": "What is the educational background of Alyssa Lees in Encoders field?", "Answer": "Brown University\nBachelor of Science (B.Sc.), Mathematics and Statistics\n1997 - 2001\nNew York University\nDoctor of Philosophy - PhD, Mathematics and Computer Science\n2001 - 2006", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Alyssa\\xa0Lees', 'interest': 'Encoders'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_education_experience = target_person_basic_info['education_experience']\nfinal_result = target_person_education_experience\n", "result": "Brown University\nBachelor of Science (B.Sc.), Mathematics and Statistics\n1997 - 2001\nNew York University\nDoctor of Philosophy - PhD, Mathematics and Computer Science\n2001 - 2006", "exe_time": 3.5511107444763184}
{"Query_en": "What is the email of Takashi Washio in Data Mining field?", "Answer": "washio@ar.sanken.osaka-u.ac.jp", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Takashi Washio', 'interest': 'Data Mining'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_email = target_person_basic_info['email']\nfinal_result = target_person_email\n", "result": "washio@ar.sanken.osaka-u.ac.jp", "exe_time": 3.1425042152404785}
{"Query_en": "Who among the collaborators of Lampros Kourtis at Circadic are researching in Cognitive Impairment field?", "Answer": ["Hyun Joon Jung", "Han Hee Song", "Marc Sunga", "Roy Yaari", "Jie Shen", "Melissa Pugh", " Alessio Signorini", "Luca Foschini", "Nikki Marinsek", "Filip Jankovic", "Andrew D. Trister"], "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Lampros Kourtis', 'organization': 'Circadic'}\nname = info['name']\norganization = info['organization']\ntarget_interest = info['interest']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthor_list = getCoauthors(person_id = target_person_id)\n\ntarget_coauthor_names = []\nfor coauthor in coauthor_list:\n    coauthor_id = coauthor['person_id']\n    coauthor_interests_list = getPersonInterest(person_id = coauthor_id)\n    if target_interest in coauthor_interests_list:\n        target_coauthor_names.append(coauthor['name'])\n\nfinal_result = target_coauthor_names\n", "result": "exe error", "exe_time": 4.846618890762329}
{"Query_en": "Who has the highest citation count among the collaborators of Yuanyu Wan at School of Software Technology, Zhejiang University?", "Answer": "Longbing Cao", "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Yuanyu Wan', 'organization': 'School of Software Technology, Zhejiang University'}\nname = info['name']\norganization = info['organization']\n\n# get specific person's information\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# get coauthors of the specific person\ncoauthors_list = getCoauthors(person_id = target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_citation = 0\nmax_citation_author_name = ''\n\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_citation = coauthor_info['num_citation']\n    if coauthor_citation > max_citation:\n        max_citation = coauthor_citation\n        max_citation_author_name = coauthor_info['name']\n\nfinal_result = max_citation_author_name\n", "result": "Longbing Cao", "exe_time": 6.536762714385986}
{"Query_en": "Who has the most published papers among the collaborators of Dugang Liu at Guangdong Laboratory of Artificial Intelligence and Digital Economy, Shenzhen University?", "Answer": "Hanghang Tong", "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Dugang Liu', 'organization': 'Guangdong Laboratory of Artificial Intelligence and Digital Economy, Shenzhen University'}\nname = info['name']\norganization = info['organization']\n\n# Search the person\nperson_list = searchPerson(name=name, organization=organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# Get the coauthors\ncoauthors_list = getCoauthors(person_id=target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_pubs = 0\nmax_pubs_author_name = ''\n\n# Iterate each coauthor and calculate his/her publication number\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_pubs = coauthor_info['num_pubs']\n    if coauthor_pubs > max_pubs:\n        max_pubs = coauthor_pubs\n        max_pubs_author_name = coauthor_info['name']\n\nfinal_result = max_pubs_author_name\n", "result": "Hanghang Tong", "exe_time": 6.90938401222229}
{"Query_en": "Who among the collaborators of Mohammad Hossein Namaki in Data Provenance field are at Microsoftinstitution?", "Answer": ["Subru Krishnan", "Ashvin Agrawal", "Avrilia Floratou", "Fotis Psallidas", "Yiwen Zhu"], "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Mohammad Hossein Namaki', 'interest': 'Data Provenance'}\nname = info['name']\ninterest = info['interest']\ntarget_organization = info['organization']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthor_list = getCoauthors(person_id = target_person_id)\n\ntarget_coauthor_names = []\nfor coauthor in coauthor_list:\n    coauthor_name = coauthor['name']\n    coauthor_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_list[0]\n    coauthor_organization = coauthor_info['organization']\n    if coauthor_organization == target_organization:\n        target_coauthor_names.append(coauthor['name'])\n\nfinal_result = target_coauthor_names\n", "result": "exe error", "exe_time": 5.29714822769165}
{"Query_en": "Who has the highest citation count among the collaborators of Jie-Jing Shao in Semi-supervised Learning field?", "Answer": "Yufeng Li", "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Jie-Jing Shao', 'interest': 'Semi-supervised Learning'}\nname = info['name']\ninterest = info['interest']\n\n# get specific person's information\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# Get the coauthors\ncoauthors_list = getCoauthors(person_id=target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_citation = 0\nmax_citation_author_name = ''\n\n# Iterate each coauthor and calculate his/her citation\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_citation = coauthor_info['num_citation']\n    if coauthor_citation > max_citation:\n        max_citation = coauthor_citation\n        max_citation_author_name = coauthor_info['name']\n\nfinal_result = max_citation_author_name\n", "result": "Yufeng Li", "exe_time": 6.675275564193726}
{"Query_en": "Who has the most published papers among the collaborators of Penghui Wei in Personalized Bundle Creative Generation field?", "Answer": "Bo Zheng", "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Penghui Wei', 'interest': 'Personalized Bundle Creative Generation'}\nname = info['name']\ninterest = info['interest']\n\n# get specific person's information\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# Get the coauthors\ncoauthors_list = getCoauthors(person_id=target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_pubs = 0\nmax_pubs_author_name = ''\n\n# Iterate each coauthor and calculate his/her publication number\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_pubs = coauthor_info['num_pubs']\n    if coauthor_pubs > max_pubs:\n        max_pubs = coauthor_pubs\n        max_pubs_author_name = coauthor_info['name']\n\nfinal_result = max_pubs_author_name\n", "result": "Bo Zheng", "exe_time": 6.626296758651733}
{"Query_en": "Who are the collaborators of the collaborators of Luis Salazar at Giving Tech Labs?", "Answer": ["Luis Salazar", "Xing Xie", "Daniel Zhu", "Jirong Wen", "Vitalii Zakhozhyi", "Luis Salazar", "Daniel Zhu", "Ying Li", "Luis Salazar", "Abraham Miller", "Ying Li", "Luis Salazar", "Arthur Liu", "Ying Li", "Ying Li", "Luis Salazar", "Vitalii Zakhozhyi"], "route": "searchPerson -> getCoauthors -> getCoauthors", "code": "info = {'name': 'Luis Salazar', 'organization': 'Giving Tech Labs'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors1_list = getCoauthors(person_id = target_person_id)\n\ncoauthors2_list = []\nfor coauthor in coauthors1_list:\n    coauthors2_list.extend(getCoauthors(person_id = coauthor['person_id']))\n\ncoauthors2_names = [coauthor['name'] for coauthor in coauthors2_list]\n\nfinal_result = coauthors2_names\n", "result": ["Luis Salazar", "Xing Xie", "Daniel Zhu", "Jirong Wen", "Vitalii Zakhozhyi", "Luis Salazar", "Daniel Zhu", "Ying Li", "Luis Salazar", "Abraham Miller", "Ying Li", "Luis Salazar", "Arthur Liu", "Ying Li", "Ying Li", "Luis Salazar", "Vitalii Zakhozhyi"], "exe_time": 4.423436641693115}
{"Query_en": "Who are the collaborators of the collaborators of Ming Shao in Face Recognition field?", "Answer": ["Ming Shao", "Zhengming (Allan) Ding", "Sheng Li", "Yulun Zhang", "Hongfu Liu", "Zhiqiang Tao", "Can Qin", "Handong Zhao", "Yue Wu", "Yue Bai", "Huan Wang", "Liangyue Li", "Yun Raymond Fu", "Ming Shao", "Hongfu Liu", "Sheng Li", "Zhiqiang Tao", "Jiahua Dong", "Handong Zhao", "Yun Raymond Fu", "Zhixuan Chu", "Zhiqiang Tao", "Zhao Zhang", "Ming Shao", "Handong Zhao", "Yaliang Li", "Zhengming (Allan) Ding", "Chao Lan", "Liuyi Yao", "Jing Gao", "Hongfu Liu", "Yue Bai", "Aidong Zhang", "Mengdi Huai", "Xiaowei Jia", "Yun Raymond Fu", "Zhengming (Allan) Ding", "Zhiqiang Tao", "Junjie Wu", "Yue Wu", "Ming Shao", "Sheng Li", "Han Yue", "Handong Zhao", "Jie Cao", "Dacheng Tao", "Chuxu Zhang", "Jundong Li", "Yulun Zhang", "Hui Xiong", "Tongliang Liu", "Kun Yuan", "Anshuman Chhabra", "Yun Raymond Fu", "Hongfu Liu", "Ming Shao", "Hongzhi Li", "Zhiqiang Tao", "Zhengming (Allan) Ding", "Handong Zhao", "Yun Raymond Fu", "Ryan Anthony Rossi", "Sheng Li", "Jiuxiang Gu", "Sungchul Kim", "Zhe Lin", "Xiaochun Cao", "Ani Nenkova", "Hongfu Liu", "Ajinkya Kale", "Zhiqiang Tao", "Yulun Zhang", "Zhengming (Allan) Ding", "Ming Shao", "Eunyee Koh", "Yikun Xian", "Xiang Ren", "Hanghang Tong", "Yun Raymond Fu", "Ming Shao", "Sheng Li", "Jie Tang", "Yanghua Xiao", "Zhe Xu", "Bijaya Adhikari", "Jia Xu", "Boxin Du", "Huan Liu", "Jaewon Yang", "Yuan Yao", "Feiping Nie", "Huamin Qu", "Qi He"], "route": "searchPerson -> getCoauthors -> getCoauthors", "code": "info = {'name': 'Ming Shao', 'interest': 'Face Recognition'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors1_list = getCoauthors(person_id = target_person_id)\n\ncoauthors2_list = []\nfor coauthor in coauthors1_list:\n    coauthors2_list.extend(getCoauthors(person_id = coauthor['person_id']))\n\ncoauthors2_names = [coauthor['name'] for coauthor in coauthors2_list]\n\nfinal_result = coauthors2_names\n", "result": ["Ming Shao", "Zhengming (Allan) Ding", "Sheng Li", "Yulun Zhang", "Hongfu Liu", "Zhiqiang Tao", "Can Qin", "Handong Zhao", "Yue Wu", "Yue Bai", "Huan Wang", "Liangyue Li", "Yun Raymond Fu", "Ming Shao", "Hongfu Liu", "Sheng Li", "Zhiqiang Tao", "Jiahua Dong", "Handong Zhao", "Yun Raymond Fu", "Zhixuan Chu", "Zhiqiang Tao", "Zhao Zhang", "Ming Shao", "Handong Zhao", "Yaliang Li", "Zhengming (Allan) Ding", "Chao Lan", "Liuyi Yao", "Jing Gao", "Hongfu Liu", "Yue Bai", "Aidong Zhang", "Mengdi Huai", "Xiaowei Jia", "Yun Raymond Fu", "Zhengming (Allan) Ding", "Zhiqiang Tao", "Junjie Wu", "Yue Wu", "Ming Shao", "Sheng Li", "Han Yue", "Handong Zhao", "Jie Cao", "Dacheng Tao", "Chuxu Zhang", "Jundong Li", "Yulun Zhang", "Hui Xiong", "Tongliang Liu", "Kun Yuan", "Anshuman Chhabra", "Yun Raymond Fu", "Hongfu Liu", "Ming Shao", "Hongzhi Li", "Zhiqiang Tao", "Zhengming (Allan) Ding", "Handong Zhao", "Yun Raymond Fu", "Ryan Anthony Rossi", "Sheng Li", "Jiuxiang Gu", "Sungchul Kim", "Zhe Lin", "Xiaochun Cao", "Ani Nenkova", "Hongfu Liu", "Ajinkya Kale", "Zhiqiang Tao", "Yulun Zhang", "Zhengming (Allan) Ding", "Ming Shao", "Eunyee Koh", "Yikun Xian", "Xiang Ren", "Hanghang Tong", "Yun Raymond Fu", "Ming Shao", "Sheng Li", "Jie Tang", "Yanghua Xiao", "Zhe Xu", "Bijaya Adhikari", "Jia Xu", "Boxin Du", "Huan Liu", "Jaewon Yang", "Yuan Yao", "Feiping Nie", "Huamin Qu", "Qi He"], "exe_time": 4.3830039501190186}
{"Query_en": "What is the abstract of the representative work of Jessica Lin at Department of Computer Science, George Mason University?", "Answer": "The parallel explosions of interest in streaming data, and data mining of time series have had surprisingly little intersection. This is in spite of the fact that time series data are typically streaming data. The main reason for this apparent paradox is the fact that the vast majority of work on streaming data explicitly assumes that the data is discrete, whereas the vast majority of time series data is real valued.Many researchers have also considered transforming real valued time series into symbolic representations, nothing that such representations would potentially allow researchers to avail of the wealth of data structures and algorithms from the text processing and bioinformatics communities, in addition to allowing formerly \"batch-only\" problems to be tackled by the streaming community. While many symbolic representations of time series have been introduced over the past decades, they all suffer from three fatal flaws. Firstly, the dimensionality of the symbolic representation is the same as the original data, and virtually all data mining algorithms scale poorly with dimensionality. Secondly, although distance measures can be defined on the symbolic approaches, these distance measures have little correlation with distance measures defined on the original time series. Finally, most of these symbolic approaches require one to have access to all the data, before creating the symbolic representation. This last feature explicitly thwarts efforts to use the representations with streaming algorithms.In this work we introduce a new symbolic representation of time series. Our representation is unique in that it allows dimensionality/numerosity reduction, and it also allows distance measures to be defined on the symbolic approach that lower bound corresponding distance measures defined on the original series. As we shall demonstrate, this latter feature is particularly exciting because it allows one to run certain data mining algorithms on the efficiently manipulated symbolic representation, while producing identical results to the algorithms that operate on the original data. Finally, our representation allows the real valued data to be converted in a streaming fashion, with only an infinitesimal time and space overhead.We will demonstrate the utility of our representation on the classic data mining tasks of clustering, classification, query by content and anomaly detection.", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Jessica Lin', 'organization': 'Department of Computer Science, George Mason University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_abstract = target_publication_info['abstract']\nfinal_result = target_abstract\n", "result": "The parallel explosions of interest in streaming data, and data mining of time series have had surprisingly little intersection. This is in spite of the fact that time series data are typically streaming data. The main reason for this apparent paradox is the fact that the vast majority of work on streaming data explicitly assumes that the data is discrete, whereas the vast majority of time series data is real valued.Many researchers have also considered transforming real valued time series into symbolic representations, nothing that such representations would potentially allow researchers to avail of the wealth of data structures and algorithms from the text processing and bioinformatics communities, in addition to allowing formerly \"batch-only\" problems to be tackled by the streaming community. While many symbolic representations of time series have been introduced over the past decades, they all suffer from three fatal flaws. Firstly, the dimensionality of the symbolic representation is the same as the original data, and virtually all data mining algorithms scale poorly with dimensionality. Secondly, although distance measures can be defined on the symbolic approaches, these distance measures have little correlation with distance measures defined on the original time series. Finally, most of these symbolic approaches require one to have access to all the data, before creating the symbolic representation. This last feature explicitly thwarts efforts to use the representations with streaming algorithms.In this work we introduce a new symbolic representation of time series. Our representation is unique in that it allows dimensionality/numerosity reduction, and it also allows distance measures to be defined on the symbolic approach that lower bound corresponding distance measures defined on the original series. As we shall demonstrate, this latter feature is particularly exciting because it allows one to run certain data mining algorithms on the efficiently manipulated symbolic representation, while producing identical results to the algorithms that operate on the original data. Finally, our representation allows the real valued data to be converted in a streaming fashion, with only an infinitesimal time and space overhead.We will demonstrate the utility of our representation on the classic data mining tasks of clustering, classification, query by content and anomaly detection.", "exe_time": 4.362144231796265}
{"Query_en": "What is the PDF link of the representative work of Chen Li at Department of Computer Science, National University of Singapore?", "Answer": "https://static.aminer.cn/upload/pdf/program/5cede0e7da562983788c6339_0.pdf", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Chen Li', 'organization': 'Department of Computer Science, National University of Singapore'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_pdf = target_publication_info['pdf_link']\nfinal_result = target_pdf\n", "result": "https://static.aminer.cn/upload/pdf/program/5cede0e7da562983788c6339_0.pdf", "exe_time": 4.413868188858032}
{"Query_en": "Which journal or conference included the representative work of Yan Zhao at Soochow University?", "Answer": {"info": {"name": "IJCAI"}, "issue": "", "volume": ""}, "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Yan Zhao', 'organization': 'Soochow University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_venue = target_publication_info['venue']\nfinal_result = target_venue\n", "result": {"info": {"name": "IJCAI"}, "issue": "", "volume": ""}, "exe_time": 4.272833585739136}
{"Query_en": "What is the abstract of the representative work of Guanya Shi in Online Control field?", "Answer": "Precise near-ground trajectory control is difficult for multi-rotor drones, due to the complex aerodynamic effects caused by interactions between multi-rotor airflow and the environment. Conventional control methods often fail to properly account for these complex effects and fall short in accomplishing smooth landing. In this paper, we present a novel deep-learning-based robust nonlinear controller (Neural-Lander) that improves control performance of a quadrotor during landing. Our approach combines a nominal dynamics model with a Deep Neural Network (DNN) that learns high-order interactions. We apply spectral normalization (SN) to constrain the Lipschitz constant of the DNN. Leveraging this Lipschitz property, we design a nonlinear feedback linearization controller using the learned model and prove system stability with disturbance rejection. To the best of our knowledge, this is the first DNN-based nonlinear feedback controller with stability guarantees that can utilize arbitrarily large neural nets. Experimental results demonstrate that the proposed controller significantly outperforms a Baseline Nonlinear Tracking Controller in both landing and cross-table trajectory tracking cases. We also empirically show that the DNN generalizes well to unseen data outside the training domain.", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Guanya Shi', 'interest': 'Online Control'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_abstract = target_publication_info['abstract']\nfinal_result = target_abstract\n", "result": "Precise near-ground trajectory control is difficult for multi-rotor drones, due to the complex aerodynamic effects caused by interactions between multi-rotor airflow and the environment. Conventional control methods often fail to properly account for these complex effects and fall short in accomplishing smooth landing. In this paper, we present a novel deep-learning-based robust nonlinear controller (Neural-Lander) that improves control performance of a quadrotor during landing. Our approach combines a nominal dynamics model with a Deep Neural Network (DNN) that learns high-order interactions. We apply spectral normalization (SN) to constrain the Lipschitz constant of the DNN. Leveraging this Lipschitz property, we design a nonlinear feedback linearization controller using the learned model and prove system stability with disturbance rejection. To the best of our knowledge, this is the first DNN-based nonlinear feedback controller with stability guarantees that can utilize arbitrarily large neural nets. Experimental results demonstrate that the proposed controller significantly outperforms a Baseline Nonlinear Tracking Controller in both landing and cross-table trajectory tracking cases. We also empirically show that the DNN generalizes well to unseen data outside the training domain.", "exe_time": 4.233885765075684}
{"Query_en": "What is the PDF link of the representative work of Soon Hoe Lim in Stochastic Thermodynamics field?", "Answer": "https://cz5waila03cyo0tux1owpyofgoryroob.oss-cn-beijing.aliyuncs.com/2D/C4/A4/2DC4A46AD802AF6A37C9741CB916081A.pdf", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Soon Hoe Lim', 'interest': 'Stochastic Thermodynamics'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_pdf = target_publication_info['pdf_link']\nfinal_result = target_pdf\n", "result": "https://cz5waila03cyo0tux1owpyofgoryroob.oss-cn-beijing.aliyuncs.com/2D/C4/A4/2DC4A46AD802AF6A37C9741CB916081A.pdf", "exe_time": 4.3875555992126465}
{"Query_en": "Which journal or conference included the representative work of Bin Liu in Recommender Systems field?", "Answer": {"id": "53a72d4220f7420be8c5fa02", "info": {"name": "KDD"}, "issue": "", "type": 0, "volume": ""}, "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Bin Liu', 'interest': 'Recommender Systems'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_venue = target_publication_info['venue']\nfinal_result = target_venue\n", "result": {"id": "53a72d4220f7420be8c5fa02", "info": {"name": "KDD"}, "issue": "", "type": 0, "volume": ""}, "exe_time": 4.250746250152588}
