{"Query_en": "Research interests of Antoine Thabault at Verizon Media", "Answer": ["Stochastic Control", "Real-time Bidding", "Recurrent Neural Network", "Auctions", "RNN", "RTB", "Ad-tech", "Recurrent Neural Networks", "Difficult Stochastic Control Task", "Market Shift"], "route": "searchPerson", "code": "info = {'name': 'Antoine Thabault', 'organization': 'Verizon Media'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ninterests = target_person_info['interests']\nfinal_result = interests\n", "result": ["Stochastic Control", "Real-time Bidding", "Recurrent Neural Network", "Auctions", "RNN", "RTB", "Ad-tech", "Recurrent Neural Networks", "Difficult Stochastic Control Task", "Market Shift"], "exe_time": 1.1720237731933594}
{"Query_en": "Citation count of Emilio Ferrara at School of Computer Science and Information Science, University of Southern California", "Answer": 20544, "route": "searchPerson", "code": "info = {'name': 'Emilio Ferrara', 'organization': 'School of Computer Science and Information Science, University of Southern California'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\nnum_citation = target_person_info['num_citation']\nfinal_result = num_citation\n", "result": 20544, "exe_time": 1.3289721012115479}
{"Query_en": "Number of published papers by Nirmalya Roy at Department of Information Systems at University of Maryland Baltimore County", "Answer": 147, "route": "searchPerson", "code": "info = {'name': 'Nirmalya Roy', 'organization': 'Department of Information Systems at University of Maryland Baltimore County'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\nnum_pubs = target_person_info['num_pubs']\nfinal_result = num_pubs\n", "result": 147, "exe_time": 1.3356590270996094}
{"Query_en": "Which institution does Ivan Lobov who researches in Ivan Lobov field belong to?", "Answer": "DeepMind", "route": "searchPerson", "code": "info = {'name': 'Ivan Lobov', 'interest': 'Ivan Lobov'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\norganization = target_person_info['organization']\nfinal_result = organization\n", "result": "DeepMind", "exe_time": 1.152686595916748}
{"Query_en": "Citation count of Abir De who researches in Social Networks field", "Answer": 1205, "route": "searchPerson", "code": "info = {'name': 'Abir De', 'interest': 'Social Networks'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\nnum_citation = target_person_info['num_citation']\nfinal_result = num_citation\n", "result": 1205, "exe_time": 1.2239367961883545}
{"Query_en": "Number of papers published by Ata Akbari Asanjan who researches in Precipitation field", "Answer": 32, "route": "searchPerson", "code": "info = {'name': 'Ata Akbari Asanjan', 'interest': 'Precipitation'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\nnum_pubs = target_person_info['num_pubs']\nfinal_result = num_pubs\n", "result": 32, "exe_time": 1.2725074291229248}
{"Query_en": "Who are the researchers at College of Computer Science and Technology, Zhejiang University?", "Answer": ["Yi Yang", "Deng Cai", "Fei Wu", "Zhou Zhao", "Dongxiang Zhang", "Sai Wu", "Can Wang", "Jianling Sun", "Ningyu Zhang", "Chaochao Chen"], "route": "searchPerson", "code": "info = {'organization': 'College of Computer Science and Technology, Zhejiang University'}\norganization = info['organization']\n\nperson_list = searchPerson(organization = organization)\nname_list = [person_list[i]['name'] for i in range(len(person_list))]\nfinal_result = name_list\n", "result": ["Yi Yang", "Deng Cai", "Fei Wu", "Zhou Zhao", "Dongxiang Zhang", "Sai Wu", "Can Wang", "Jianling Sun", "Ningyu Zhang", "Chaochao Chen"], "exe_time": 1.057178258895874}
{"Query_en": "Who are the researchers in Computer Vision field?", "Answer": ["Andrew Ng", "Quoc Viet Le", "Yangqing Jia", "Dacheng Tao", "Zhi-Hua Zhou", "Larry Zitnick", "Xuelong Li", "Chunhua Shen", "Qi Tian", "Rosalind Wright Picard"], "route": "searchPerson", "code": "info = {'interest': 'Computer Vision'}\ninterest = info['interest']\n\nperson_list = searchPerson(interest = interest)\nname_list = [person_list[i]['name'] for i in range(len(person_list))]\nfinal_result = name_list\n", "result": ["Andrew Ng", "Quoc Viet Le", "Yangqing Jia", "Dacheng Tao", "Zhi-Hua Zhou", "Larry Zitnick", "Xuelong Li", "Chunhua Shen", "Qi Tian", "Rosalind Wright Picard"], "exe_time": 0.9526891708374023}
{"Query_en": "Who are the collaborators of Yijun Zhang at Institute of Atmospheric Sciences, Fudan University?", "Answer": ["Wen Yao", "Dong Zheng", "Qingyong Li"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Yijun Zhang', 'organization': 'Institute of Atmospheric Sciences, Fudan University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\ncoauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\nfinal_result = coauthors_name_list\n", "result": ["Wen Yao", "Dong Zheng", "Qingyong Li"], "exe_time": 1.956453800201416}
{"Query_en": "Who are the collaborators of Chenxin Tao in Deep Learning field?", "Answer": ["Jie Zhou", "Qi Tian"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Chenxin Tao', 'interest': 'Deep Learning'}\ninterest = info['interest']\nname = info['name']\n\ninterest_person_list = searchPerson(interest = interest)\ninterest_person_id_list = [person['person_id'] for person in interest_person_list]\ntarget_list = []\nfor interest_person_id in interest_person_id_list:\n    coauthors = getCoauthors(person_id = interest_person_id)\n    coauthor_name_list = [coauthor['name'] for coauthor in coauthors]\n    if name in coauthor_name_list:\n        target_list.append(getPersonBasicInfo(person_id=interest_person_id)['name'])\nfinal_result = target_list\n", "result": [], "exe_time": 2.4134252071380615}
{"Query_en": "Who at Walmart Labs has a collaboration with Supreeth Shastry?", "Answer": ["Linsey Pang", "Karthick Gopalswamy", "sunil kumar potnuru", "Harshada Vuyyuri", "Ketki Gupte", "Dnyanesh Kulkarni", "Timothy Winters"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Supreeth Shastry', 'organization': 'Walmart Labs'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\ncoauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\nfinal_result = coauthors_name_list\n", "result": "exe error", "exe_time": 1.8893134593963623}
{"Query_en": "Who in Rare Category Detection field has a collaboration with Dawei Zhou?", "Answer": ["Jingrui He"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Dawei Zhou', 'interest': 'Rare Category Detection'}\ninterest = info['interest']\nname = info['name']\n\ninterest_person_list = searchPerson(interest = interest)\ninterest_person_id_list = [person['person_id'] for person in interest_person_list]\ntarget_list = []\nfor interest_person_id in interest_person_id_list:\n    coauthors = getCoauthors(person_id = interest_person_id)\n    coauthor_name_list = [coauthor['name'] for coauthor in coauthors]\n    if name in coauthor_name_list:\n        target_list.append(getPersonBasicInfo(person_id=interest_person_id)['name'])\nfinal_result = target_list\n", "result": ["Jingrui He"], "exe_time": 2.4265735149383545}
{"Query_en": "What are the papers published by Yankai Chen at Department of Computer Science and Engineering, The Chinese University of Hong Kong?", "Answer": ["Effective and efficient attributed community search.", "Modeling Scale-free Graphs with Hyperbolic Geometry for Knowledge-aware Recommendation", "Exploring Communities in Large Profiled Graphs (Extended Abstract)", "Exploring Communities in Large Profiled Graphs.", "Efficient Community Search over Large Directed Graph: An Augmented Index-based Approach", "Learning Binarized Graph Representations with Multi-faceted Quantization Reinforcement for Top-K Recommendation", "A Literature Review of Recent Graph Embedding Techniques for Biomedical Data."], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Yankai Chen', 'organization': 'Department of Computer Science and Engineering, The Chinese University of Hong Kong'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\npublications_title_list = [publication['title'] for publication in publications_list]\nfinal_result = publications_title_list\n", "result": ["Effective and efficient attributed community search.", "Modeling Scale-free Graphs with Hyperbolic Geometry for Knowledge-aware Recommendation", "Exploring Communities in Large Profiled Graphs (Extended Abstract)", "Exploring Communities in Large Profiled Graphs.", "Efficient Community Search over Large Directed Graph: An Augmented Index-based Approach", "Learning Binarized Graph Representations with Multi-faceted Quantization Reinforcement for Top-K Recommendation", "A Literature Review of Recent Graph Embedding Techniques for Biomedical Data."], "exe_time": 1.8873798847198486}
{"Query_en": "What is the citation count of the representative work of Keegan W. Harris at School of Computer Science, Carnegie Mellon University?", "Answer": 17, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Keegan W. Harris', 'organization': 'School of Computer Science, Carnegie Mellon University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\n# Assuming the representative work is the one with the most citations\n# The list was sorted by citation\nmax_citation = publications_list[0]\nfinal_result = max_citation['num_citation']\n", "result": 17, "exe_time": 2.108128309249878}
{"Query_en": "In which year was the representative work of Hua Lu at Department of People and Technology, Roskilde University published?", "Answer": 2008, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Hua Lu', 'organization': 'Department of People and Technology, Roskilde University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\n# Assuming the representative work is the one with the most citations\n# The list was sorted by citation\nmax_citation = publications_list[0]\nfinal_result = max_citation['num_citation']\n", "result": 502, "exe_time": 2.0599257946014404}
{"Query_en": "Who are the authors of the representative work of Mikhail Bilenko at Machine Learning and Intelligence group, Microsoft Research?", "Answer": ["Mikhail Bilenko", "Raymond J. Mooney"], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Mikhail Bilenko', 'organization': 'Machine Learning and Intelligence group, Microsoft Research'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\nmax_citation = publications_list[0]\nfinal_result = max_citation['year']\n", "result": 2003, "exe_time": 1.8672153949737549}
{"Query_en": "What are the papers published by Hang Yin in Spiking Neural Networks field?", "Answer": ["Energy-Efficient Models for High-Dimensional Spike Train Classification using Sparse Spiking Neural Networks", "Gaussian Mixture Graphical Lasso With Application To Edge Detection In Brain Networks"], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Hang Yin', 'interest': 'Spiking Neural Networks'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name=name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\npublications_title_list = [publication['title'] for publication in publications_list]\nfinal_result = publications_title_list\n", "result": ["Energy-Efficient Models for High-Dimensional Spike Train Classification using Sparse Spiking Neural Networks", "Gaussian Mixture Graphical Lasso With Application To Edge Detection In Brain Networks"], "exe_time": 1.8035359382629395}
{"Query_en": "What is the citation count of the representative work of Yue Wang in Mandarin Tone field?", "Answer": 438, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Yue Wang', 'interest': 'Mandarin Tone'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_num_citation = target_publication_dict['num_citation']\nfinal_result = target_num_citation\n", "result": 438, "exe_time": 2.0735867023468018}
{"Query_en": "In which year was the representative work of Kiran Tomlinson in Discrete Choice field published?", "Answer": 2020, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Kiran Tomlinson', 'interest': 'Discrete Choice'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_num_citation = target_publication_dict['num_citation']\nfinal_result = target_num_citation\n", "result": 25, "exe_time": 2.102548360824585}
{"Query_en": "Who are the authors of the representative work of Prasanna Sattigeri in Machine Learning field?", "Answer": ["Rachel K. E. Bellamy", "Kuntal Dey", "Michael Hind", "Samuel C. Hoffman", "Stephanie Houde", "Kalapriya Kannan", "Pranay Lohia", "Jacquelyn Martino", "Sameep Mehta", "Aleksandra Mojsilovic", "Seema Nagar", "Karthikeyan Natesan Ramamurthy", "John T. Richards", "Diptikalyan Saha", "Prasanna Sattigeri", "Moninder Singh", "Kush R. Varshney", "Yunfeng Zhang"], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Prasanna Sattigeri', 'interest': 'Machine Learning'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\nauthor_name_list = target_publication_dict['authors_name_list']\nfinal_result = author_name_list\n", "result": ["Rachel K. E. Bellamy", "Kuntal Dey", "Michael Hind", "Samuel C. Hoffman", "Stephanie Houde", "Kalapriya Kannan", "Pranay Lohia", "Jacquelyn Martino", "Sameep Mehta", "Aleksandra Mojsilovic", "Seema Nagar", "Karthikeyan Natesan Ramamurthy", "John T. Richards", "Diptikalyan Saha", "Prasanna Sattigeri", "Moninder Singh", "Kush R. Varshney", "Yunfeng Zhang"], "exe_time": 2.0910375118255615}
{"Query_en": "Is Yinghao Li at School of Electrical and Computer Engineering, Georgia Institute of Technology male or female?", "Answer": "male", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Yinghao Li', 'organization': 'School of Electrical and Computer Engineering, Georgia Institute of Technology'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_gender = target_person_basic_info['gender']\nfinal_result = target_person_gender\n", "result": "male", "exe_time": 1.8713569641113281}
{"Query_en": "What is the title of Zijian Kang at Xi’an Jiaotong Universityi’an Jiaotong University?", "Answer": "Master", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Zijian Kang', 'organization': 'Xi’an Jiaotong University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_position = target_person_basic_info['position']\nfinal_result = target_person_position\n", "result": "Master", "exe_time": 1.824965238571167}
{"Query_en": "What is the introduction of Yuwei Fu at McGill Intelligent Automation Lab?", "Answer": "Yuwei has a broad interest in reinforcement learning and machine learning. His primary research goal is to develop sample efficient RL algorithms that are practical in solving real-world problems.", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Yuwei Fu', 'organization': 'McGill Intelligent Automation Lab'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_bio = target_person_basic_info['bio']\nfinal_result = target_person_bio\n", "result": "Yuwei has a broad interest in reinforcement learning and machine learning. His primary research goal is to develop sample efficient RL algorithms that are practical in solving real-world problems.", "exe_time": 1.816688060760498}
{"Query_en": "What is the educational background of Athanasios N. Nikolakopoulos at Amazon?", "Answer": "", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Athanasios N. Nikolakopoulos', 'organization': 'Amazon'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_education_experience = target_person_basic_info['education_experience']\nfinal_result = target_person_education_experience\n", "result": "", "exe_time": 2.0289416313171387}
{"Query_en": "What is the email of Hao Liu at Department of Computer Science and Engineering, The Hong Kong University of Science and Technology?", "Answer": "liuh@ust.hk", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Hao\\xa0Liu', 'organization': 'Department of Computer Science and Engineering, The Hong Kong University of Science and Technology'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_email = target_person_basic_info['email']\nfinal_result = target_person_email\n", "result": "liuh@ust.hk", "exe_time": 1.9374706745147705}
{"Query_en": "Is Brian Karrer in Social Network field male or female?", "Answer": "male", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Brian Karrer', 'interest': 'Social Network'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_gender = target_person_basic_info['gender']\nfinal_result = target_person_gender\n", "result": "male", "exe_time": 1.759176254272461}
{"Query_en": "What is the title of Michalis Vazirgiannis in Data Mining field?", "Answer": "Professor", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Michalis Vazirgiannis', 'interest': 'Data Mining'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_position = target_person_basic_info['position']\nfinal_result = target_person_position\n", "result": "Professor", "exe_time": 1.7951552867889404}
{"Query_en": "What is the introduction of Kai Han in Deep Learning Architectures And Techniques field?", "Answer": "Working on computer vision, in particular visual backbone models and model compression.", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Kai Han', 'interest': 'Deep Learning Architectures And Techniques'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_bio = target_person_basic_info['bio']\nfinal_result = target_person_bio\n", "result": "Working on computer vision, in particular visual backbone models and model compression.", "exe_time": 1.8115482330322266}
{"Query_en": "What is the educational background of Ruosi Wan in Weight Decay field?", "Answer": "PhD student\t<br>Department of Computer Science and Engineering, Hong Kong University of Science and Technology<br>2021 – Present<br><br>MS student\t<br>Peking University<br>2016 – 2019\t <br><br>Undergrad student\t<br>Peking University<br>2012 – 2016", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Ruosi Wan', 'interest': 'Weight Decay'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_education_experience = target_person_basic_info['education_experience']\nfinal_result = target_person_education_experience\n", "result": "PhD student\t<br>Department of Computer Science and Engineering, Hong Kong University of Science and Technology<br>2021 – Present<br><br>MS student\t<br>Peking University<br>2016 – 2019\t <br><br>Undergrad student\t<br>Peking University<br>2012 – 2016", "exe_time": 1.9578464031219482}
{"Query_en": "What is the email of Dong Wang in Catalysis field?", "Answer": "donwa@microsoft.com", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Dong Wang', 'interest': 'Catalysis'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_email = target_person_basic_info['email']\nfinal_result = target_person_email\n", "result": "donwa@microsoft.com", "exe_time": 1.7337236404418945}
{"Query_en": "Who among the collaborators of Diane Hu at Etsy are researching in E-commerce field?", "Answer": [" Aakash Sabharwal"], "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Diane Hu', 'organization': 'Etsy'}\nname = info['name']\norganization = info['organization']\ntarget_interest = info['interest']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthor_list = getCoauthors(person_id = target_person_id)\n\ntarget_coauthor_names = []\nfor coauthor in coauthor_list:\n    coauthor_id = coauthor['person_id']\n    coauthor_interests_list = getPersonInterest(person_id = coauthor_id)\n    if target_interest in coauthor_interests_list:\n        target_coauthor_names.append(coauthor['name'])\n\nfinal_result = target_coauthor_names\n", "result": "exe error", "exe_time": 2.6920955181121826}
{"Query_en": "Who has the highest citation count among the collaborators of Haifeng Jin at Google?", "Answer": "Alok N. Choudhary", "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Haifeng Jin', 'organization': 'Google'}\nname = info['name']\norganization = info['organization']\n\n# get specific person's information\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# get coauthors of the specific person\ncoauthors_list = getCoauthors(person_id = target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_citation = 0\nmax_citation_author_name = ''\n\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_citation = coauthor_info['num_citation']\n    if coauthor_citation > max_citation:\n        max_citation = coauthor_citation\n        max_citation_author_name = coauthor_info['name']\n\nfinal_result = max_citation_author_name\n", "result": "Alok N. Choudhary", "exe_time": 3.540924072265625}
{"Query_en": "Who has the most published papers among the collaborators of J. Austin Ellis at Sandia National Laboratories?", "Answer": "Srinivasan Parthasarathy", "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'J. Austin Ellis', 'organization': 'Sandia National Laboratories'}\nname = info['name']\norganization = info['organization']\n\n# Search the person\nperson_list = searchPerson(name=name, organization=organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# Get the coauthors\ncoauthors_list = getCoauthors(person_id=target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_pubs = 0\nmax_pubs_author_name = ''\n\n# Iterate each coauthor and calculate his/her publication number\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_pubs = coauthor_info['num_pubs']\n    if coauthor_pubs > max_pubs:\n        max_pubs = coauthor_pubs\n        max_pubs_author_name = coauthor_info['name']\n\nfinal_result = max_pubs_author_name\n", "result": "Srinivasan Parthasarathy", "exe_time": 3.7351033687591553}
{"Query_en": "Who among the collaborators of Houdong Hu in Indexes field are at Microsoftinstitution?", "Answer": ["Linjun Yang"], "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Houdong Hu', 'interest': 'Indexes'}\nname = info['name']\ninterest = info['interest']\ntarget_organization = info['organization']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthor_list = getCoauthors(person_id = target_person_id)\n\ntarget_coauthor_names = []\nfor coauthor in coauthor_list:\n    coauthor_name = coauthor['name']\n    coauthor_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_list[0]\n    coauthor_organization = coauthor_info['organization']\n    if coauthor_organization == target_organization:\n        target_coauthor_names.append(coauthor['name'])\n\nfinal_result = target_coauthor_names\n", "result": "exe error", "exe_time": 2.906874418258667}
{"Query_en": "Who has the highest citation count among the collaborators of Walter Vinci in Gauge Theory field?", "Answer": "Ramakrishna Nemani", "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Walter Vinci', 'interest': 'Gauge Theory'}\nname = info['name']\ninterest = info['interest']\n\n# get specific person's information\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# get coauthors of the specific person\ncoauthors_list = getCoauthors(person_id = target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_citation = 0\nmax_citation_author_name = ''\n\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_citation = coauthor_info['num_citation']\n    if coauthor_citation > max_citation:\n        max_citation = coauthor_citation\n        max_citation_author_name = coauthor_info['name']\n\nfinal_result = max_citation_author_name\n", "result": "Ramakrishna Nemani", "exe_time": 3.5750229358673096}
{"Query_en": "Who has the most published papers among the collaborators of Thomas Finley in Structural Svms field?", "Answer": "Tie-Yan Liu", "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Thomas Finley', 'interest': 'Structural Svms'}\nname = info['name']\ninterest = info['interest']\n\n# get specific person's information\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# Get the coauthors\ncoauthors_list = getCoauthors(person_id=target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_pubs = 0\nmax_pubs_author_name = ''\n\n# Iterate each coauthor and calculate his/her publication number\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_pubs = coauthor_info['num_pubs']\n    if coauthor_pubs > max_pubs:\n        max_pubs = coauthor_pubs\n        max_pubs_author_name = coauthor_info['name']\n\nfinal_result = max_pubs_author_name\n", "result": "Tie-Yan Liu", "exe_time": 3.7093794345855713}
{"Query_en": "Who are the collaborators of the collaborators of Noujan Pashanasangi at Department of Computer Science, University of California, Santa Cruz?", "Answer": ["Suman Kalyan Bera", "Noujan Pashanasangi", "A. Erdem Sarıyüce", "David F. Gleich", "C. Seshadhri (Seshadhri Comandur)", "Noujan Pashanasangi", "Sayan Bhattacharya", "Sara Ahmadian"], "route": "searchPerson -> getCoauthors -> getCoauthors", "code": "info = {'name': 'Noujan Pashanasangi', 'organization': 'Department of Computer Science, University of California, Santa Cruz'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors1_list = getCoauthors(person_id = target_person_id)\n\ncoauthors2_list = []\nfor coauthor in coauthors1_list:\n    coauthors2_list.extend(getCoauthors(person_id = coauthor['person_id']))\n\ncoauthors2_names = [coauthor['name'] for coauthor in coauthors2_list]\n\nfinal_result = coauthors2_names\n", "result": ["Suman Kalyan Bera", "Noujan Pashanasangi", "A. Erdem Sarıyüce", "David F. Gleich", "C. Seshadhri (Seshadhri Comandur)", "Noujan Pashanasangi", "Sayan Bhattacharya", "Sara Ahmadian"], "exe_time": 2.6216647624969482}
{"Query_en": "Who are the collaborators of the collaborators of Shuwen Yang in Guarantee Mechanism field?", "Answer": ["Lun Du", "Yilun Jin", "Chuan Shi", "Junshan Wang", "Wei Lin", "Bin Cui", "Shuwen Yang", "Yizhou Zhang", "Jie Tang", "Wenhao Zhu", "Yingxue Zhang", "Liang Zhang", "Xiao Wang", "Wei Chen", "Gao Cong", "Guojie Song", "Lun Du", "Qiang Yang", "Yizhou Zhang", "Chuan Shi", "Wei Lin", "Shuwen Yang", "Yan Liu", "Karishma Sharma", "Guojie Song", "Yilun Jin", "Yun Xiong", "Yangyong Zhu", "Xiangnan Kong", "Wei Cheng", "Qiang Fu", "Guojie Song", "Jiayan Guo", "Yilun Jin", "Di Yao", "Wei Lin", "Ran Jia", "Junshan Wang", "Yujia Zheng"], "route": "searchPerson -> getCoauthors -> getCoauthors", "code": "info = {'name': 'Shuwen Yang', 'interest': 'Guarantee Mechanism'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors1_list = getCoauthors(person_id = target_person_id)\n\ncoauthors2_list = []\nfor coauthor in coauthors1_list:\n    coauthors2_list.extend(getCoauthors(person_id = coauthor['person_id']))\n\ncoauthors2_names = [coauthor['name'] for coauthor in coauthors2_list]\n\nfinal_result = coauthors2_names\n", "result": ["Lun Du", "Yilun Jin", "Chuan Shi", "Junshan Wang", "Wei Lin", "Bin Cui", "Shuwen Yang", "Yizhou Zhang", "Jie Tang", "Wenhao Zhu", "Yingxue Zhang", "Liang Zhang", "Xiao Wang", "Wei Chen", "Gao Cong", "Guojie Song", "Lun Du", "Qiang Yang", "Yizhou Zhang", "Chuan Shi", "Wei Lin", "Shuwen Yang", "Yan Liu", "Karishma Sharma", "Guojie Song", "Yilun Jin", "Yun Xiong", "Yangyong Zhu", "Xiangnan Kong", "Wei Cheng", "Qiang Fu", "Guojie Song", "Jiayan Guo", "Yilun Jin", "Di Yao", "Wei Lin", "Ran Jia", "Junshan Wang", "Yujia Zheng"], "exe_time": 2.4782941341400146}
{"Query_en": "What is the abstract of the representative work of Zhenya Huang at School of Computer Science and Technology, University of Science and Technology of China?", "Answer": "For offering proactive services (e.g., personalized exercise recommendation) to the students in computer supported intelligent education, one of the fundamental tasks is predicting student performance (e.g., scores) on future exercises, where it is necessary to track the change of each student's knowledge acquisition during her exercising activities. Unfortunately, to the best of our knowledge, existing approaches can only exploit the exercising records of students, and the problem of extracting rich information existed in the materials (e.g., knowledge concepts, exercise content) of exercises to achieve both more precise prediction of student performance and more interpretable analysis of knowledge acquisition remains underexplored. To this end, in this paper, we present a holistic study of student performance prediction. To directly achieve the primary goal of performance prediction, we first propose a general Exercise-Enhanced Recurrent Neural Network (EERNN) framework by exploring both student's exercising records and the text content of corresponding exercises. In EERNN, we simply summarize each student's state into an integrated vector and trace it with a recurrent neural network, where we design a bidirectional LSTM to learn the encoding of each exercise from its content. For making final predictions, we design two implementations on the basis of EERNN with different prediction strategies, i.e., EERNNM with Markov property and EERNNA with Attention mechanism. Then, to explicitly track student's knowledge acquisition on multiple knowledge concepts, we extend EERNN to an explainable Exercise-aware Knowledge Tracing (EKT) framework by incorporating the knowledge concept information, where the student's integrated state vector is now extended to a knowledge state matrix. In EKT, we further develop a memory network for quantifying how much each exercise can affect the mastery of students on multiple knowledge concepts during the exercising process. Finally, we conduct extensive experiments and evaluate both EERNN and EKT frameworks on a large-scale real-world data. The results in both general and cold-start scenarios clearly demonstrate the effectiveness of two frameworks in student performance prediction as well as the superior interpretability of EKT.", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Zhenya Huang', 'organization': 'School of Computer Science and Technology, University of Science and Technology of China'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_abstract = target_publication_info['abstract']\nfinal_result = target_abstract\n", "result": "For offering proactive services (e.g., personalized exercise recommendation) to the students in computer supported intelligent education, one of the fundamental tasks is predicting student performance (e.g., scores) on future exercises, where it is necessary to track the change of each student's knowledge acquisition during her exercising activities. Unfortunately, to the best of our knowledge, existing approaches can only exploit the exercising records of students, and the problem of extracting rich information existed in the materials (e.g., knowledge concepts, exercise content) of exercises to achieve both more precise prediction of student performance and more interpretable analysis of knowledge acquisition remains underexplored. To this end, in this paper, we present a holistic study of student performance prediction. To directly achieve the primary goal of performance prediction, we first propose a general Exercise-Enhanced Recurrent Neural Network (EERNN) framework by exploring both student's exercising records and the text content of corresponding exercises. In EERNN, we simply summarize each student's state into an integrated vector and trace it with a recurrent neural network, where we design a bidirectional LSTM to learn the encoding of each exercise from its content. For making final predictions, we design two implementations on the basis of EERNN with different prediction strategies, i.e., EERNNM with Markov property and EERNNA with Attention mechanism. Then, to explicitly track student's knowledge acquisition on multiple knowledge concepts, we extend EERNN to an explainable Exercise-aware Knowledge Tracing (EKT) framework by incorporating the knowledge concept information, where the student's integrated state vector is now extended to a knowledge state matrix. In EKT, we further develop a memory network for quantifying how much each exercise can affect the mastery of students on multiple knowledge concepts during the exercising process. Finally, we conduct extensive experiments and evaluate both EERNN and EKT frameworks on a large-scale real-world data. The results in both general and cold-start scenarios clearly demonstrate the effectiveness of two frameworks in student performance prediction as well as the superior interpretability of EKT.", "exe_time": 2.5222744941711426}
{"Query_en": "What is the PDF link of the representative work of Qinghua Liu at Deparment of Electrical and Computer Engineering, School of Engineering and Science, Princeton University?", "Answer": "https://static.aminer.cn/storage/pdf/arxiv/20/2007/2007.07481.pdf", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Qinghua Liu', 'organization': 'Deparment of Electrical and Computer Engineering, School of Engineering and Science, Princeton University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_pdf = target_publication_info['pdf_link']\nfinal_result = target_pdf\n", "result": "https://static.aminer.cn/storage/pdf/arxiv/20/2007/2007.07481.pdf", "exe_time": 2.619168281555176}
{"Query_en": "Which journal or conference included the representative work of Balakrishnan Varadarajan at Google Research?", "Answer": {"info": {"name": "arXiv: Computer Vision and Pattern Recognition"}, "issue": "", "type": 11, "volume": "abs/1609.08675"}, "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Balakrishnan Varadarajan', 'organization': 'Google Research'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_venue = target_publication_info['venue']\nfinal_result = target_venue\n", "result": {"info": {"name": "arXiv: Computer Vision and Pattern Recognition"}, "issue": "", "type": 11, "volume": "abs/1609.08675"}, "exe_time": 2.4328701496124268}
{"Query_en": "What is the abstract of the representative work of Jing Wang in Crystal Structure field?", "Answer": "Network embedding, aiming to learn the low-dimensional representations of nodes in networks, is of paramount importance in many real applications. One basic requirement of network embedding is to preserve the structure and inherent properties of the networks. While previous network embedding methods primarily preserve the microscopic structure, such as the first-and second-order proximities of nodes, the mesoscopic community structure, which is one of the most prominent feature of networks, is largely ignored. In this paper, we propose a novel Modularized Nonnegative Matrix Factorization (M-NMF) model to incorporate the community structure into network embedding. We exploit the consensus relationship between the representations of nodes and community structure, and then jointly optimize NMF based representation learning model and modularity based community detection model in a unified framework, which enables the learned representations of nodes to preserve both of the microscopic and community structures. We also provide efficient updating rules to infer the parameters of our model, together with the correctness and convergence guarantees. Extensive experimental results on a variety of real-world networks show the superior performance of the proposed method over the state-of-the-arts.", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Jing Wang', 'interest': 'Crystal Structure'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_abstract = target_publication_info['abstract']\nfinal_result = target_abstract\n", "result": "Network embedding, aiming to learn the low-dimensional representations of nodes in networks, is of paramount importance in many real applications. One basic requirement of network embedding is to preserve the structure and inherent properties of the networks. While previous network embedding methods primarily preserve the microscopic structure, such as the first-and second-order proximities of nodes, the mesoscopic community structure, which is one of the most prominent feature of networks, is largely ignored. In this paper, we propose a novel Modularized Nonnegative Matrix Factorization (M-NMF) model to incorporate the community structure into network embedding. We exploit the consensus relationship between the representations of nodes and community structure, and then jointly optimize NMF based representation learning model and modularity based community detection model in a unified framework, which enables the learned representations of nodes to preserve both of the microscopic and community structures. We also provide efficient updating rules to infer the parameters of our model, together with the correctness and convergence guarantees. Extensive experimental results on a variety of real-world networks show the superior performance of the proposed method over the state-of-the-arts.", "exe_time": 2.3996598720550537}
{"Query_en": "What is the PDF link of the representative work of Junzhe Zhang in Causal Inference field?", "Answer": "https://static.aminer.cn/upload/pdf/program/5b1642388fbcbf6e5a9b56b5_0.pdf", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Junzhe Zhang', 'interest': 'Causal Inference'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_pdf = target_publication_info['pdf_link']\nfinal_result = target_pdf\n", "result": "https://static.aminer.cn/upload/pdf/program/5b1642388fbcbf6e5a9b56b5_0.pdf", "exe_time": 2.444396495819092}
{"Query_en": "Which journal or conference included the representative work of Jimmy Ba in Reinforcement Learning field?", "Answer": {"id": "555036d37cea80f95415b0ba", "info": {"name": "international conference on learning representations", "name_s": "ICLR", "name_zh": ""}, "issue": "", "type": 0, "volume": "abs/1412.6980"}, "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Jimmy Ba', 'interest': 'Reinforcement Learning'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_venue = target_publication_info['venue']\nfinal_result = target_venue\n", "result": {"id": "555036d37cea80f95415b0ba", "info": {"name": "international conference on learning representations", "name_s": "ICLR", "name_zh": ""}, "issue": "", "type": 0, "volume": "abs/1412.6980"}, "exe_time": 2.3995437622070312}
