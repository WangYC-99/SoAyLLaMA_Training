{"Query_en": "Research interests of Ling Huang at School of Data and Computer Science, Sun Yat-sen University", "Answer": ["Community Detection", "Network Embedding", "Collaborative Filtering", "Recommender System", "Matrix Factorization", "Higher-order Structure", "Multi-view Clustering", "Low-precision Quantization", "Mixed Traffic", "Fuzzy Logic"], "route": "searchPerson", "code": "info = {'name': 'Ling Huang', 'organization': 'School of Data and Computer Science, Sun Yat-sen University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ninterests = target_person_info['interests']\nfinal_result = interests\n", "result": ["Community Detection", "Network Embedding", "Collaborative Filtering", "Recommender System", "Matrix Factorization", "Higher-order Structure", "Multi-view Clustering", "Low-precision Quantization", "Mixed Traffic", "Fuzzy Logic"], "exe_time": 1.2648589611053467}
{"Query_en": "Citation count of Deli Chen at MOE Key Laboratory of Computational Linguistics, School of Electronics Engineering and Computer Science, Peking University", "Answer": 939, "route": "searchPerson", "code": "info = {'name': 'Deli Chen', 'organization': 'MOE Key Laboratory of Computational Linguistics, School of Electronics Engineering and Computer Science, Peking University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\nnum_citation = target_person_info['num_citation']\nfinal_result = num_citation\n", "result": 939, "exe_time": 1.4602468013763428}
{"Query_en": "Number of published papers by Adiel Statman at University of Haifa", "Answer": 6, "route": "searchPerson", "code": "info = {'name': 'Adiel Statman', 'organization': 'University of Haifa'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\nnum_pubs = target_person_info['num_pubs']\nfinal_result = num_pubs\n", "result": 6, "exe_time": 1.2439460754394531}
{"Query_en": "Which institution does D. Sivakumar who researches in D. Sivakumar field belong to?", "Answer": "Tonita", "route": "searchPerson", "code": "info = {'name': 'D. Sivakumar', 'interest': 'D. Sivakumar'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\norganization = target_person_info['organization']\nfinal_result = organization\n", "result": "Tonita", "exe_time": 1.19838547706604}
{"Query_en": "Citation count of Jie Zhang who researches in Signal Transduction field", "Answer": 230, "route": "searchPerson", "code": "info = {'name': 'Jie Zhang', 'interest': 'Signal Transduction'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\nnum_citation = target_person_info['num_citation']\nfinal_result = num_citation\n", "result": 230, "exe_time": 1.2459042072296143}
{"Query_en": "Number of papers published by Zhilei Wang who researches in Expert Advice field", "Answer": 4, "route": "searchPerson", "code": "info = {'name': 'Zhilei Wang', 'interest': 'Expert Advice'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\nnum_pubs = target_person_info['num_pubs']\nfinal_result = num_pubs\n", "result": 4, "exe_time": 1.2404029369354248}
{"Query_en": "Who are the researchers at Indiana University?", "Answer": ["Grigory Yaroslavtsev"], "route": "searchPerson", "code": "info = {'organization': 'Indiana University'}\norganization = info['organization']\n\nperson_list = searchPerson(organization = organization)\nname_list = [person_list[i]['name'] for i in range(len(person_list))]\nfinal_result = name_list\n", "result": ["Grigory Yaroslavtsev"], "exe_time": 0.9426960945129395}
{"Query_en": "Who are the researchers in Shape Space field?", "Answer": ["Feng Liu"], "route": "searchPerson", "code": "info = {'interest': 'Shape Space'}\ninterest = info['interest']\n\nperson_list = searchPerson(interest = interest)\nname_list = [person_list[i]['name'] for i in range(len(person_list))]\nfinal_result = name_list\n", "result": ["Feng Liu"], "exe_time": 0.9317097663879395}
{"Query_en": "Who are the collaborators of Sean Abraham at Google?", "Answer": ["Zhen Qin", "Suming(Jeremiah) Chen", "Ryan Evans", "Zachary Wilson", "Sandeep Tata", "Donald Metzler"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Sean Abraham', 'organization': 'Google'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\ncoauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\nfinal_result = coauthors_name_list\n", "result": ["Zhen Qin", "Suming(Jeremiah) Chen", "Ryan Evans", "Zachary Wilson", "Sandeep Tata", "Donald Metzler"], "exe_time": 1.7986161708831787}
{"Query_en": "Who are the collaborators of David Simchi-Levi in Supply Chain field?", "Answer": ["Weichao Mao", "Kaiqing Zhang", "Rong Jin"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'David Simchi-Levi', 'interest': 'Supply Chain'}\ninterest = info['interest']\nname = info['name']\n\ninterest_person_list = searchPerson(interest = interest)\ninterest_person_id_list = [person['person_id'] for person in interest_person_list]\ntarget_list = []\nfor interest_person_id in interest_person_id_list:\n    coauthors = getCoauthors(person_id = interest_person_id)\n    coauthor_name_list = [coauthor['name'] for coauthor in coauthors]\n    if name in coauthor_name_list:\n        target_list.append(getPersonBasicInfo(person_id=interest_person_id)['name'])\nfinal_result = target_list\n", "result": "exe error", "exe_time": 2.4261205196380615}
{"Query_en": "Who at Baidu, Inc. has a collaboration with Daren Sun?", "Answer": ["Yanfeng Zhu", "Shouke Qin", "Xiao Yang", "Ruiwei Zhu"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Daren Sun', 'organization': 'Baidu, Inc.'}\norganization = info['organization']\nname = info['name']\n\norganization_person_list = searchPerson(organization = organization)\norganization_person_id_list = [person['person_id'] for person in organization_person_list]\ntarget_list = []\nfor interest_person_id in organization_person_id_list:\n    coauthors = getCoauthors(person_id = interest_person_id)\n    coauthor_name_list = [coauthor['name'] for coauthor in coauthors]\n    if name in coauthor_name_list:\n        target_list.append(getPersonBasicInfo(person_id=interest_person_id)['name'])\nfinal_result = target_list\n", "result": ["Yanfeng Zhu", "Shouke Qin", "Xiao Yang", "Ruiwei Zhu"], "exe_time": 2.4261274337768555}
{"Query_en": "Who in Urban Computing field has a collaboration with Yanhua Li?", "Answer": ["Yu Zheng", "Jie Bao"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Yanhua Li', 'interest': 'Urban Computing'}\ninterest = info['interest']\nname = info['name']\n\ninterest_person_list = searchPerson(interest = interest)\ninterest_person_id_list = [person['person_id'] for person in interest_person_list]\ntarget_list = []\nfor interest_person_id in interest_person_id_list:\n    coauthors = getCoauthors(person_id = interest_person_id)\n    coauthor_name_list = [coauthor['name'] for coauthor in coauthors]\n    if name in coauthor_name_list:\n        target_list.append(getPersonBasicInfo(person_id=interest_person_id)['name'])\nfinal_result = target_list\n", "result": ["Yu Zheng", "Jie Bao"], "exe_time": 2.4131805896759033}
{"Query_en": "What are the papers published by Jianrong Tao at Fuxi AI Lab, NetEase Inc.?", "Answer": ["Discovering different kinds of smartphone users through their application usage behaviors.", "Mining User Attributes Using Large-Scale APP Lists of Smartphones.", "NGUARD: A Game Bot Detection Framework for NetEase MMORPGs.", "OptMatch: Optimized Matchmaking via Modeling the High-Order Interactions on the Arena", "MVAN: Multi-view Attention Networks for Real Money Trading Detection in Online Games", "Personalized Bundle Recommendation in Online Games", "Reinforcement Learning With A Disentangled Universal Value Function For Item Recommendation", "Bilateral Filtering Graph Convolutional Network for Multi-relational Social Recommendation in the Power-law Networks", "Learning Decomposed Representation for Counterfactual Inference", "Data-Driven Variable Decomposition for Treatment Effect Estimation"], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Jianrong Tao', 'organization': 'Fuxi AI Lab, NetEase Inc.'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\npublications_title_list = [publication['title'] for publication in publications_list]\nfinal_result = publications_title_list\n", "result": ["Discovering different kinds of smartphone users through their application usage behaviors.", "Mining User Attributes Using Large-Scale APP Lists of Smartphones.", "NGUARD: A Game Bot Detection Framework for NetEase MMORPGs.", "OptMatch: Optimized Matchmaking via Modeling the High-Order Interactions on the Arena", "MVAN: Multi-view Attention Networks for Real Money Trading Detection in Online Games", "Personalized Bundle Recommendation in Online Games", "Reinforcement Learning With A Disentangled Universal Value Function For Item Recommendation", "Bilateral Filtering Graph Convolutional Network for Multi-relational Social Recommendation in the Power-law Networks", "Learning Decomposed Representation for Counterfactual Inference", "Data-Driven Variable Decomposition for Treatment Effect Estimation"], "exe_time": 1.8832674026489258}
{"Query_en": "What is the citation count of the representative work of Mason Wan at Machine Learning Research Group, Department of Engineering Science, University of Oxford?", "Answer": 33, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Mason Wan', 'organization': 'Machine Learning Research Group, Department of Engineering Science, University of Oxford'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\n# Assuming the representative work is the one with the most citations\n# The list was sorted by citation\nmax_citation = publications_list[0]\nfinal_result = max_citation['num_citation']\n", "result": 33, "exe_time": 2.0773677825927734}
{"Query_en": "In which year was the representative work of Carl Fakhry at Teza Technologies published?", "Answer": 2016, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Carl Fakhry', 'organization': 'Teza Technologies'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\n# Assuming the representative work is the one with the most citations\n# The list was sorted by citation\nmax_citation = publications_list[0]\nfinal_result = max_citation['num_citation']\n", "result": 44, "exe_time": 1.9926261901855469}
{"Query_en": "Who are the authors of the representative work of Haobo Wang at School of Software Technology, Zhejiang University?", "Answer": ["Weiwei Liu", "Xiaobo Shen", "Haobo Wang", "Ivor W. Tsang"], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Haobo Wang', 'organization': 'School of Software Technology, Zhejiang University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\nmax_citation = publications_list[0]\nfinal_result = max_citation['year']\n", "result": 2022, "exe_time": 1.878300666809082}
{"Query_en": "What are the papers published by Nicolas Christin in Security field?", "Answer": ["Bitcoin: Economics, Technology, and Governance", "Traveling the silk road: a measurement analysis of a large anonymous online marketplace", "Guess Again (and Again and Again): Measuring Password Strength by Simulating Password-Cracking Algorithms", "Beware the Middleman: Empirical Analysis of Bitcoin-Exchange Risk.", "Measuring the Longitudinal Evolution of the Online Anonymous Marketplace Ecosystem.", "Encountering stronger password requirements: user attitudes and behaviors", "How does your password measure up? the effect of strength meters on password creation", "Secure or insure?: a game-theoretic analysis of information security games", "An Empirical Analysis of Traceability in the Monero Blockchain.", "Fast, Lean, And Accurate: Modeling Password Guessability Using Neural Networks"], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Nicolas Christin', 'interest': 'Security'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name=name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\npublications_title_list = [publication['title'] for publication in publications_list]\nfinal_result = publications_title_list\n", "result": ["Bitcoin: Economics, Technology, and Governance", "Traveling the silk road: a measurement analysis of a large anonymous online marketplace", "Guess Again (and Again and Again): Measuring Password Strength by Simulating Password-Cracking Algorithms", "Beware the Middleman: Empirical Analysis of Bitcoin-Exchange Risk.", "Measuring the Longitudinal Evolution of the Online Anonymous Marketplace Ecosystem.", "Encountering stronger password requirements: user attitudes and behaviors", "How does your password measure up? the effect of strength meters on password creation", "Secure or insure?: a game-theoretic analysis of information security games", "An Empirical Analysis of Traceability in the Monero Blockchain.", "Fast, Lean, And Accurate: Modeling Password Guessability Using Neural Networks"], "exe_time": 1.7493817806243896}
{"Query_en": "What is the citation count of the representative work of Yujie Lin in Wind Speed field?", "Answer": 51, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Yujie Lin', 'interest': 'Wind Speed'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_num_citation = target_publication_dict['num_citation']\nfinal_result = target_num_citation\n", "result": 51, "exe_time": 2.0671255588531494}
{"Query_en": "In which year was the representative work of Qing He in Data Mining field published?", "Answer": 2021, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Qing He', 'interest': 'Data Mining'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_num_citation = target_publication_dict['num_citation']\nfinal_result = target_num_citation\n", "result": 3381, "exe_time": 2.0563900470733643}
{"Query_en": "Who are the authors of the representative work of Nicolas Keriven in Group Sparsity field?", "Answer": ["Keriven, Nicolas", "Peyré, Gabriel"], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Nicolas Keriven', 'interest': 'Group Sparsity'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\nauthor_name_list = target_publication_dict['authors_name_list']\nfinal_result = author_name_list\n", "result": ["Keriven, Nicolas", "Peyré, Gabriel"], "exe_time": 2.102475643157959}
{"Query_en": "Is Sangyup Lee at Computer Science, Sungkyunkwan University male or female?", "Answer": "male", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Sangyup Lee', 'organization': 'Computer Science, Sungkyunkwan University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_gender = target_person_basic_info['gender']\nfinal_result = target_person_gender\n", "result": "male", "exe_time": 1.8341057300567627}
{"Query_en": "What is the title of Yuan Deng at Market Algorithms Group, Google Research?", "Answer": "Research Scientist", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Yuan Deng', 'organization': 'Market Algorithms Group, Google Research'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_position = target_person_basic_info['position']\nfinal_result = target_person_position\n", "result": "Research Scientist", "exe_time": 1.8023815155029297}
{"Query_en": "What is the introduction of Ryan McBride at Simon Fraser University?", "Answer": "As a summary: I have achieved publications in top-tier data-mining conferences, done numerous industrial reports and collaborations with a power company, received national funding (three NSERC USRAs, an NSERC CGS-M, and a three year NSERC PGS-D), been a reviewer/program committee member for top-tier data-mining conferences, and been president of a rotary affiliated volunteer group that provides consulting for local non-profits. My main interests are in data-mining for public good, power industries, and risk management.<br><br>Research Interest<br>My main research is about developing then solving data-mining problems in risk management and public safety domains, problems of minimizing risk and damage to a company and society.", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Ryan McBride', 'organization': 'Simon Fraser University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_bio = target_person_basic_info['bio']\nfinal_result = target_person_bio\n", "result": "As a summary: I have achieved publications in top-tier data-mining conferences, done numerous industrial reports and collaborations with a power company, received national funding (three NSERC USRAs, an NSERC CGS-M, and a three year NSERC PGS-D), been a reviewer/program committee member for top-tier data-mining conferences, and been president of a rotary affiliated volunteer group that provides consulting for local non-profits. My main interests are in data-mining for public good, power industries, and risk management.<br><br>Research Interest<br>My main research is about developing then solving data-mining problems in risk management and public safety domains, problems of minimizing risk and damage to a company and society.", "exe_time": 1.7909784317016602}
{"Query_en": "What is the educational background of Haoyu Zhao at Princeton University?", "Answer": "Princeton University Doctor of Philosophy - PhD, Computer Science 2020 - 2025<br><br>Tsinghua University Bachelor's degree, Computer Science and Technology 2016 - 2020", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Haoyu Zhao', 'organization': 'Princeton University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_education_experience = target_person_basic_info['education_experience']\nfinal_result = target_person_education_experience\n", "result": "Princeton University Doctor of Philosophy - PhD, Computer Science 2020 - 2025<br><br>Tsinghua University Bachelor's degree, Computer Science and Technology 2016 - 2020", "exe_time": 1.9890906810760498}
{"Query_en": "What is the email of Varun Ojha at School of Computing, Newcastle University?", "Answer": "varun.ojha@ncl.ac.uk", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Varun Ojha', 'organization': 'School of Computing, Newcastle University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_email = target_person_basic_info['email']\nfinal_result = target_person_email\n", "result": "varun.ojha@ncl.ac.uk", "exe_time": 1.8246357440948486}
{"Query_en": "Is Idan Segev in Compartmental Model field male or female?", "Answer": "male", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Idan Segev', 'interest': 'Compartmental Model'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_gender = target_person_basic_info['gender']\nfinal_result = target_person_gender\n", "result": "male", "exe_time": 1.7557682991027832}
{"Query_en": "What is the title of Gann Bierner in Diversity Metric field?", "Answer": "Engineer", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Gann Bierner', 'interest': 'Diversity Metric'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_position = target_person_basic_info['position']\nfinal_result = target_person_position\n", "result": "Engineer", "exe_time": 1.7759535312652588}
{"Query_en": "What is the introduction of Jian Zhang in Feature Extraction field?", "Answer": "A/Prof Zhang’s current research interests include 2D- and 3D-based computer vision, pattern recognition & data analytics, large-scale image and video content analytics, retrieval and mining, and multimedia and social media signal processing.", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Jian Zhang', 'interest': 'Feature Extraction'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_bio = target_person_basic_info['bio']\nfinal_result = target_person_bio\n", "result": "A/Prof Zhang’s current research interests include 2D- and 3D-based computer vision, pattern recognition & data analytics, large-scale image and video content analytics, retrieval and mining, and multimedia and social media signal processing.", "exe_time": 1.7516074180603027}
{"Query_en": "What is the educational background of Diane Oyen in Transfer Learning field?", "Answer": "The University of New Mexico Ph.D., Computer Science 2007 - 2013<br><br>Carnegie Mellon University B.S., Electrical and Computer Engineering 1994 - 1998", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Diane Oyen', 'interest': 'Transfer Learning'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_education_experience = target_person_basic_info['education_experience']\nfinal_result = target_person_education_experience\n", "result": "The University of New Mexico Ph.D., Computer Science 2007 - 2013<br><br>Carnegie Mellon University B.S., Electrical and Computer Engineering 1994 - 1998", "exe_time": 1.9529087543487549}
{"Query_en": "What is the email of Hima Patel in Data Quality field?", "Answer": "himapatel@in.ibm.com", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Hima Patel', 'interest': 'Data Quality'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_email = target_person_basic_info['email']\nfinal_result = target_person_email\n", "result": "himapatel@in.ibm.com", "exe_time": 1.7535624504089355}
{"Query_en": "Who among the collaborators of Parameswaran Raman at Amazon AWS AI are researching in Multinomial Logistic Regression field?", "Answer": ["Hyokun Yun", "Sriram Srinivasan"], "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Parameswaran Raman', 'organization': 'Amazon AWS AI'}\nname = info['name']\norganization = info['organization']\ntarget_interest = info['interest']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthor_list = getCoauthors(person_id = target_person_id)\n\ntarget_coauthor_names = []\nfor coauthor in coauthor_list:\n    coauthor_id = coauthor['person_id']\n    coauthor_interests_list = getPersonInterest(person_id = coauthor_id)\n    if target_interest in coauthor_interests_list:\n        target_coauthor_names.append(coauthor['name'])\n\nfinal_result = target_coauthor_names\n", "result": "exe error", "exe_time": 2.772505760192871}
{"Query_en": "Who has the highest citation count among the collaborators of Ryosuke Shibasaki at University of Tokyo?", "Answer": "Xuan Song", "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Ryosuke Shibasaki', 'organization': 'University of Tokyo'}\nname = info['name']\norganization = info['organization']\n\n# get specific person's information\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# get coauthors of the specific person\ncoauthors_list = getCoauthors(person_id = target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_citation = 0\nmax_citation_author_name = ''\n\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_citation = coauthor_info['num_citation']\n    if coauthor_citation > max_citation:\n        max_citation = coauthor_citation\n        max_citation_author_name = coauthor_info['name']\n\nfinal_result = max_citation_author_name\n", "result": "Xuan Song", "exe_time": 3.629065752029419}
{"Query_en": "Who has the most published papers among the collaborators of Peibei Shi at Facebook?", "Answer": "Henry C. Lin", "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Peibei Shi', 'organization': 'Facebook'}\nname = info['name']\norganization = info['organization']\n\n# Search the person\nperson_list = searchPerson(name=name, organization=organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# Get the coauthors\ncoauthors_list = getCoauthors(person_id=target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_pubs = 0\nmax_pubs_author_name = ''\n\n# Iterate each coauthor and calculate his/her publication number\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_pubs = coauthor_info['num_pubs']\n    if coauthor_pubs > max_pubs:\n        max_pubs = coauthor_pubs\n        max_pubs_author_name = coauthor_info['name']\n\nfinal_result = max_pubs_author_name\n", "result": "Henry C. Lin", "exe_time": 3.670860528945923}
{"Query_en": "Who among the collaborators of Jin Yu in Video Subjectivity field are at Alibaba Groupinstitution?", "Answer": ["Jingren Zhou", "Chang Zhou", "Jianwei Zhang", "Jianxin Ma", "Wei Lin"], "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Jin Yu', 'interest': 'Video Subjectivity'}\nname = info['name']\ninterest = info['interest']\ntarget_organization = info['organization']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthor_list = getCoauthors(person_id = target_person_id)\n\ntarget_coauthor_names = []\nfor coauthor in coauthor_list:\n    coauthor_name = coauthor['name']\n    coauthor_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_list[0]\n    coauthor_organization = coauthor_info['organization']\n    if coauthor_organization == target_organization:\n        target_coauthor_names.append(coauthor['name'])\n\nfinal_result = target_coauthor_names\n", "result": "exe error", "exe_time": 2.920726776123047}
{"Query_en": "Who has the highest citation count among the collaborators of Praveen Chandar in Information Need field?", "Answer": "Mounia Lalmas", "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Praveen Chandar', 'interest': 'Information Need'}\nname = info['name']\ninterest = info['interest']\n\n# get specific person's information\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# get coauthors of the specific person\ncoauthors_list = getCoauthors(person_id = target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_citation = 0\nmax_citation_author_name = ''\n\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_citation = coauthor_info['num_citation']\n    if coauthor_citation > max_citation:\n        max_citation = coauthor_citation\n        max_citation_author_name = coauthor_info['name']\n\nfinal_result = max_citation_author_name\n", "result": "Mounia Lalmas", "exe_time": 3.5842597484588623}
{"Query_en": "Who has the most published papers among the collaborators of Martin Blais in Occlusion field?", "Answer": "Vahab S. Mirrokni", "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Martin Blais', 'interest': 'Occlusion'}\nname = info['name']\ninterest = info['interest']\n\n# get specific person's information\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\n\n# Get the coauthors\ncoauthors_list = getCoauthors(person_id=target_person_id)\n\n# get information of coauthors and find the one with highest citation\nmax_pubs = 0\nmax_pubs_author_name = ''\n\n# Iterate each coauthor and calculate his/her publication number\nfor coauthor in coauthors_list:\n    coauthor_name = coauthor['name']\n    coauthor_info_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_info_list[0]\n    coauthor_pubs = coauthor_info['num_pubs']\n    if coauthor_pubs > max_pubs:\n        max_pubs = coauthor_pubs\n        max_pubs_author_name = coauthor_info['name']\n\nfinal_result = max_pubs_author_name\n", "result": "exe error", "exe_time": 3.688364028930664}
{"Query_en": "Who are the collaborators of the collaborators of Enyan Dai at College of Information Sciences and Technology, The Pennsylvania State University?", "Answer": ["Huan Liu", "Jiliang Tang", "Kai Shu", "Xianfeng Tang", "Enyan Dai", "Charu C. Aggarwal", "Xiang Zhang", "Tianxiang Zhao", "Dongwon Lee", "Teng Xiao", "Yao Ma", "Huaxiu Yao", "Prasenjit Mitra", "Limeng Cui", "Xia \"Ben\" Hu", "Xuying Meng", "Dongsheng Luo", "Wei Jin", "Jundong Li", "Zhengyang Wang", "Thai Le", "Dawei Yin", "Suhang Wang", "Xiang Zhang", "Enyan Dai", "Dongsheng Luo", "Xianfeng Tang", "Chao Ma", "Kai Shu", "Wei Cheng", "Jiliang Tang", "Enhong Chen", "LIM Ee Peng", "Wenchao Yu", "Le Wu", "Wei Cheng", "Wei Wang", "Dongsheng Luo", "Suhang Wang", "Yuchen Bian", "Yaowei Yan", "Derron Xu", "Tianxiang Zhao", "Wenchao Yu", "Xiao Liu", "Hanghang Tong", "Ruoming Jin", "Jun Huan", "Dongjin Song", "Enyan Dai", "Dongkuan Xu", "Xuchao Zhang", "Guoren Wang", "Huan Liu", "Suhang Wang", "Kaize Ding", "Dongwon Lee", "Jundong Li", "Jiliang Tang", "Reza Zafarani", "Ruocheng Guo", "Yingtong Dou", "Philip S. Yu", "Lichao Sun", "Hao Liao", "Thai Le", "Xing Xie", "Xueying Ding", "Philip S. Yu", "Dongwon Lee", "Jiawei Zhang", "Suhang Wang", "Xianfeng Tang", "Kai Shu", "Zhengyang Wang", "Lifang He", "Huan Liu", "Yu Wang", "Yingtong Dou", "Maryam Tabar", "Haeseung Seo", "Jianfeng He", "Chenwei Zhang", "Cao (Danica) Xiao", "Thai Le", "Hengrui Zhang", "Chang-Tien Lu", "Enyan Dai", "Jimeng Sun", "Lucas M. Glass", "Guanjie Zheng", "Jessie Li", "Hua Wei", "Kan Wu", "Vikash Gayah", "Amit Sharma", "Cao (Danica) Xiao", "Enyan Dai", "Jimeng Sun", "Lucas M. Glass", "Fenglong Ma", "Weinan Zhang", "Yanmin Zhu", "Shuiwang Ji", "Hongyang Gao", "Xianfeng Tang", "Hao Yuan", "Suhang Wang", "Yaochen (Ethan) Xie", "Limei Wang", "Limeng Cui", "Meng Liu", "Haoming Jiang", "Xia \"Ben\" Hu", "Yizhou Sun", "Xin Luna Dong", "Yu Wang", "Haoyu Wang", "Xiang Ren", "Yifan Ethan Xu", "Tianxin Wei", "Chenwei Zhang", "Lei Cai", "Hongzhi Wen", "Hengrui Zhang", "Yaqing Wang", "Tuo Zhao", "Bowen Jin", "Jiliang Tang", "Suhang Wang", "Huaxiu Yao", "Haoming Jiang", "Jiliang Tang", "Prasenjit Mitra", "Yanwei Yu", "Zhengyang Wang", "Jessie Li", "Charu C. Aggarwal", "Wei Jin", "Limeng Cui", "Tuo Zhao", "Guanjie Zheng", "Yozen Liu", "Neil Shah", "Xiaorui Liu", "Tianxiang Zhao", "Yu Wang", "Han Xu", "Haoyu Wang", "Huan Liu", "Suhang Wang", "Dawei Yin", "Xiaorui Liu", "Wei Jin", "Yao Ma", "Xia \"Ben\" Hu", "Charu C. Aggarwal", "Xiangyu Zhao", "Han Xu", "Zhiwei Wang", "Wentao Wang", "Neil Shah", "Hongzhi Wen", "Jundong Li", "Xianfeng Tang", "Kai Shu", "Long Xia", "Jiliang Tang", "Xiaorui Liu", "Hongzhi Wen", "Yao Ma", "Han Xu", "Neil Shah", "Suhang Wang", "Xianfeng Tang", "Charu C. Aggarwal", "Xiangyu Zhao", "Hua Liu", "Yukuo Cen", "Yozen Liu", "Jiezhong Qiu", "Haoming Jiang", "Lingxiao Zhao", "Xing Xie", "Chuan Shi", "Jiawei Zhang", "Wentao Wang", "Philip S. Yu", "Yanfang (Fanny) Ye", "Jie Tang", "Tong Zhao", "Rongrong Ji", "Ya Zhang", "Fei Wu", "Philip S. Yu", "Jiawei Han", "Jiliang Tang", "Suhang Wang", "Jianyong Wang", "Huan Liu", "Latifur R. Khan", "Saket Sathe", "Yao Ma", "Xiaorui Liu", "Manish Gupta", "Srinivasan Parthasarathy", "Wei Wang", "Jiawei Zhang", "Jing Gao", "Mohammed Javeed Zaki", "Shiyu Chang", "Yanjie Fu", "Jaideep Srivastava", "Wenchao Yu", "Peixiang Zhao", "Xianfeng Tang", "Yizhou Sun", "Xiangnan Kong", "Liang Zhao", "Lingfei Wu (Teddy)", "Hao Peng", "Suhang Wang", "Zijing Ou", "Yao Ma", "Kun Kuang", "Xiang Zhang", "Enyan Dai", "Charu C. Aggarwal", "Huan Sun", "Jinyuan Fang"], "route": "searchPerson -> getCoauthors -> getCoauthors", "code": "info = {'name': 'Enyan Dai', 'organization': 'College of Information Sciences and Technology, The Pennsylvania State University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors1_list = getCoauthors(person_id = target_person_id)\n\ncoauthors2_list = []\nfor coauthor in coauthors1_list:\n    coauthors2_list.extend(getCoauthors(person_id = coauthor['person_id']))\n\ncoauthors2_names = [coauthor['name'] for coauthor in coauthors2_list]\n\nfinal_result = coauthors2_names\n", "result": ["Huan Liu", "Jiliang Tang", "Kai Shu", "Xianfeng Tang", "Enyan Dai", "Charu C. Aggarwal", "Xiang Zhang", "Tianxiang Zhao", "Dongwon Lee", "Teng Xiao", "Yao Ma", "Huaxiu Yao", "Prasenjit Mitra", "Limeng Cui", "Xia \"Ben\" Hu", "Xuying Meng", "Dongsheng Luo", "Wei Jin", "Jundong Li", "Zhengyang Wang", "Thai Le", "Dawei Yin", "Suhang Wang", "Xiang Zhang", "Enyan Dai", "Dongsheng Luo", "Xianfeng Tang", "Chao Ma", "Kai Shu", "Wei Cheng", "Jiliang Tang", "Enhong Chen", "LIM Ee Peng", "Wenchao Yu", "Le Wu", "Wei Cheng", "Wei Wang", "Dongsheng Luo", "Suhang Wang", "Yuchen Bian", "Yaowei Yan", "Derron Xu", "Tianxiang Zhao", "Wenchao Yu", "Xiao Liu", "Hanghang Tong", "Ruoming Jin", "Jun Huan", "Dongjin Song", "Enyan Dai", "Dongkuan Xu", "Xuchao Zhang", "Guoren Wang", "Huan Liu", "Suhang Wang", "Kaize Ding", "Dongwon Lee", "Jundong Li", "Jiliang Tang", "Reza Zafarani", "Ruocheng Guo", "Yingtong Dou", "Philip S. Yu", "Lichao Sun", "Hao Liao", "Thai Le", "Xing Xie", "Xueying Ding", "Philip S. Yu", "Dongwon Lee", "Jiawei Zhang", "Suhang Wang", "Xianfeng Tang", "Kai Shu", "Zhengyang Wang", "Lifang He", "Huan Liu", "Yu Wang", "Yingtong Dou", "Maryam Tabar", "Haeseung Seo", "Jianfeng He", "Chenwei Zhang", "Cao (Danica) Xiao", "Thai Le", "Hengrui Zhang", "Chang-Tien Lu", "Enyan Dai", "Jimeng Sun", "Lucas M. Glass", "Guanjie Zheng", "Jessie Li", "Hua Wei", "Kan Wu", "Vikash Gayah", "Amit Sharma", "Cao (Danica) Xiao", "Enyan Dai", "Jimeng Sun", "Lucas M. Glass", "Fenglong Ma", "Weinan Zhang", "Yanmin Zhu", "Shuiwang Ji", "Hongyang Gao", "Xianfeng Tang", "Hao Yuan", "Suhang Wang", "Yaochen (Ethan) Xie", "Limei Wang", "Limeng Cui", "Meng Liu", "Haoming Jiang", "Xia \"Ben\" Hu", "Yizhou Sun", "Xin Luna Dong", "Yu Wang", "Haoyu Wang", "Xiang Ren", "Yifan Ethan Xu", "Tianxin Wei", "Chenwei Zhang", "Lei Cai", "Hongzhi Wen", "Hengrui Zhang", "Yaqing Wang", "Tuo Zhao", "Bowen Jin", "Jiliang Tang", "Suhang Wang", "Huaxiu Yao", "Haoming Jiang", "Jiliang Tang", "Prasenjit Mitra", "Yanwei Yu", "Zhengyang Wang", "Jessie Li", "Charu C. Aggarwal", "Wei Jin", "Limeng Cui", "Tuo Zhao", "Guanjie Zheng", "Yozen Liu", "Neil Shah", "Xiaorui Liu", "Tianxiang Zhao", "Yu Wang", "Han Xu", "Haoyu Wang", "Huan Liu", "Suhang Wang", "Dawei Yin", "Xiaorui Liu", "Wei Jin", "Yao Ma", "Xia \"Ben\" Hu", "Charu C. Aggarwal", "Xiangyu Zhao", "Han Xu", "Zhiwei Wang", "Wentao Wang", "Neil Shah", "Hongzhi Wen", "Jundong Li", "Xianfeng Tang", "Kai Shu", "Long Xia", "Jiliang Tang", "Xiaorui Liu", "Hongzhi Wen", "Yao Ma", "Han Xu", "Neil Shah", "Suhang Wang", "Xianfeng Tang", "Charu C. Aggarwal", "Xiangyu Zhao", "Hua Liu", "Yukuo Cen", "Yozen Liu", "Jiezhong Qiu", "Haoming Jiang", "Lingxiao Zhao", "Xing Xie", "Chuan Shi", "Jiawei Zhang", "Wentao Wang", "Philip S. Yu", "Yanfang (Fanny) Ye", "Jie Tang", "Tong Zhao", "Rongrong Ji", "Ya Zhang", "Fei Wu", "Philip S. Yu", "Jiawei Han", "Jiliang Tang", "Suhang Wang", "Jianyong Wang", "Huan Liu", "Latifur R. Khan", "Saket Sathe", "Yao Ma", "Xiaorui Liu", "Manish Gupta", "Srinivasan Parthasarathy", "Wei Wang", "Jiawei Zhang", "Jing Gao", "Mohammed Javeed Zaki", "Shiyu Chang", "Yanjie Fu", "Jaideep Srivastava", "Wenchao Yu", "Peixiang Zhao", "Xianfeng Tang", "Yizhou Sun", "Xiangnan Kong", "Liang Zhao", "Lingfei Wu (Teddy)", "Hao Peng", "Suhang Wang", "Zijing Ou", "Yao Ma", "Kun Kuang", "Xiang Zhang", "Enyan Dai", "Charu C. Aggarwal", "Huan Sun", "Jinyuan Fang"], "exe_time": 2.5748913288116455}
{"Query_en": "Who are the collaborators of the collaborators of Liangjie Hong in Social Media field?", "Answer": ["Liangjie Hong", "Adam Henderson", "Xiaoting Zhao", " Aakash Sabharwal", "Liang Wu", "Jianling Wang", "Jingrui He", "Huan Liu", "Jiliang Tang", "JiaShu Zhao", "Long Xia", "Xiangyu Zhao", "Yao Ma", "Yiding Liu", "Zhuoye Ding", "Liangjie Hong", "Xiangnan He", "Lixin Zou", "Yanyan Lan", "Weinan Zhang", "Xiaokai Chu", "Li Zhao", "Lianghao Xia", "Chao Huang", "Weidong Liu", "Huan Liu", "Jundong Li", "Xia \"Ben\" Hu", "Liangjie Hong", "Guandong Xu", "Qiang Yang", "Alvin Chin", "Weike Pan", "Song Wang", "Diane Hu", "Yaochen Zhu", "Xiao Huang", "Hui Xiong", "Jing Ma", "Yong Ge", "Kewei Cheng", "Liangjie Hong", "Diane Hu", " Aakash Sabharwal", "Xiaoting Zhao", "Huan Liu", "Ruocheng Guo", "Jiliang Tang", "Kai Shu", "Suhang Wang", "Jundong Li", "Xia \"Ben\" Hu", "Reza Zafarani", "Kaize Ding", "Ruocheng Guo", "Liang Wu", "Charu C. Aggarwal", "Philip S. Yu", "Dongwon Lee", "Rishabh Mehrotra", "Jaap Kamps", "Lucas Maystre", "Ben Carterette", "Federico Tomasi", "Praveen Chandar", "Amr Ahmed", "S. V. N. Vishwanathan", "Quoc Viet Le", "Choon Hui Teo", "Alexandros Karatzoglou", "Markus Weimer", "Zachary Chase Lipton", "Alex Beutel", "Nick Erickson", "Ziqi Liu", "Alex Smola", "Alex Beutel", "Nicholas Monath", "Andrew Mccallum", "Manzil Zaheer", "Daniel Ribeiro Silva", "Pulcrano Salvatore", "Bhargav Kanagal", "Choon Hui Teo", "Marc Najork", "Liangjie Hong", "Dragomir Yankov", "Choon Hui Teo", "Liangjie Hong", "Alex Smola", "Rose Yu", "Yan Liu", "Minmin Chen", "Yizhou Sun", "Ed H. Chi", "Tianlong Chen", "Hao Ding", "Long Zhao", "Wei Wang", "Ziniu Hu", "Wangcheng Kang", "Ziyu Jiang", "Yunsheng Bai", "Yongduo Sui", "Denny Zhou", "Zenan Wang", "Liangjie Hong", "Jieping Ye", "Zhiwei Qin (Tony)", "Xiaocheng Tang", "James Caverlee", "Kaize Ding", "Ziwai Zhu", "Huan Liu", "Jundong Li", "Ed H. Chi", "Liangjie Hong", "Bokun Wang", "Diane Hu", "Kai Shu", "Wei Niu", "Yixin Liu", "Yuyan Wang", "Chenghao Liu", "Shirui Pan", "Diane Hu", "Liangjie Hong", "Adam Henderson", "Yiming Ying", "Huan Liu", "Neyo Yang", "Ruocheng Guo", "Jiawei Han", "Wei Wang", "Yunsheng Bai", "Ting Chen", "Ziniu Hu", "Kai-Wei Chang", "Song Jiang", "Philip S. Yu", "Xifeng Yan", "Zijie Huang", "Manish Gupta", "Jing Gao", "Hongzhi Yin", "Hao Ding", "Xiang Ren", "Roshni G. Iyer (Roshni Iyer)", "Jie Tang", "Junheng Hao", "Chi Wang", "Haoyan Xu", "Kuansan Wang", "Quanquan Gu", "Lu-An Tang", "Shichang Zhang", "Muhao Chen", "Kewei Cheng", "Ling Chen", "Nitesh Chawla", "Charu C. Aggarwal", "Yuxiao Dong", "Tianyi Lin", "Chi Jin", "Mingsheng Long", "John C. Duchi", "Andrew Ng", "Wenshuo Guo", "Romain Lopez", "Lester Mackey", "Ziwai Zhu", "Jianling Wang", "Kyumin Lee", "Wei Niu", "Hancheng Ge", "Kaize Ding", "Xia \"Ben\" Hu", "Cheng Cao", "David Buttler", "Huan Liu", "Qingquan Song", "Ying Ding", "Prasenjit Mitra", "Jieping Ye", "Hongtu Zhu", "Xiaocheng Tang", "Qingyang Li", "Wenjie Shang", "Yang Yu", "Zhe Xu", "Yintai Ma", "Fan Zhang", "Jiarui Jin", "Michael I. Jordan", "Weinan Zhang", "Liangjie Hong", "Mengyue Yang", "Zhaodong Wang", "Soheil Sadeghi Eshkevari", "Ziqi Liu", "Xiaojun Xu", "Alex Smola", "Chaochao Chen", "Michalis Vazirgiannis", "Jie Tang", "Junchi Yan", "Liangjie Hong", "Daixin Wang", "Xiang Ren", "Bingzhe Wu", "Huan Liu", "Jundong Li", "Kai Shu", "Jianling Wang", "James Caverlee", "Ruocheng Guo", "Zhen Tan", "Chuxu Zhang", "Hanghang Tong", "Nitesh Chawla", "Yushun Dong", "Chenghao Liu", "Zhe Xu", "Song Wang", "Xueying Ding", "Yue Zhao", "Yingtong Dou", "Ziwai Zhu", "Hao Peng", "Zhihao Jia", "Yixin Liu", "Philip S. Yu", "Yanfang (Fanny) Ye", "Xiangliang Zhang", "Shirui Pan", "Diane Hu", "Adam Henderson", "Liangjie Hong", "Huazheng Wang", "Chuanhao Li", "Qingyun Wu", "Renqin Cai", "Lu Lin", "Dezhi Hong", "Zhendong Chu", "Nan Wang (Nolen)", "Hongbo Deng", "Jiawei Han", "Chi Wang", "Hang Li", "Kai-Wei Chang", "Xuan Yin", "Liangjie Hong", "Huan Liu", "Yushun Dong", "Kaize Ding", "Jing Ma", "Xiao Huang", "Xia \"Ben\" Hu", "Ruocheng Guo", "Liang Wu", "Song Wang", "Jiliang Tang", "Chuxu Zhang", "Junliang Yu", "Kai Shu", "Chenghao Liu", "Hongzhi Yin", "Ninghao Liu", "Aidong Zhang", "Jihong Wang", "Kewei Cheng", "Hanghang Tong", "Suhang Wang", "Nitesh Chawla", "Yanfang (Fanny) Ye", "Xiangliang Zhang", "Longqi Yang", "Yu Wang", "Zhenzhong Chen", "Liang Wu", "Jundong Li", "Jing Ma", "Liangjie Hong"], "route": "searchPerson -> getCoauthors -> getCoauthors", "code": "info = {'name': 'Liangjie Hong', 'interest': 'Social Media'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors1_list = getCoauthors(person_id = target_person_id)\n\ncoauthors2_list = []\nfor coauthor in coauthors1_list:\n    coauthors2_list.extend(getCoauthors(person_id = coauthor['person_id']))\n\ncoauthors2_names = [coauthor['name'] for coauthor in coauthors2_list]\n\nfinal_result = coauthors2_names\n", "result": ["Liangjie Hong", "Adam Henderson", "Xiaoting Zhao", " Aakash Sabharwal", "Liang Wu", "Jianling Wang", "Jingrui He", "Huan Liu", "Jiliang Tang", "JiaShu Zhao", "Long Xia", "Xiangyu Zhao", "Yao Ma", "Yiding Liu", "Zhuoye Ding", "Liangjie Hong", "Xiangnan He", "Lixin Zou", "Yanyan Lan", "Weinan Zhang", "Xiaokai Chu", "Li Zhao", "Lianghao Xia", "Chao Huang", "Weidong Liu", "Huan Liu", "Jundong Li", "Xia \"Ben\" Hu", "Liangjie Hong", "Guandong Xu", "Qiang Yang", "Alvin Chin", "Weike Pan", "Song Wang", "Diane Hu", "Yaochen Zhu", "Xiao Huang", "Hui Xiong", "Jing Ma", "Yong Ge", "Kewei Cheng", "Liangjie Hong", "Diane Hu", " Aakash Sabharwal", "Xiaoting Zhao", "Huan Liu", "Ruocheng Guo", "Jiliang Tang", "Kai Shu", "Suhang Wang", "Jundong Li", "Xia \"Ben\" Hu", "Reza Zafarani", "Kaize Ding", "Ruocheng Guo", "Liang Wu", "Charu C. Aggarwal", "Philip S. Yu", "Dongwon Lee", "Rishabh Mehrotra", "Jaap Kamps", "Lucas Maystre", "Ben Carterette", "Federico Tomasi", "Praveen Chandar", "Amr Ahmed", "S. V. N. Vishwanathan", "Quoc Viet Le", "Choon Hui Teo", "Alexandros Karatzoglou", "Markus Weimer", "Zachary Chase Lipton", "Alex Beutel", "Nick Erickson", "Ziqi Liu", "Alex Smola", "Alex Beutel", "Nicholas Monath", "Andrew Mccallum", "Manzil Zaheer", "Daniel Ribeiro Silva", "Pulcrano Salvatore", "Bhargav Kanagal", "Choon Hui Teo", "Marc Najork", "Liangjie Hong", "Dragomir Yankov", "Choon Hui Teo", "Liangjie Hong", "Alex Smola", "Rose Yu", "Yan Liu", "Minmin Chen", "Yizhou Sun", "Ed H. Chi", "Tianlong Chen", "Hao Ding", "Long Zhao", "Wei Wang", "Ziniu Hu", "Wangcheng Kang", "Ziyu Jiang", "Yunsheng Bai", "Yongduo Sui", "Denny Zhou", "Zenan Wang", "Liangjie Hong", "Jieping Ye", "Zhiwei Qin (Tony)", "Xiaocheng Tang", "James Caverlee", "Kaize Ding", "Ziwai Zhu", "Huan Liu", "Jundong Li", "Ed H. Chi", "Liangjie Hong", "Bokun Wang", "Diane Hu", "Kai Shu", "Wei Niu", "Yixin Liu", "Yuyan Wang", "Chenghao Liu", "Shirui Pan", "Diane Hu", "Liangjie Hong", "Adam Henderson", "Yiming Ying", "Huan Liu", "Neyo Yang", "Ruocheng Guo", "Jiawei Han", "Wei Wang", "Yunsheng Bai", "Ting Chen", "Ziniu Hu", "Kai-Wei Chang", "Song Jiang", "Philip S. Yu", "Xifeng Yan", "Zijie Huang", "Manish Gupta", "Jing Gao", "Hongzhi Yin", "Hao Ding", "Xiang Ren", "Roshni G. Iyer (Roshni Iyer)", "Jie Tang", "Junheng Hao", "Chi Wang", "Haoyan Xu", "Kuansan Wang", "Quanquan Gu", "Lu-An Tang", "Shichang Zhang", "Muhao Chen", "Kewei Cheng", "Ling Chen", "Nitesh Chawla", "Charu C. Aggarwal", "Yuxiao Dong", "Tianyi Lin", "Chi Jin", "Mingsheng Long", "John C. Duchi", "Andrew Ng", "Wenshuo Guo", "Romain Lopez", "Lester Mackey", "Ziwai Zhu", "Jianling Wang", "Kyumin Lee", "Wei Niu", "Hancheng Ge", "Kaize Ding", "Xia \"Ben\" Hu", "Cheng Cao", "David Buttler", "Huan Liu", "Qingquan Song", "Ying Ding", "Prasenjit Mitra", "Jieping Ye", "Hongtu Zhu", "Xiaocheng Tang", "Qingyang Li", "Wenjie Shang", "Yang Yu", "Zhe Xu", "Yintai Ma", "Fan Zhang", "Jiarui Jin", "Michael I. Jordan", "Weinan Zhang", "Liangjie Hong", "Mengyue Yang", "Zhaodong Wang", "Soheil Sadeghi Eshkevari", "Ziqi Liu", "Xiaojun Xu", "Alex Smola", "Chaochao Chen", "Michalis Vazirgiannis", "Jie Tang", "Junchi Yan", "Liangjie Hong", "Daixin Wang", "Xiang Ren", "Bingzhe Wu", "Huan Liu", "Jundong Li", "Kai Shu", "Jianling Wang", "James Caverlee", "Ruocheng Guo", "Zhen Tan", "Chuxu Zhang", "Hanghang Tong", "Nitesh Chawla", "Yushun Dong", "Chenghao Liu", "Zhe Xu", "Song Wang", "Xueying Ding", "Yue Zhao", "Yingtong Dou", "Ziwai Zhu", "Hao Peng", "Zhihao Jia", "Yixin Liu", "Philip S. Yu", "Yanfang (Fanny) Ye", "Xiangliang Zhang", "Shirui Pan", "Diane Hu", "Adam Henderson", "Liangjie Hong", "Huazheng Wang", "Chuanhao Li", "Qingyun Wu", "Renqin Cai", "Lu Lin", "Dezhi Hong", "Zhendong Chu", "Nan Wang (Nolen)", "Hongbo Deng", "Jiawei Han", "Chi Wang", "Hang Li", "Kai-Wei Chang", "Xuan Yin", "Liangjie Hong", "Huan Liu", "Yushun Dong", "Kaize Ding", "Jing Ma", "Xiao Huang", "Xia \"Ben\" Hu", "Ruocheng Guo", "Liang Wu", "Song Wang", "Jiliang Tang", "Chuxu Zhang", "Junliang Yu", "Kai Shu", "Chenghao Liu", "Hongzhi Yin", "Ninghao Liu", "Aidong Zhang", "Jihong Wang", "Kewei Cheng", "Hanghang Tong", "Suhang Wang", "Nitesh Chawla", "Yanfang (Fanny) Ye", "Xiangliang Zhang", "Longqi Yang", "Yu Wang", "Zhenzhong Chen", "Liang Wu", "Jundong Li", "Jing Ma", "Liangjie Hong"], "exe_time": 2.4794254302978516}
{"Query_en": "What is the abstract of the representative work of Yuewei Lin at Department of Computer Science and Engineering, University of South Carolina?", "Answer": "We propose a new learning-based method for estimating 2D human pose from a single image, using Dual-Source Deep Convolutional Neural Networks (DS-CNN). Recently, many methods have been developed to estimate human pose by using pose priors that are estimated from physiologically inspired graphical models or learned from a holistic perspective. In this paper, we propose to integrate both the local (body) part appearance and the holistic view of each local part for more accurate human pose estimation. Specifically, the proposed DS-CNN takes a set of image patches (category-independent object proposals for training and multi-scale sliding windows for testing) as the input and then learns the appearance of each local part by considering their holistic views in the MI body. Using DS-CNN, we achieve both joint detection, which determines whether an image patch contains a body joint, and joint localization, which finds the exact location of the joint in the image patch. Finally, we develop an algorithm to combine these joint detection/localization results from all the image patches for estimating the human pose. The experimental results show the effectiveness of the proposed method by comparing to the state-of-the-art human-pose estimation methods based on pose priors that are estimated from physiologically inspired graphical models or learned from a holistic perspective.", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Yuewei Lin', 'organization': 'Department of Computer Science and Engineering, University of South Carolina'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_abstract = target_publication_info['abstract']\nfinal_result = target_abstract\n", "result": "We propose a new learning-based method for estimating 2D human pose from a single image, using Dual-Source Deep Convolutional Neural Networks (DS-CNN). Recently, many methods have been developed to estimate human pose by using pose priors that are estimated from physiologically inspired graphical models or learned from a holistic perspective. In this paper, we propose to integrate both the local (body) part appearance and the holistic view of each local part for more accurate human pose estimation. Specifically, the proposed DS-CNN takes a set of image patches (category-independent object proposals for training and multi-scale sliding windows for testing) as the input and then learns the appearance of each local part by considering their holistic views in the MI body. Using DS-CNN, we achieve both joint detection, which determines whether an image patch contains a body joint, and joint localization, which finds the exact location of the joint in the image patch. Finally, we develop an algorithm to combine these joint detection/localization results from all the image patches for estimating the human pose. The experimental results show the effectiveness of the proposed method by comparing to the state-of-the-art human-pose estimation methods based on pose priors that are estimated from physiologically inspired graphical models or learned from a holistic perspective.", "exe_time": 2.5109682083129883}
{"Query_en": "What is the PDF link of the representative work of Philip S. Yu at Department of Computer Science, University of Illinois at Chicago?", "Answer": "https://static.aminer.cn/upload/pdf/1139/561/2000/53e9aa41b7602d97033b0697_0.pdf", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Philip S. Yu', 'organization': 'Department of Computer Science, University of Illinois at Chicago'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_pdf = target_publication_info['pdf_link']\nfinal_result = target_pdf\n", "result": "https://static.aminer.cn/upload/pdf/1139/561/2000/53e9aa41b7602d97033b0697_0.pdf", "exe_time": 2.5281906127929688}
{"Query_en": "Which journal or conference included the representative work of Jiarui Gan at Department of Computer Science, University of Oxford?", "Answer": {"info": {"name": "IEEE Transactions on Intelligent Transportation Systems"}, "issue": "8", "volume": "19"}, "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Jiarui Gan', 'organization': 'Department of Computer Science, University of Oxford'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_venue = target_publication_info['venue']\nfinal_result = target_venue\n", "result": {"info": {"name": "IEEE Transactions on Intelligent Transportation Systems"}, "issue": "8", "volume": "19"}, "exe_time": 2.472658157348633}
{"Query_en": "What is the abstract of the representative work of Parnian Kassraie in Steady State field?", "Answer": "Contextual bandits are a rich model for sequential decision making given side information, with important applications, e.g., in recommender systems. We propose novel algorithms for contextual bandits harnessing neural networks to approximate the unknown reward function. We resolve the open problem of proving sublinear regret bounds in this setting for general context sequences, considering both fully-connected and convolutional networks. To this end, we first analyze NTK-UCB, a kernelized bandit optimization algorithm employing the Neural Tangent Kernel (NTK), and bound its regret in terms of the NTK maximum information gain gamma(T), a complexity parameter capturing the difficulty of learning. Our bounds on gamma(T) for the NTK may be of independent interest. We then introduce our neural network based algorithm NN-UCB, and show that its regret closely tracks that of NTK-UCB. Under broad non-parametric assumptions about the reward function, our approach converges to the optimal policy at a (O) over tilde (T-1/2d) rate, where d is the dimension of the context.", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Parnian Kassraie', 'interest': 'Steady State'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_abstract = target_publication_info['abstract']\nfinal_result = target_abstract\n", "result": "Contextual bandits are a rich model for sequential decision making given side information, with important applications, e.g., in recommender systems. We propose novel algorithms for contextual bandits harnessing neural networks to approximate the unknown reward function. We resolve the open problem of proving sublinear regret bounds in this setting for general context sequences, considering both fully-connected and convolutional networks. To this end, we first analyze NTK-UCB, a kernelized bandit optimization algorithm employing the Neural Tangent Kernel (NTK), and bound its regret in terms of the NTK maximum information gain gamma(T), a complexity parameter capturing the difficulty of learning. Our bounds on gamma(T) for the NTK may be of independent interest. We then introduce our neural network based algorithm NN-UCB, and show that its regret closely tracks that of NTK-UCB. Under broad non-parametric assumptions about the reward function, our approach converges to the optimal policy at a (O) over tilde (T-1/2d) rate, where d is the dimension of the context.", "exe_time": 2.423210382461548}
{"Query_en": "What is the PDF link of the representative work of Junxiong Zhu in Intent Recommendation field?", "Answer": "https://static.aminer.cn/upload/pdf/program/5d3ed25a275ded87f97deaab_0.pdf", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Junxiong Zhu', 'interest': 'Intent Recommendation'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_pdf = target_publication_info['pdf_link']\nfinal_result = target_pdf\n", "result": "https://static.aminer.cn/upload/pdf/program/5d3ed25a275ded87f97deaab_0.pdf", "exe_time": 2.4525299072265625}
{"Query_en": "Which journal or conference included the representative work of Wenchao Yu in Synthetic Aperture Radar (sar) field?", "Answer": {"info": {"name": "NIPS 2020"}, "volume": "33"}, "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Wenchao Yu', 'interest': 'Synthetic Aperture Radar (sar)'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_venue = target_publication_info['venue']\nfinal_result = target_venue\n", "result": {"info": {"name": "NIPS 2020"}, "volume": "33"}, "exe_time": 2.497159957885742}
