{"Query_en": "Research interests of Sebastian Moreno at Universidad Adolfo Ibanez", "Answer": ["Real World Data", "Data Mining", "Complex Networks", "Neural Gas", "Input Space", "Self Organizing Maps", "Artificial Neural Networks", "Artificial Neural Network", "Graph Theory", "Computer Experiment"], "route": "searchPerson", "code": "info = {'name': 'Sebastian Moreno', 'organization': 'Universidad Adolfo Ibanez'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ninterests_list = target_person_id\nfinal_result = interests_list\n", "result": "5630e74845cedb3399bd7a89", "exe_time": 1.4125747680664062}
{"Query_en": "Citation count of Jungho Park at OnePredict", "Answer": 410, "route": "searchPerson", "code": "info = {'name': 'Jungho Park', 'organization': 'OnePredict'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\n# Assuming the representative work is the one with the most citations\n# The list was sorted by citation\nmax_citation = publications_list[0]\nfinal_result = max_citation['num_citation']\n", "result": 69, "exe_time": 1.9215061664581299}
{"Query_en": "Number of published papers by Huazheng Wang at Department of Electrical and Computer Engineering, Princeton University", "Answer": 29, "route": "searchPerson", "code": "info = {'name': 'Huazheng Wang', 'organization': 'Department of Electrical and Computer Engineering, Princeton University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\n# Assuming the representative work is the one with the most citations\n# The list was sorted by citation\nmax_citation = publications_list[0]\nfinal_result = max_citation['num_citation']\n", "result": 112, "exe_time": 2.063743829727173}
{"Query_en": "Which institution does Karalias Nikolaos who researches in Karalias Nikolaos field belong to?", "Answer": "École Polytechnique Fédérale de Lausanne", "route": "searchPerson", "code": "info = {'name': 'Karalias Nikolaos', 'interest': 'Karalias Nikolaos'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_organization = target_person_basic_info['organization']\nfinal_result = target_person_organization\n", "result": "École Polytechnique Fédérale de Lausanne", "exe_time": 1.7605795860290527}
{"Query_en": "Citation count of Huan Liu who researches in Social Media field", "Answer": 80639, "route": "searchPerson", "code": "info = {'name': 'Huan Liu', 'interest': 'Social Media'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_num_citation = target_publication_dict['num_citation']\nfinal_result = target_num_citation\n", "result": 3556, "exe_time": 2.0257863998413086}
{"Query_en": "Number of papers published by Mustafa Mustafa who researches in Au Collision field", "Answer": 60, "route": "searchPerson", "code": "info = {'name': 'Mustafa Mustafa', 'interest': 'Au Collision'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_num_citation = target_publication_dict['num_citation']\nfinal_result = target_num_citation\n", "result": 283, "exe_time": 2.062324285507202}
{"Query_en": "Who are the researchers at Institute of Computing Technology, Chinese Academy of Sciences?", "Answer": ["Yongchun Zhu", "Ping Luo", "Di Yao", "Ying Sun", "Liang Hou", "Kun Zhang", "Gongwei Chen", "Zezhi Shao", "Shun Lu"], "route": "searchPerson", "code": "info = {'organization': 'Institute of Computing Technology, Chinese Academy of Sciences'}\norganization = info['organization']\n\nperson_list = searchPerson(organization = organization)\nname_list = [person_list[i]['name'] for i in range(len(person_list))]\nfinal_result = name_list\n", "result": ["Yongchun Zhu", "Ping Luo", "Di Yao", "Ying Sun", "Liang Hou", "Kun Zhang", "Gongwei Chen", "Zezhi Shao", "Shun Lu"], "exe_time": 1.0320243835449219}
{"Query_en": "Who are the researchers in Alzheimer's Disease field?", "Answer": ["Paul M. Thompson", "Jieping Ye", "Heng Huang", "Weidong Cai (Tom)", "Larsson Omberg", "Jiayu Zhou", "Hiroko H. Dodge", "Hua Wang", "Xinyue Liu"], "route": "searchPerson", "code": "info = {'interest': 'Alzheimer\\'s Disease'}\ninterest = info['interest']\n\nperson_list = searchPerson(interest = interest)\nname_list = [person_list[i]['name'] for i in range(len(person_list))]\nfinal_result = name_list\n", "result": ["Paul M. Thompson", "Jieping Ye", "Heng Huang", "Weidong Cai (Tom)", "Larsson Omberg", "Jiayu Zhou", "Hiroko H. Dodge", "Hua Wang", "Xinyue Liu"], "exe_time": 0.9980382919311523}
{"Query_en": "Who are the collaborators of Ricardo Bastos Cavalcante Prudêncio at Informatics Center, Universidade Federal de Pernambuco?", "Answer": ["José Hernández-Orallo"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Ricardo Bastos Cavalcante Prudêncio', 'organization': 'Informatics Center, Universidade Federal de Pernambuco'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\ncoauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\nfinal_result = coauthors_name_list\n", "result": ["José Hernández-Orallo"], "exe_time": 2.0545873641967773}
{"Query_en": "Who are the collaborators of Bo Liu in Autonomous Vehicle Navigation field?", "Answer": ["Sihang Guo", "Jure Leskovec"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Bo Liu', 'interest': 'Autonomous Vehicle Navigation'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\ncoauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\nfinal_result = coauthors_name_list\n", "result": ["Sihang Guo", "Jure Leskovec"], "exe_time": 1.8696014881134033}
{"Query_en": "Who at Yandex Moscow, Russia has a collaboration with Sergey Ovcharenko?", "Answer": ["Ruslan Grokhovetskiy"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Sergey Ovcharenko', 'organization': 'Yandex Moscow, Russia'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\n\nfinal_result = coauthors_list\n", "result": [{"person_id": "5d415c037390bff0db70be84", "name": "Dmitry Solomentsev", "relation": "coauthor"}, {"person_id": "5d415c037390bff0db70be79", "name": "Ivan Bushmarinov", "relation": "coauthor"}, {"person_id": "5d415c037390bff0db70be6f", "name": "Ruslan Grokhovetskiy", "relation": "coauthor"}, {"person_id": "5d415c037390bff0db70be51", "name": "Alexander Ganshin", "relation": "coauthor"}, {"person_id": "5d415c027390bff0db70be46", "name": "Irina Rudenko", "relation": "coauthor"}, {"person_id": "5d415c027390bff0db70be3a", "name": "Vladimir Ivashkin", "relation": "coauthor"}, {"person_id": "5d415c027390bff0db70be2f", "name": "Vadim Lebedev", "relation": "coauthor"}], "exe_time": 1.6241536140441895}
{"Query_en": "Who in Name Disambiguation field has a collaboration with Bo Chen?", "Answer": ["Jie Tang", "Jing Zhang", "Fanjin Zhang"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Bo Chen', 'interest': 'Name Disambiguation'}\ninterest = info['interest']\nname = info['name']\n\nperson_list = searchPerson(interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\n\nfinal_result = coauthors_list\n", "result": [{"person_id": "5619120945cedb3397d40ba0", "name": "Juanzi Li", "relation": "coauthor"}, {"person_id": "53f471e2dabfaee02adc1c13", "name": "Yuxiao Dong", "relation": "coauthor"}, {"person_id": "53f48d0adabfaea88777b455", "name": "Jing Zhang", "relation": "coauthor"}, {"person_id": "561d197f45cedb339803d282", "name": "Ming Ding", "relation": "coauthor"}, {"person_id": "562d41dd45cedb3398da2eba", "name": "Jiezhong Qiu", "relation": "coauthor"}, {"person_id": "560590d745ce1e595e69ce3f", "name": "Hongxia Yang", "relation": "coauthor"}, {"person_id": "5d415c0c7390bff0db70c4ba", "name": "Xiao Liu", "relation": "coauthor"}, {"person_id": "5d415bd07390bff0db709a10", "name": "Yukuo Cen", "relation": "coauthor"}, {"person_id": "53f59592dabfaee491f8045b", "name": "Ying Ding", "relation": "coauthor"}, {"person_id": "53f4d211dabfaeedd877fb9d", "name": "Jimeng Sun", "relation": "coauthor"}, {"person_id": "542bc885dabfae1ad8953314", "name": "Chang Zhou", "relation": "coauthor"}, {"person_id": "53f46bafdabfaee43ed0b82f", "name": "Kuansan Wang", "relation": "coauthor"}, {"person_id": "53f556b8dabfaea7cd1d5a96", "name": "Hanghang Tong", "relation": "coauthor"}, {"person_id": "5d415bcd7390bff0db7097f3", "name": "Zhengxiao Du", "relation": "coauthor"}, {"person_id": "5f55ae384c775e3a797016dd", "name": "Bo Chen", "relation": "coauthor"}, {"person_id": "5de85c49530c704aab741002", "name": "Jifan Yu", "relation": "coauthor"}, {"person_id": "5d415bd07390bff0db709a1a", "name": "Xu Zou", "relation": "coauthor"}, {"person_id": "53f48d14dabfaea7cd1d1283", "name": "Nitesh Chawla", "relation": "coauthor"}, {"person_id": "5d415c0c7390bff0db70c4b0", "name": "Fanjin Zhang", "relation": "coauthor"}, {"person_id": "542a63f1dabfae646d55b020", "name": "Zhiyuan Liu", "relation": "coauthor"}, {"person_id": "53f556b7dabfaea7cd1d5889", "name": "Michalis Vazirgiannis", "relation": "coauthor"}, {"person_id": "53f47977dabfae8a6845b643", "name": "Philip S. Yu", "relation": "coauthor"}, {"person_id": "645afe25c81747b42a805d7a", "name": "Zhenyu Hou", "relation": "coauthor"}, {"person_id": "5486c666dabfae9b40134002", "name": "Jingren Zhou", "relation": "coauthor"}, {"person_id": "53fa12d0dabfae8faa5a36eb", "name": "Xiao Liu（Tracy Xiao Liu）", "relation": "coauthor"}], "exe_time": 1.4943616390228271}
{"Query_en": "What are the papers published by Rongfan Li at University of Electronic Science and Technology of China?", "Answer": ["Land Deformation Prediction Via Slope-Aware Graph Neural Networks", "Mining Spatio-Temporal Relations via Self-Paced Graph Contrastive Learning", "Landslide Displacement Prediction via Attentive Graph Neural Network", "Probabilistic Fine-Grained Urban Flow Inference with Normalizing Flows.", "Dynamic Manifold Learning for Land Deformation Forecasting.", "A Probabilistic Framework for Land Deformation Prediction (Student Abstract)."], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Rongfan Li', 'organization': 'University of Electronic Science and Technology of China'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\npublications_title_list = [publication['title'] for publication in publications_list]\nfinal_result = publications_title_list\n", "result": ["Land Deformation Prediction Via Slope-Aware Graph Neural Networks", "Mining Spatio-Temporal Relations via Self-Paced Graph Contrastive Learning", "Landslide Displacement Prediction via Attentive Graph Neural Network", "Probabilistic Fine-Grained Urban Flow Inference with Normalizing Flows.", "Dynamic Manifold Learning for Land Deformation Forecasting.", "A Probabilistic Framework for Land Deformation Prediction (Student Abstract)."], "exe_time": 1.837350606918335}
{"Query_en": "What is the citation count of the representative work of Chenyou Fan at School of Artificial Intelligence, South China Normal University?", "Answer": 235, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Chenyou Fan', 'organization': 'School of Artificial Intelligence, South China Normal University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\n# Assuming the representative work is the one with the most citations\n# The list was sorted by citation\nmax_citation = publications_list[0]\nfinal_result = max_citation['num_citation']\n", "result": 235, "exe_time": 2.107044219970703}
{"Query_en": "In which year was the representative work of Hao Chen at Department of Computer Science, University of Maryland published?", "Answer": 2018, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Hao Chen', 'organization': 'Department of Computer Science, University of Maryland'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\nmax_citation = publications_list[0]\nfinal_result = max_citation['year']\n", "result": 2018, "exe_time": 1.8498542308807373}
{"Query_en": "Who are the authors of the representative work of Sanyam Kapoor at New York University?", "Answer": ["Cinjon Resnick", "Roberta Raileanu", "Sanyam Kapoor", "Alex Peysakhovich", "Kyunghyun Cho", "Joan Bruna"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Sanyam Kapoor', 'organization': 'New York University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\ncoauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\nfinal_result = coauthors_name_list\n", "result": "exe error", "exe_time": 1.8497910499572754}
{"Query_en": "What are the papers published by Weiping Song in Graph Neural Networks field?", "Answer": ["AutoInt: Automatic Feature Interaction Learning via Self-Attentive Neural Networks.", "Session-Based Social Recommendation via Dynamic Graph Attention Networks.", "DisenHAN: Disentangled Heterogeneous Graph Attention Network for Recommendation", "TIMME: Twitter Ideology-detection via Multi-task Multi-relational  Embedding", "Explainable Knowledge Graph-based Recommendation via Deep Reinforcement Learning.", "KGNN: Harnessing Kernel-based Networks for Semi-supervised Graph Classification", "Deep Graph Mutual Learning for Cross-domain Recommendation."], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Weiping Song', 'interest': 'Graph Neural Networks'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\npublications_title_list = [publication['title'] for publication in publications_list]\nfinal_result = publications_title_list\n", "result": ["AutoInt: Automatic Feature Interaction Learning via Self-Attentive Neural Networks.", "Session-Based Social Recommendation via Dynamic Graph Attention Networks.", "DisenHAN: Disentangled Heterogeneous Graph Attention Network for Recommendation", "TIMME: Twitter Ideology-detection via Multi-task Multi-relational  Embedding", "Explainable Knowledge Graph-based Recommendation via Deep Reinforcement Learning.", "KGNN: Harnessing Kernel-based Networks for Semi-supervised Graph Classification", "Deep Graph Mutual Learning for Cross-domain Recommendation."], "exe_time": 1.7817983627319336}
{"Query_en": "What is the citation count of the representative work of Reza Zafarani in Social Media field?", "Answer": 946, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Reza Zafarani', 'interest': 'Social Media'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_num_citation = target_publication_dict['num_citation']\nfinal_result = target_num_citation\n", "result": 946, "exe_time": 2.0953683853149414}
{"Query_en": "In which year was the representative work of George Zerveas in Transformer field published?", "Answer": 2021, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'George Zerveas', 'interest': 'Transformer'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_num_citation = target_publication_dict['num_citation']\nfinal_result = target_num_citation\n", "result": 440, "exe_time": 2.0775184631347656}
{"Query_en": "Who are the authors of the representative work of Shubham Agrawal in Driving Simulator field?", "Answer": ["Agrawal, Shubham", "Panigrahi, K.B.", "Tiwari, M.K."], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Shubham Agrawal', 'interest': 'Driving Simulator'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\ncoauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\nfinal_result = coauthors_name_list\n", "result": ["Narayan Bhamidipati", "Ivan Stojkovic", "Djordje Gligorijevic", "Jelena Gligorijevic", "Shabhareesh Komirishetty", "Zoran Obradovic", "Martin Pavlovski"], "exe_time": 1.884538173675537}
{"Query_en": "Is Benjamin Eysenbach at Department of Computer Science, Princeton University male or female?", "Answer": "male", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Benjamin Eysenbach', 'organization': 'Department of Computer Science, Princeton University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_gender = target_person_basic_info['gender']\nfinal_result = target_person_gender\n", "result": "male", "exe_time": 1.8603618144989014}
{"Query_en": "What is the title of Jie Lu at University of Technology Sydney?", "Answer": "Distinguished Professor", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Jie Lu', 'organization': 'University of Technology Sydney'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_title = target_person_basic_info['title']\nfinal_result = target_person_title\n", "result": "exe error", "exe_time": 1.7630796432495117}
{"Query_en": "What is the introduction of Michael Oberst at MIT?", "Answer": "I’m a CS PhD student at MIT, working with David Sontag in the Clinical Machine Learning research group. My research is focused on bringing together ideas from causal inference and machine learning to build predictive models that are more robust (e.g., to dataset shift) and to improve clinical decision making using observational data.", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Michael Oberst', 'organization': 'MIT'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_bio = target_person_basic_info['bio']\nfinal_result = target_person_bio\n", "result": "I’m a CS PhD student at MIT, working with David Sontag in the Clinical Machine Learning research group. My research is focused on bringing together ideas from causal inference and machine learning to build predictive models that are more robust (e.g., to dataset shift) and to improve clinical decision making using observational data.", "exe_time": 1.7147254943847656}
{"Query_en": "What is the educational background of Ben Goodrich at Google Brain?", "Answer": "", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Ben Goodrich', 'organization': 'Google Brain'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_education_experience = target_person_basic_info['education_experience']\nfinal_result = target_person_education_experience\n", "result": "", "exe_time": 1.9394335746765137}
{"Query_en": "What is the email of Lorenzo Perini at DTAI Lab, KU Leuven?", "Answer": "lorenzo.perini@kuleuven.be", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Lorenzo Perini', 'organization': 'DTAI Lab, KU Leuven'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_email = target_person_basic_info['email']\nfinal_result = target_person_email\n", "result": "lorenzo.perini@kuleuven.be", "exe_time": 1.8395326137542725}
{"Query_en": "Is Yingxue Zhang in Traffic Estimation field male or female?", "Answer": "female", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Yingxue Zhang', 'interest': 'Traffic Estimation'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_gender = target_person_basic_info['gender']\nfinal_result = target_person_gender\n", "result": "female", "exe_time": 1.7820963859558105}
{"Query_en": "What is the title of Chengxuan Ying in Acute Tubular Necrosis field?", "Answer": "Research Intern", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Chengxuan Ying', 'interest': 'Acute Tubular Necrosis'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_title = target_person_basic_info['title']\nfinal_result = target_person_title\n", "result": "exe error", "exe_time": 1.8441529273986816}
{"Query_en": "What is the introduction of Wenwu Ou in Reinforcement Learning field?", "Answer": "Responsible for products search algorithm team of Taobao，the largest e-commercial search in the world servicing for hundred millions of people every day，my team‘s work includes personalization search & recommendation, ranking feature and model design, ranking strategy and intelligent interaction，covers online learning, deep learning, reinforcement learning, model compression, natural language understanding and so on.", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Wenwu Ou', 'interest': 'Reinforcement Learning'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_bio = target_person_basic_info['bio']\nfinal_result = target_person_bio\n", "result": "Responsible for products search algorithm team of Taobao，the largest e-commercial search in the world servicing for hundred millions of people every day，my team‘s work includes personalization search & recommendation, ranking feature and model design, ranking strategy and intelligent interaction，covers online learning, deep learning, reinforcement learning, model compression, natural language understanding and so on.", "exe_time": 1.7938506603240967}
{"Query_en": "What is the educational background of Hunter Lang in Data Editing field?", "Answer": "undergrad., Math and EECS MIT<br><br>M.Eng. at MIT<br><br>Ph.D. student at MIT", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Hunter Lang', 'interest': 'Data Editing'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_education_experience = target_person_basic_info['education_experience']\nfinal_result = target_person_education_experience\n", "result": "undergrad., Math and EECS MIT<br><br>M.Eng. at MIT<br><br>Ph.D. student at MIT", "exe_time": 1.9376780986785889}
{"Query_en": "What is the email of Ilias Diakonikolas in Boolean Function field?", "Answer": "Ilias.diakonikolas@gmail.com;ilias@cs.wisc.edu", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Ilias Diakonikolas', 'interest': 'Boolean Function'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_email = target_person_basic_info['email']\nfinal_result = target_person_email\n", "result": "Ilias.diakonikolas@gmail.com;ilias@cs.wisc.edu", "exe_time": 1.762451171875}
{"Query_en": "Who among the collaborators of Aijun An at Department of Computer Science and Engineering, York University are researching in Data Mining field?", "Answer": ["Vincent Shin-Mu Tseng"], "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Aijun An', 'organization': 'Department of Computer Science and Engineering, York University'}\nname = info['name']\norganization = info['organization']\ntarget_interest = info['interest']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthor_list = getCoauthors(person_id = target_person_id)\n\ntarget_coauthor_names = []\nfor coauthor in coauthor_list:\n    coauthor_id = coauthor['person_id']\n    coauthor_interests_list = getPersonInterest(person_id = coauthor_id)\n    if target_interest in coauthor_interests_list:\n        target_coauthor_names.append(coauthor['name'])\n\nfinal_result = target_coauthor_names\n", "result": "exe error", "exe_time": 2.801952838897705}
{"Query_en": "Who has the highest citation count among the collaborators of Jignesh Parmar at Microsoft?", "Answer": "Mikhail Bilenko", "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Jignesh Parmar', 'organization': 'Microsoft'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\n\ncoauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\n\nfinal_result = coauthors_name_list\n", "result": ["Artidoro Pagnoni", "Mohammad Zeeshan Siddiqui", "Prabhat Roy", "Gani Nazirov", "Pete Luferenko", "Gleb Krivosheev", "Najeeb Kazmi", "Abhishek Goswami", "Senja Filipi", "Vadim Eksarevskiy", "Yiwen Zhu", "Zeeshan Ahmed", "Saeed Amizadeh", "Sergiy Matusevych", "Mikhail Bilenko", "Matteo Interlandi", "Justin Ormont", "Gal Oshri", "Markus Weimer"], "exe_time": 1.8453755378723145}
{"Query_en": "Who has the most published papers among the collaborators of Emilia Oikarinen at Department of Computer Science, University of Helsinki?", "Answer": "Andreas Krause", "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Emilia Oikarinen', 'organization': 'Department of Computer Science, University of Helsinki'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\n\ncoauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\n\nfinal_result = coauthors_name_list\n", "result": ["Kai Puolamäki", "Andreas Henelius", "Rafael Savvides", "Tijl De Bie", "Jefrey Lijffijt", "Carlos Guestrin", "Andreas Krause"], "exe_time": 1.9910848140716553}
{"Query_en": "Who among the collaborators of Flavian Vasile in Recommender Systems field are at Criteoinstitution?", "Answer": ["David Rohde", "Martin Bompaire", "C. Mike Gartrell"], "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Flavian Vasile', 'interest': 'Recommender Systems'}\nname = info['name']\ninterest = info['interest']\ntarget_organization = info['organization']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthor_list = getCoauthors(person_id = target_person_id)\n\ntarget_coauthor_names = []\nfor coauthor in coauthor_list:\n    coauthor_name = coauthor['name']\n    coauthor_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_list[0]\n    coauthor_organization = coauthor_info['organization']\n    if coauthor_organization == target_organization:\n        target_coauthor_names.append(coauthor['name'])\n\nfinal_result = target_coauthor_names\n", "result": "exe error", "exe_time": 2.9463953971862793}
{"Query_en": "Who has the highest citation count among the collaborators of Lingshen He in Partial Differential Operator field?", "Answer": "Dacheng Tao", "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Lingshen He', 'interest': 'Partial Differential Operator'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\n\ncoauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\n\nfinal_result = coauthors_name_list\n", "result": ["Dacheng Tao"], "exe_time": 1.9126925468444824}
{"Query_en": "Who has the most published papers among the collaborators of Sibylle Hess in Boolean Matrix Factorization field?", "Answer": "Katharina Morik", "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Sibylle Hess', 'interest': 'Boolean Matrix Factorization'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\n\ncoauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\n\nfinal_result = coauthors_name_list\n", "result": ["Katharina Morik", "Nico Piatkowski"], "exe_time": 1.9059767723083496}
{"Query_en": "Who are the collaborators of the collaborators of Zifeng Wang at Department of Computer Science, University of Illinois Urbana-Champaign?", "Answer": ["Cao (Danica) Xiao", "Lucas M. Glass", "Christos Faloutsos", "Fei Wang", "Tianfan Fu", "Jie Tang", "Spiros Papadimitriou", "Zifeng Wang", "Shenda Hong", "Hanghang Tong", "Philip S. Yu", "Chaoqi Yang", "Joyce C Ho", "Marinka Zitnik", "Junyi Gao", "Yufei Tao", "U Kang", "Yanbo Xu", "Bang Liu", "Feng Zheng", "Buyue Qian", "Jimeng Sun", "Lucas M. Glass", "Tianfan Fu", "Fei Wang", "Fenglong Ma", "Jiayu Zhou", "Chaoqi Yang", "Junyi Gao", "Muchao Ye", "Shenda Hong", "Marinka Zitnik", "Yue Zhao", "Zifeng Wang", "Yaqing Wang", "Ian N. Davidson", "Xiang Wang", "Changchang Yin", "Yefeng Zheng", "Fei Wang", "Ping Zhang", "Jieping Ye", "Zifeng Wang", "Zifeng Wang", "Jimeng Sun", "Jimeng Sun", "Chaoqi Yang", "Zifeng Wang", "Cao (Danica) Xiao", "Junyi Gao", "Lucas M. Glass", "Huaxiu Yao", "Zhen Lin", "Lei Li", "Qiang Zhang", "Yefeng Zheng", "Zezhong Xu", "Jimeng Sun", "Cao (Danica) Xiao", "Lucas M. Glass", "Marinka Zitnik", "Jure Leskovec", "Yue Zhao", "Limei Wang", "Meng Liu", "Ya Zhang", "Rose Yu", "Zifeng Wang", "Nicholas Gao", "Jimeng Sun", "Cao (Danica) Xiao", "Tianfan Fu", "Junyi Gao", "Fenglong Ma", "Marinka Zitnik", "Chaoqi Yang", "Zoran Obradovic", "Nicholas D. Sidiropoulos", "Martin Pavlovski", "Zhenbang Wu", "Yue Zhao", "Limeng Cui", "Chacha Chen", "Zifeng Wang", "Djordje Gligorijevic", "Jelena Gligorijevic", "Ruiming Tang", "Huifeng Guo", "Jieming Zhu", "Weinan Zhang", "Yong Yu", "Zhenguo Li", "Zhou Zhao", "Mingxuan Yuan", "Rui Zhang", "Yingxue Zhang", "Chenxu Zhu", "Weike Pan", "Jiarui Qin", "Quanyu Dai", "Fei Wu", "Xue (Steve) Liu", "Dugang Liu"], "route": "searchPerson -> getCoauthors -> getCoauthors", "code": "info = {'name': 'Zifeng Wang', 'organization': 'Department of Computer Science, University of Illinois Urbana-Champaign'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors1_list = getCoauthors(person_id = target_person_id)\n\ncoauthors2_list = []\nfor coauthor in coauthors1_list:\n    coauthors2_list.extend(getCoauthors(person_id = coauthor['person_id']))\n\ncoauthors2_names = [coauthor['name'] for coauthor in coauthors2_list]\n\nfinal_result = coauthors2_names\n", "result": ["Cao (Danica) Xiao", "Lucas M. Glass", "Christos Faloutsos", "Fei Wang", "Tianfan Fu", "Jie Tang", "Spiros Papadimitriou", "Zifeng Wang", "Shenda Hong", "Hanghang Tong", "Philip S. Yu", "Chaoqi Yang", "Joyce C Ho", "Marinka Zitnik", "Junyi Gao", "Yufei Tao", "U Kang", "Yanbo Xu", "Bang Liu", "Feng Zheng", "Buyue Qian", "Jimeng Sun", "Lucas M. Glass", "Tianfan Fu", "Fei Wang", "Fenglong Ma", "Jiayu Zhou", "Chaoqi Yang", "Junyi Gao", "Muchao Ye", "Shenda Hong", "Marinka Zitnik", "Yue Zhao", "Zifeng Wang", "Yaqing Wang", "Ian N. Davidson", "Xiang Wang", "Changchang Yin", "Yefeng Zheng", "Fei Wang", "Ping Zhang", "Jieping Ye", "Zifeng Wang", "Zifeng Wang", "Jimeng Sun", "Jimeng Sun", "Chaoqi Yang", "Zifeng Wang", "Cao (Danica) Xiao", "Junyi Gao", "Lucas M. Glass", "Huaxiu Yao", "Zhen Lin", "Lei Li", "Qiang Zhang", "Yefeng Zheng", "Zezhong Xu", "Jimeng Sun", "Cao (Danica) Xiao", "Lucas M. Glass", "Marinka Zitnik", "Jure Leskovec", "Yue Zhao", "Limei Wang", "Meng Liu", "Ya Zhang", "Rose Yu", "Zifeng Wang", "Nicholas Gao", "Jimeng Sun", "Cao (Danica) Xiao", "Tianfan Fu", "Junyi Gao", "Fenglong Ma", "Marinka Zitnik", "Chaoqi Yang", "Zoran Obradovic", "Nicholas D. Sidiropoulos", "Martin Pavlovski", "Zhenbang Wu", "Yue Zhao", "Limeng Cui", "Chacha Chen", "Zifeng Wang", "Djordje Gligorijevic", "Jelena Gligorijevic", "Ruiming Tang", "Huifeng Guo", "Jieming Zhu", "Weinan Zhang", "Yong Yu", "Zhenguo Li", "Zhou Zhao", "Mingxuan Yuan", "Rui Zhang", "Yingxue Zhang", "Chenxu Zhu", "Weike Pan", "Jiarui Qin", "Quanyu Dai", "Fei Wu", "Xue (Steve) Liu", "Dugang Liu"], "exe_time": 2.6210885047912598}
{"Query_en": "Who are the collaborators of the collaborators of Paris Karakasis in Graph Alignment field?", "Answer": ["Nicholas D. Sidiropoulos", "Paris Karakasis", "Aritra Konar", "Christos Faloutsos", "Vagelis Papalexakis", "Ananthram Swami", "George Karypis"], "route": "searchPerson -> getCoauthors -> getCoauthors", "code": "info = {'name': 'Paris Karakasis', 'interest': 'Graph Alignment'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors1_list = getCoauthors(person_id = target_person_id)\n\ncoauthors2_list = []\nfor coauthor in coauthors1_list:\n    coauthors2_list.extend(getCoauthors(person_id = coauthor['person_id']))\n\ncoauthors2_names = [coauthor['name'] for coauthor in coauthors2_list]\n\nfinal_result = coauthors2_names\n", "result": ["Nicholas D. Sidiropoulos", "Paris Karakasis", "Aritra Konar", "Christos Faloutsos", "Vagelis Papalexakis", "Ananthram Swami", "George Karypis"], "exe_time": 2.4764554500579834}
{"Query_en": "What is the abstract of the representative work of Ananthram Swami at U.S. Army Research Laboratory?", "Answer": "Deep learning takes advantage of large datasets and computationally efficient training algorithms to outperform other approaches at various machine learning tasks. However, imperfections in the training phase of deep neural networks make them vulnerable to adversarial samples: inputs crafted by adversaries with the intent of causing deep neural networks to misclassify. In this work, we formalize the space of adversaries against deep neural networks (DNNs) and introduce a novel class of algorithms to craft adversarial samples based on a precise understanding of the mapping between inputs and outputs of DNNs. In an application to computer vision, we show that our algorithms can reliably produce samples correctly classified by human subjects but misclassified in specific targets by a DNN with a 97% adversarial success rate while only modifying on average 4.02% of the input features per sample. We then evaluate the vulnerability of different sample classes to adversarial perturbations by defining a hardness measure. Finally, we describe preliminary work outlining defenses against adversarial samples by defining a predictive measure of distance between a benign input and a target classification.", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Ananthram Swami', 'organization': 'U.S. Army Research Laboratory'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_abstract = target_publication_info['abstract']\nfinal_result = target_abstract\n", "result": "Deep learning takes advantage of large datasets and computationally efficient training algorithms to outperform other approaches at various machine learning tasks. However, imperfections in the training phase of deep neural networks make them vulnerable to adversarial samples: inputs crafted by adversaries with the intent of causing deep neural networks to misclassify. In this work, we formalize the space of adversaries against deep neural networks (DNNs) and introduce a novel class of algorithms to craft adversarial samples based on a precise understanding of the mapping between inputs and outputs of DNNs. In an application to computer vision, we show that our algorithms can reliably produce samples correctly classified by human subjects but misclassified in specific targets by a DNN with a 97% adversarial success rate while only modifying on average 4.02% of the input features per sample. We then evaluate the vulnerability of different sample classes to adversarial perturbations by defining a hardness measure. Finally, we describe preliminary work outlining defenses against adversarial samples by defining a predictive measure of distance between a benign input and a target classification.", "exe_time": 2.4585697650909424}
{"Query_en": "What is the PDF link of the representative work of Li Yang at Google Research?", "Answer": "https://cz5waila03cyo0tux1owpyofgoryroob.oss-cn-beijing.aliyuncs.com/FF/0A/23/FF0A23597C1556AF72029996F5967C9F.pdf", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Li Yang', 'organization': 'Google Research'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_pdf = target_publication_info['pdf_link']\nfinal_result = target_pdf\n", "result": "https://cz5waila03cyo0tux1owpyofgoryroob.oss-cn-beijing.aliyuncs.com/FF/0A/23/FF0A23597C1556AF72029996F5967C9F.pdf", "exe_time": 2.374420642852783}
{"Query_en": "Which journal or conference included the representative work of Jefrey Lijffijt at Department of Data Science, Knowledge Discovery, and Visual Analytics, Ghent University?", "Answer": {"info": {"name": "DIGITAL SCHOLARSHIP IN THE HUMANITIES"}, "issue": "2", "volume": "31"}, "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Jefrey Lijffijt', 'organization': 'Department of Data Science, Knowledge Discovery, and Visual Analytics, Ghent University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_venue = target_publication_info['venue']\nfinal_result = target_venue\n", "result": {"info": {"name": "DIGITAL SCHOLARSHIP IN THE HUMANITIES"}, "issue": "2", "volume": "31"}, "exe_time": 2.6231188774108887}
{"Query_en": "What is the abstract of the representative work of Peng Tian in ROP field?", "Answer": "We consider learning from comparison labels generated as follows: given two samples in a dataset, a labeler produces a label indicating their relative order. Such comparison labels scale quadratically with the dataset size; most importantly, in practice, they often exhibit lower variance compared to class labels. We propose a new neural network architecture based on siamese networks to incorporate both class and comparison labels in the same training pipeline, using Bradley–Terry and Thurstone loss functions. Our architecture leads to a significant improvement in predicting both class and comparison labels, increasing classification AUC by as much as 35% and comparison AUC by as much as 6% on several real-life datasets. We further show that, by incorporating comparisons, training from few samples becomes possible: a deep neural network of 5.9 million parameters trained on 80 images attains a 0.92 AUC when incorporating comparisons.", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Peng Tian', 'interest': 'ROP'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_abstract = target_publication_info['abstract']\nfinal_result = target_abstract\n", "result": "We consider learning from comparison labels generated as follows: given two samples in a dataset, a labeler produces a label indicating their relative order. Such comparison labels scale quadratically with the dataset size; most importantly, in practice, they often exhibit lower variance compared to class labels. We propose a new neural network architecture based on siamese networks to incorporate both class and comparison labels in the same training pipeline, using Bradley–Terry and Thurstone loss functions. Our architecture leads to a significant improvement in predicting both class and comparison labels, increasing classification AUC by as much as 35% and comparison AUC by as much as 6% on several real-life datasets. We further show that, by incorporating comparisons, training from few samples becomes possible: a deep neural network of 5.9 million parameters trained on 80 images attains a 0.92 AUC when incorporating comparisons.", "exe_time": 2.3646581172943115}
{"Query_en": "What is the PDF link of the representative work of Zhicheng He in Thermal Solar System field?", "Answer": "https://static.aminer.cn/upload/pdf/program/5b67b45517c44aac1c8608aa_0.pdf", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Zhicheng He', 'interest': 'Thermal Solar System'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_pdf = target_publication_info['pdf_link']\nfinal_result = target_pdf\n", "result": "https://static.aminer.cn/upload/pdf/program/5b67b45517c44aac1c8608aa_0.pdf", "exe_time": 2.4621591567993164}
{"Query_en": "Which journal or conference included the representative work of Aldo Carranza in Panel Data Analysis field?", "Answer": {"info": {"name": "MANAGEMENT SCIENCE"}, "issue": "3", "volume": "68"}, "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Aldo Carranza', 'interest': 'Panel Data Analysis'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_venue = target_publication_info['venue']\nfinal_result = target_venue\n", "result": {"info": {"name": "MANAGEMENT SCIENCE"}, "issue": "3", "volume": "68"}, "exe_time": 2.408322334289551}
