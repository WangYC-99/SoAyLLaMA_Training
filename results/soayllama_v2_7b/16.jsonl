{"Query_en": "Research interests of Yujun Cai at Interdisciplinary Graduate School, Nanyang Technological University", "Answer": ["Node Classification", "Graph Convolutional Networks", "Graph Classification", "Data Augmentation", "Depth Regularizer", "Pose Estimation", "Testing", "Graph Neural Networks", "Progressive Supervision", "Three-dimensional Displays"], "route": "searchPerson", "code": "info = {'name': 'Yujun Cai', 'organization': 'Interdisciplinary Graduate School, Nanyang Technological University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ninterests_list = target_person_id\nfinal_result = interests_list\n", "result": "563050fe45cedb33999e9b6d", "exe_time": 1.478297472000122}
{"Query_en": "Citation count of Junqi Zhang at Department of Computer Science and Technology, Tsinghua University", "Answer": 54, "route": "searchPerson", "code": "info = {'name': 'Junqi Zhang', 'organization': 'Department of Computer Science and Technology, Tsinghua University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\nnum_citation = target_person_id\nfinal_result = num_citation\n", "result": "53f42d5cdabfaeb22f407e43", "exe_time": 1.4796926975250244}
{"Query_en": "Number of published papers by Wentao Wang at Department of Computer Science and Engineering, Michigan State University", "Answer": 394, "route": "searchPerson", "code": "info = {'name': 'Wentao Wang', 'organization': 'Department of Computer Science and Engineering, Michigan State University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\n# Assuming the representative work is the one with the most citations\n# The list was sorted by citation\nmax_citation = publications_list[0]\nfinal_result = max_citation['num_citation']\n", "result": 58, "exe_time": 2.016230821609497}
{"Query_en": "Which institution does Jean-Christophe Lachance who researches in Jean-Christophe Lachance field belong to?", "Answer": "Universite de Sherbrooke", "route": "searchPerson", "code": "info = {'name': 'Jean-Christophe Lachance', 'interest': 'Jean-Christophe Lachance'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_organization = target_person_basic_info['organization']\nfinal_result = target_person_organization\n", "result": "Universite de Sherbrooke", "exe_time": 1.8097636699676514}
{"Query_en": "Citation count of Kien Do who researches in Mixed Data field", "Answer": 321, "route": "searchPerson", "code": "info = {'name': 'Kien Do', 'interest': 'Mixed Data'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_num_citation = target_publication_dict['num_citation']\nfinal_result = target_num_citation\n", "result": 153, "exe_time": 2.0171704292297363}
{"Query_en": "Number of papers published by Ranga Raju Vatsavai who researches in Remote Sensing field", "Answer": 133, "route": "searchPerson", "code": "info = {'name': 'Ranga Raju Vatsavai', 'interest': 'Remote Sensing'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_num_citation = target_publication_dict['num_citation']\nfinal_result = target_num_citation\n", "result": 1164, "exe_time": 2.0757040977478027}
{"Query_en": "Who are the researchers at UNC Eshelman School of Pharmacy?", "Answer": ["Andrew Z Wang"], "route": "searchPerson", "code": "info = {'organization': 'UNC Eshelman School of Pharmacy'}\norganization = info['organization']\n\nperson_list = searchPerson(organization = organization)\nname_list = [person_list[i]['name'] for i in range(len(person_list))]\nfinal_result = name_list\n", "result": ["Andrew Z Wang"], "exe_time": 1.0318737030029297}
{"Query_en": "Who are the researchers in 3d From Single Images field?", "Answer": ["Philippe Weinzaepfel", "Mehdi S. M. Sajjadi", "Ceyuan Yang", "Zhongzheng Ren (Jason)", "Fei He", "Felix Petersen"], "route": "searchPerson", "code": "info = {'interest': '3d From Single Images'}\ninterest = info['interest']\n\nperson_list = searchPerson(interest = interest)\nname_list = [person_list[i]['name'] for i in range(len(person_list))]\nfinal_result = name_list\n", "result": ["Philippe Weinzaepfel", "Mehdi S. M. Sajjadi", "Ceyuan Yang", "Zhongzheng Ren (Jason)", "Fei He", "Felix Petersen"], "exe_time": 0.9792048931121826}
{"Query_en": "Who are the collaborators of Bin Yao at Department of Computer Science and Engineering, Shanghai Jiao Tong University?", "Answer": ["Feifei Li", "Xiaofeng Gao", "Shuo Shang", "Lisi Chen", "Guihai Chen", "Kai Zheng", "Yunjun Gao", "Panagiotis Kalnis", "Xiaokui Xiao", "Jianqiu Xu", "Christian S. Jensen", "Haobo Wang", "Yanyan Shen", "Ling Shao", "Jing Ma"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Bin Yao', 'organization': 'Department of Computer Science and Engineering, Shanghai Jiao Tong University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\ncoauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\nfinal_result = coauthors_name_list\n", "result": ["Feifei Li", "Xiaofeng Gao", "Shuo Shang", "Lisi Chen", "Guihai Chen", "Kai Zheng", "Yunjun Gao", "Panagiotis Kalnis", "Xiaokui Xiao", "Jianqiu Xu", "Christian S. Jensen", "Haobo Wang", "Yanyan Shen", "Ling Shao", "Jing Ma"], "exe_time": 1.983236312866211}
{"Query_en": "Who are the collaborators of Dafna Shahaf in Metro Map field?", "Answer": ["Eric Joel Horvitz", "Carlos Guestrin", "Yossi Azar", "Michael Doron", "Jilles Vreeken", "Christos Faloutsos", "Jure Leskovec"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Dafna Shahaf', 'interest': 'Metro Map'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\ncoauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\nfinal_result = coauthors_name_list\n", "result": ["Eric Joel Horvitz", "Carlos Guestrin", "Yossi Azar", "Michael Doron", "Jilles Vreeken", "Christos Faloutsos", "Jure Leskovec"], "exe_time": 1.8484935760498047}
{"Query_en": "Who at Facebook has a collaboration with Fedor Borisyuk?", "Answer": ["Omkar M. Parkhi"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Fedor Borisyuk', 'organization': 'Facebook'}\norganization = info['organization']\nname = info['name']\n\nperson_list = searchPerson(organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\n\nfinal_result = coauthors_list\n", "result": [{"person_id": "5d415c137390bff0db70c96f", "name": "Fedor Borisyuk", "relation": "coauthor"}, {"person_id": "5621130145cedb33982e92af", "name": "Bowen Cheng", "relation": "coauthor"}, {"person_id": "5608ecda45ce1e595f5c6295", "name": "Sami Alsheikh", "relation": "coauthor"}, {"person_id": "5608226e45cedb3396c135d2", "name": "Yiqun Liu", "relation": "coauthor"}, {"person_id": "54068287dabfae8faa60b4cb", "name": "Edward Pizzi (Ed Pizzi)", "relation": "coauthor"}, {"person_id": "53f47092dabfaeee22a79596", "name": "Yina Tang", "relation": "coauthor"}, {"person_id": "53f44facdabfaec09f1eca18", "name": "Sean Bell", "relation": "coauthor"}, {"person_id": "53f44bd9dabfaeee22a0cfca", "name": "Karun Singh", "relation": "coauthor"}], "exe_time": 1.5117628574371338}
{"Query_en": "Who in Computational Journalism field has a collaboration with You Wu?", "Answer": ["Cong Yu", "Chengkai Li"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'You Wu', 'interest': 'Computational Journalism'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\n\nfinal_result = coauthors_list\n", "result": [{"person_id": "5440c3ebdabfae7f9b34fac1", "name": "Cong Yu", "relation": "coauthor"}, {"person_id": "5486c5efdabfae9b40133ff0", "name": "Chengkai Li", "relation": "coauthor"}, {"person_id": "53f46f94dabfaedd74e8e01f", "name": "Flip R. Korn", "relation": "coauthor"}, {"person_id": "53f4d2b4dabfaef0eef8161f", "name": "AlyssaÂ Lees", "relation": "coauthor"}, {"person_id": "53f45dc2dabfaee2a1d8ecbd", "name": "Huan Sun", "relation": "coauthor"}, {"person_id": "53f32bc3dabfae9a84491646", "name": "Jialu Liu", "relation": "coauthor"}, {"person_id": "5d415c157390bff0db70ca95", "name": "Xuezhi Wang", "relation": "coauthor"}, {"person_id": "64c37e8f92ddfd64d1cdee53", "name": "Jiaqi Zhai", "relation": "coauthor"}, {"person_id": "5d415c157390bff0db70caa1", "name": "Dale Markowitz", "relation": "coauthor"}, {"person_id": "5d415c157390bff0db70ca88", "name": "Silu Huang", "relation": "coauthor"}, {"person_id": "5645802645ceeb5a6d5d5a9f", "name": "Xiaotao Gu", "relation": "coauthor"}, {"person_id": "561083cc45ce1e596224ffa0", "name": "Yuning Mao", "relation": "coauthor"}, {"person_id": "53f7e0a3dabfae92b40ee023", "name": "Yu Su", "relation": "coauthor"}, {"person_id": "53f4b1e2dabfaedd74eb9b91", "name": "Wilfred Siu Hung Ng", "relation": "coauthor"}, {"person_id": "53f42f36dabfaedce54dcd0c", "name": "Jiawei Han", "relation": "coauthor"}], "exe_time": 1.535226821899414}
{"Query_en": "What are the papers published by Haoyu Zhang at Dept. of Computer Science at Indiana University Bloomington?", "Answer": ["Finding Pareto Optimal Groups: Group-based Skyline.", "EmbedJoin: Efficient Edit Similarity Joins via Embeddings.", "Finding Probabilistic k-Skyline Sets on Uncertain Data", "MinJoin: Efficient Edit Similarity Joins via Local Hash Minimums.", "MinSearch: An Efficient Algorithm for Similarity Search under Edit Distance", "Communication-Efficient Distributed Skyline Computation.", "Group-based Skyline for Pareto Optimal Groups", "SkyRec: Finding Pareto Optimal Groups", "Overlap Detection On Long, Error-Prone Sequencing Reads Via Smooth Q-Gram", "Smooth q-Gram, and Its Applications to Detection of Overlaps among Long, Error-Prone Sequencing Reads."], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Haoyu Zhang', 'organization': 'Dept. of Computer Science at Indiana University Bloomington'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\npublications_title_list = [publication['title'] for publication in publications_list]\nfinal_result = publications_title_list\n", "result": ["Finding Pareto Optimal Groups: Group-based Skyline.", "EmbedJoin: Efficient Edit Similarity Joins via Embeddings.", "Finding Probabilistic k-Skyline Sets on Uncertain Data", "MinJoin: Efficient Edit Similarity Joins via Local Hash Minimums.", "MinSearch: An Efficient Algorithm for Similarity Search under Edit Distance", "Communication-Efficient Distributed Skyline Computation.", "Group-based Skyline for Pareto Optimal Groups", "SkyRec: Finding Pareto Optimal Groups", "Overlap Detection On Long, Error-Prone Sequencing Reads Via Smooth Q-Gram", "Smooth q-Gram, and Its Applications to Detection of Overlaps among Long, Error-Prone Sequencing Reads."], "exe_time": 1.8827202320098877}
{"Query_en": "What is the citation count of the representative work of BradÂ Rees at NVIDIA?", "Answer": 168, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Brad\\xa0Rees', 'organization': 'NVIDIA'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\n# Assuming the representative work is the one with the most citations\n# The list was sorted by citation\nmax_citation = publications_list[0]\nfinal_result = max_citation['num_citation']\n", "result": 168, "exe_time": 2.0059938430786133}
{"Query_en": "In which year was the representative work of Moses Charikar at Department of Computer Science, School of Engineering, Stanford University published?", "Answer": 2002, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Moses Charikar', 'organization': 'Department of Computer Science, School of Engineering, Stanford University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\nmax_citation = publications_list[0]\nfinal_result = max_citation['year']\n", "result": 2002, "exe_time": 1.917410135269165}
{"Query_en": "Who are the authors of the representative work of Yang Li at Department of Data Platform, Tencent TEG?", "Answer": ["Yang Li", "Yu Shen", "Wentao Zhang", "Yuanwei Chen", "Huaijun Jiang", "Mingchao Liu", "Jiawei Jiang", "Jinyang Gao", "Wentao Wu", "Zhi Yang", "Ce Zhang", "Bin Cui"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Yang Li', 'organization': 'Department of Data Platform, Tencent TEG'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\ncoauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\nfinal_result = coauthors_name_list\n", "result": ["Bin Cui", "Yu Shen", "WentaoÂ Zhang", "Zhi Yang", "Ce Zhang", "Feifei Li", "None", "Jiawei Jiang", "Jinyang Gao", "Wentao Zhang", "Wentao Wu", "Yaliang Li", "Jingren Zhou"], "exe_time": 1.9209785461425781}
{"Query_en": "What are the papers published by Matthias Schultheis in Inverse Reinforcement Learning field?", "Answer": ["POMDPs in Continuous Time and Discrete Spaces", "Inverse Optimal Control Adapted to the Noise Characteristics of the Human Sensorimotor System.", "Receding Horizon Curiosity", "Reinforcement Learning with Non-Exponential Discounting", "Probabilistic Trajectory Segmentation by Means of Hierarchical Dirichlet Process Switching Linear Dynamical Systems."], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Matthias Schultheis', 'interest': 'Inverse Reinforcement Learning'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\npublications_title_list = [publication['title'] for publication in publications_list]\nfinal_result = publications_title_list\n", "result": ["POMDPs in Continuous Time and Discrete Spaces", "Inverse Optimal Control Adapted to the Noise Characteristics of the Human Sensorimotor System.", "Receding Horizon Curiosity", "Reinforcement Learning with Non-Exponential Discounting", "Probabilistic Trajectory Segmentation by Means of Hierarchical Dirichlet Process Switching Linear Dynamical Systems."], "exe_time": 1.8269522190093994}
{"Query_en": "What is the citation count of the representative work of David S. Rosenblum in Software Engineering field?", "Answer": 2281, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'David S. Rosenblum', 'interest': 'Software Engineering'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_num_citation = target_publication_dict['num_citation']\nfinal_result = target_num_citation\n", "result": 2281, "exe_time": 2.098036527633667}
{"Query_en": "In which year was the representative work of Jie Cao in Deep Learning field published?", "Answer": 2015, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Jie Cao', 'interest': 'Deep Learning'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_num_citation = target_publication_dict['num_citation']\nfinal_result = target_num_citation\n", "result": 220, "exe_time": 2.07546067237854}
{"Query_en": "Who are the authors of the representative work of Walid Krichene in Nash Equilibrium field?", "Answer": ["Rendle Steffen", "Krichene Walid", "Zhang Li", "Anderson John"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Walid Krichene', 'interest': 'Nash Equilibrium'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\ncoauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\nfinal_result = coauthors_name_list\n", "result": ["Steffen Rendle", "Francois Belletti", "Lichan Hong", "Ed H. Chi", "Yehuda Koren", "Aude Hofleitner"], "exe_time": 1.885697364807129}
{"Query_en": "Is Oliver Schulte at School of Computing Science, Simon Fraser University male or female?", "Answer": "male", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Oliver Schulte', 'organization': 'School of Computing Science, Simon Fraser University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_gender = target_person_basic_info['gender']\nfinal_result = target_person_gender\n", "result": "male", "exe_time": 1.849470853805542}
{"Query_en": "What is the title of Rebekka Burkholz at CISPA Helmholtz Center for Information Security?", "Answer": "Research Fellow", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Rebekka Burkholz', 'organization': 'CISPA Helmholtz Center for Information Security'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_title = target_person_basic_info['title']\nfinal_result = target_person_title\n", "result": "exe error", "exe_time": 1.8853375911712646}
{"Query_en": "What is the introduction of Shunta Saito at Preferred Networks, Inc.?", "Answer": "I'm a researcher at Preferred Networks, Inc. I love Chainer, computer vision, music, films, and wine ð·", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Shunta Saito', 'organization': 'Preferred Networks, Inc.'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_bio = target_person_basic_info['bio']\nfinal_result = target_person_bio\n", "result": "I'm a researcher at Preferred Networks, Inc. I love Chainer, computer vision, music, films, and wine ð·", "exe_time": 1.8056831359863281}
{"Query_en": "What is the educational background of Kevin Small at Amazon?", "Answer": "Ph.D. in Computer Science, University of Illinois at Urbana-Champaign, 2009<br>Dissertation: Interactive Learning Protocols for Natural Language Applications<br>Committee: Dan Roth (Advisor - UIUC), Gerald DeJong (UIUC),<br>Julia Hockenmaier (UIUC), Andrew McCallum (UMass)<br>M.S. in Computer Science, University of Illinois at Urbana-Champaign, 2002<br>B.S. in Electrical Engineering, University of Illinois at Urbana-Champaign, 1997<br>Minor in Computer Science", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Kevin Small', 'organization': 'Amazon'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_education_experience = target_person_basic_info['education_experience']\nfinal_result = target_person_education_experience\n", "result": "Ph.D. in Computer Science, University of Illinois at Urbana-Champaign, 2009<br>Dissertation: Interactive Learning Protocols for Natural Language Applications<br>Committee: Dan Roth (Advisor - UIUC), Gerald DeJong (UIUC),<br>Julia Hockenmaier (UIUC), Andrew McCallum (UMass)<br>M.S. in Computer Science, University of Illinois at Urbana-Champaign, 2002<br>B.S. in Electrical Engineering, University of Illinois at Urbana-Champaign, 1997<br>Minor in Computer Science", "exe_time": 1.9388306140899658}
{"Query_en": "What is the email of Yanfeng Zhu at Baidu, Inc.?", "Answer": "zhuyanfeng@baidu.com", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Yanfeng Zhu', 'organization': 'Baidu, Inc.'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_email = target_person_basic_info['email']\nfinal_result = target_person_email\n", "result": "zhuyanfeng@baidu.com", "exe_time": 1.8244850635528564}
{"Query_en": "Is Mingyu Ding in Deep Learning field male or female?", "Answer": "male", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Mingyu Ding', 'interest': 'Deep Learning'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_gender = target_person_basic_info['gender']\nfinal_result = target_person_gender\n", "result": "male", "exe_time": 1.7712438106536865}
{"Query_en": "What is the title of Naonori Ueda in Em Algorithm field?", "Answer": "Other", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Naonori Ueda', 'interest': 'Em Algorithm'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_title = target_person_basic_info['title']\nfinal_result = target_person_title\n", "result": "exe error", "exe_time": 1.750504493713379}
{"Query_en": "What is the introduction of Jennifer Neville in Relational Data field?", "Answer": "She is currently an elected member of the AAAI Executive Council. She was PC chair of the 9th ACM International Conference on Web Search and Data in 2016 and is PC chair for the SIAM International Conference on Data Mining in 2019. In 2012, she was awarded an NSF Career Award, in 2008 she was chosen by IEEE as one of \"AI's 10 to watch\", and in 2007 was selected as a member of the DARPA Computer Science Study Group. Her work, which includes over 100 peer-reviewed publications with more than 5000 citations, focuses on developing data mining and machine learning techniques for complex relational and network domains, including social, information, and physical networks.", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Jennifer Neville', 'interest': 'Relational Data'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_bio = target_person_basic_info['bio']\nfinal_result = target_person_bio\n", "result": "She is currently an elected member of the AAAI Executive Council. She was PC chair of the 9th ACM International Conference on Web Search and Data in 2016 and is PC chair for the SIAM International Conference on Data Mining in 2019. In 2012, she was awarded an NSF Career Award, in 2008 she was chosen by IEEE as one of \"AI's 10 to watch\", and in 2007 was selected as a member of the DARPA Computer Science Study Group. Her work, which includes over 100 peer-reviewed publications with more than 5000 citations, focuses on developing data mining and machine learning techniques for complex relational and network domains, including social, information, and physical networks.", "exe_time": 1.760176181793213}
{"Query_en": "What is the educational background of Chun Lo in Social Network field?", "Answer": "", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Chun Lo', 'interest': 'Social Network'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_education_experience = target_person_basic_info['education_experience']\nfinal_result = target_person_education_experience\n", "result": "", "exe_time": 1.9405863285064697}
{"Query_en": "What is the email of Qiang Zhang in Biodiesel field?", "Answer": "qiang.zhang.cs@zju.edu.cn", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Qiang Zhang', 'interest': 'Biodiesel'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_email = target_person_basic_info['email']\nfinal_result = target_person_email\n", "result": "qiang.zhang.cs@zju.edu.cn", "exe_time": 1.7699902057647705}
{"Query_en": "Who among the collaborators of Nemanja Djuric at Aurora Innovation, Inc are researching in Computational Advertising field?", "Answer": ["Narayan Bhamidipati"], "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Nemanja Djuric', 'organization': 'Aurora Innovation, Inc'}\nname = info['name']\norganization = info['organization']\ntarget_interest = info['interest']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthor_list = getCoauthors(person_id = target_person_id)\n\ntarget_coauthor_names = []\nfor coauthor in coauthor_list:\n    coauthor_id = coauthor['person_id']\n    coauthor_interests_list = getPersonInterest(person_id = coauthor_id)\n    if target_interest in coauthor_interests_list:\n        target_coauthor_names.append(coauthor['name'])\n\nfinal_result = target_coauthor_names\n", "result": "exe error", "exe_time": 2.8000717163085938}
{"Query_en": "Who has the highest citation count among the collaborators of Jianling Wang at Google?", "Answer": "Huan Liu", "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Jianling Wang', 'organization': 'Google'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\n\ncoauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\n\nfinal_result = coauthors_name_list\n", "result": ["James Caverlee", "Kaize Ding", "Ziwai Zhu", "Huan Liu", "Jundong Li", "Ed H. Chi", "Liangjie Hong", "Bokun Wang", "Diane Hu", "Kai Shu", "Wei Niu", "Yixin Liu", "Yuyan Wang", "Chenghao Liu", "Shirui Pan"], "exe_time": 1.8352079391479492}
{"Query_en": "Who has the most published papers among the collaborators of Zhaodong Wang at Washington State University?", "Answer": "Jieping Ye", "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Zhaodong Wang', 'organization': 'Washington State University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\n\ncoauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\n\nfinal_result = coauthors_name_list\n", "result": ["Tianpei Yang", "Zhe Xu", "Hongtu Zhu", "Yintai Ma", "Fan Zhang", "Jieping Ye", "XiaochengÂ Tang", "Zhiwei Qin (Tony)"], "exe_time": 1.8819935321807861}
{"Query_en": "Who among the collaborators of Karun Singh in Unified Computer Vision Model field are at Facebookinstitution?", "Answer": ["Fedor Borisyuk", "Sami Alsheikh", "Yina Tang", "Omkar M. Parkhi"], "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Karun Singh', 'interest': 'Unified Computer Vision Model'}\nname = info['name']\ninterest = info['interest']\ntarget_organization = info['organization']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthor_list = getCoauthors(person_id = target_person_id)\n\ntarget_coauthor_names = []\nfor coauthor in coauthor_list:\n    coauthor_name = coauthor['name']\n    coauthor_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_list[0]\n    coauthor_organization = coauthor_info['organization']\n    if coauthor_organization == target_organization:\n        target_coauthor_names.append(coauthor['name'])\n\nfinal_result = target_coauthor_names\n", "result": "exe error", "exe_time": 2.9468584060668945}
{"Query_en": "Who has the highest citation count among the collaborators of Bin Shu in Question Answering field?", "Answer": "Qifan Wang", "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Bin Shu', 'interest': 'Question Answering'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\n\ncoauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\n\nfinal_result = coauthors_name_list\n", "result": ["Qifan Wang", "Jonathan L. Elsas", "Sumit Sanghai", "Bhargav Kanagal", "Zac Yu", "D. Sivakumar"], "exe_time": 1.8568270206451416}
{"Query_en": "Who has the most published papers among the collaborators of Raymond Chi-Wing Wong in Data Mining field?", "Answer": "Philip S. Yu", "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Raymond Chi-Wing Wong', 'interest': 'Data Mining'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\n\ncoauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\n\nfinal_result = coauthors_name_list\n", "result": ["Ke Wang", "Cheng Long", "Yuanfeng Song", "Jian Pei", "Philip S. Yu", "Qiang Yang", "Tianwen Chen", "James Cheng"], "exe_time": 1.919616460800171}
{"Query_en": "Who are the collaborators of the collaborators of Shotaro Sano at Preferred Networks, Inc.?", "Answer": ["Yuichi Yoshida", "Yusuke Niitani", "Masanori Koyama", "Shotaro Sano", "Seiya Tokui", "Masaaki Nishino", "Takeru Ohta", "Toshihiko Yanase", "Hiroyuki Yamazaki Vincent", "Brian Vogel", "Takuya Akiba", "Shunta Saito", "Toru Ogawa", "Shotaro Sano", "Hiroyuki Yamazaki Vincent", "Brian Vogel", "Kota Uenishi", "Ryosuke Okuta", "Seiya Tokui", "Takeru Miyato", "Takuya Akiba", "Takeru Ohta", "Toshihiko Yanase", "Shotaro Sano", "Shunta Saito", "Sosuke Kobayashi", "Yuichi Yoshida", "Masanori Koyama", "Toshihiko Yanase", "Shotaro Sano", "Takuya Akiba", "Masanori Koyama", "Takeru Ohta", "Shotaro Sano", "Takuya Akiba"], "route": "searchPerson -> getCoauthors -> getCoauthors", "code": "info = {'name': 'Shotaro Sano', 'organization': 'Preferred Networks, Inc.'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors1_list = getCoauthors(person_id = target_person_id)\n\ncoauthors2_list = []\nfor coauthor in coauthors1_list:\n    coauthors2_list.extend(getCoauthors(person_id = coauthor['person_id']))\n\ncoauthors2_names = [coauthor['name'] for coauthor in coauthors2_list]\n\nfinal_result = coauthors2_names\n", "result": ["Yuichi Yoshida", "Yusuke Niitani", "Masanori Koyama", "Shotaro Sano", "Seiya Tokui", "Masaaki Nishino", "Takeru Ohta", "Toshihiko Yanase", "Hiroyuki Yamazaki Vincent", "Brian Vogel", "Takuya Akiba", "Shunta Saito", "Toru Ogawa", "Shotaro Sano", "Hiroyuki Yamazaki Vincent", "Brian Vogel", "Kota Uenishi", "Ryosuke Okuta", "Seiya Tokui", "Takeru Miyato", "Takuya Akiba", "Takeru Ohta", "Toshihiko Yanase", "Shotaro Sano", "Shunta Saito", "Sosuke Kobayashi", "Yuichi Yoshida", "Masanori Koyama", "Toshihiko Yanase", "Shotaro Sano", "Takuya Akiba", "Masanori Koyama", "Takeru Ohta", "Shotaro Sano", "Takuya Akiba"], "exe_time": 2.5228793621063232}
{"Query_en": "Who are the collaborators of the collaborators of Gautam Chetan Kamath in Differential Privacy field?", "Answer": ["Gautam Chetan Kamath", "Yu Cheng", "Rong Ge", "Maryam Aliakbarpour", "Jelena Diakonikolas", "Gautam Chetan Kamath", "Cenk Baykal", "Surbhi Goel", "Lester Mackey", "Pranjal Awasthi", "Gautam Chetan Kamath", "Sloan Nietert", "Wei Chen", "Ziv Goldfeld", "Misha Khodak", "Tie-Yan Liu", "Gautam Chetan Kamath", "Jiang Bian", "Vahab S. Mirrokni", "Arpit Agarwal", "Vaggos Chatziafratis", "Gautam Chetan Kamath", "Zhao Song", "Samyak Gupta", "Rachel Cummings", "Weijie Su", "Gautam Chetan Kamath", "Binghui Peng", "Sergei Vassilvitskii", "Fei Wu", "Mohammad Mahdian", "Vahab S. Mirrokni", "Jinshuo Dong", "Michael I. Jordan", "Zhun Deng", "Zhiqi Bu", "Jiayao Zhang", "Rachel Cummings", "Mingze Wang", "Yangsibo Huang"], "route": "searchPerson -> getCoauthors -> getCoauthors", "code": "info = {'name': 'Gautam Chetan Kamath', 'interest': 'Differential Privacy'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors1_list = getCoauthors(person_id = target_person_id)\n\ncoauthors2_list = []\nfor coauthor in coauthors1_list:\n    coauthors2_list.extend(getCoauthors(person_id = coauthor['person_id']))\n\ncoauthors2_names = [coauthor['name'] for coauthor in coauthors2_list]\n\nfinal_result = coauthors2_names\n", "result": ["Gautam Chetan Kamath", "Yu Cheng", "Rong Ge", "Maryam Aliakbarpour", "Jelena Diakonikolas", "Gautam Chetan Kamath", "Cenk Baykal", "Surbhi Goel", "Lester Mackey", "Pranjal Awasthi", "Gautam Chetan Kamath", "Sloan Nietert", "Wei Chen", "Ziv Goldfeld", "Misha Khodak", "Tie-Yan Liu", "Gautam Chetan Kamath", "Jiang Bian", "Vahab S. Mirrokni", "Arpit Agarwal", "Vaggos Chatziafratis", "Gautam Chetan Kamath", "Zhao Song", "Samyak Gupta", "Rachel Cummings", "Weijie Su", "Gautam Chetan Kamath", "Binghui Peng", "Sergei Vassilvitskii", "Fei Wu", "Mohammad Mahdian", "Vahab S. Mirrokni", "Jinshuo Dong", "Michael I. Jordan", "Zhun Deng", "Zhiqi Bu", "Jiayao Zhang", "Rachel Cummings", "Mingze Wang", "Yangsibo Huang"], "exe_time": 2.533703088760376}
{"Query_en": "What is the abstract of the representative work of Vishvak Murahari at Department of Computer Science, Princeton University?", "Answer": "Deep Learning methods have become very attractive in the wider, wearables-based human activity recognition (HAR) research community. The majority of models are based on either convolutional or explicitly temporal models, or combinations of both. In this paper we introduce attention models into HAR research as a data driven approach for exploring relevant temporal context. Attention models learn a set of weights over input data, which we leverage to weight the temporal context being considered to model each sensor reading. We construct attention models for HAR by adding attention layers to a state-of-the-art deep learning HAR model (DeepConvLSTM) and evaluate our approach on benchmark datasets achieving significant increase in performance. Finally, we visualize the learned weights to better understand what constitutes relevant temporal context.\n\n", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Vishvak Murahari', 'organization': 'Department of Computer Science, Princeton University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_abstract = target_publication_info['abstract']\nfinal_result = target_abstract\n", "result": "Deep Learning methods have become very attractive in the wider, wearables-based human activity recognition (HAR) research community. The majority of models are based on either convolutional or explicitly temporal models, or combinations of both. In this paper we introduce attention models into HAR research as a data driven approach for exploring relevant temporal context. Attention models learn a set of weights over input data, which we leverage to weight the temporal context being considered to model each sensor reading. We construct attention models for HAR by adding attention layers to a state-of-the-art deep learning HAR model (DeepConvLSTM) and evaluate our approach on benchmark datasets achieving significant increase in performance. Finally, we visualize the learned weights to better understand what constitutes relevant temporal context.\n\n", "exe_time": 2.511401891708374}
{"Query_en": "What is the PDF link of the representative work of Can Qin at Rockwell Automation?", "Answer": "https://cz5waila03cyo0tux1owpyofgoryroob.oss-cn-beijing.aliyuncs.com/D5/83/77/D58377152D67DF85CF9BF7F833F92993.pdf", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Can Qin', 'organization': 'Rockwell Automation'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_pdf = target_publication_info['pdf_link']\nfinal_result = target_pdf\n", "result": "https://cz5waila03cyo0tux1owpyofgoryroob.oss-cn-beijing.aliyuncs.com/D5/83/77/D58377152D67DF85CF9BF7F833F92993.pdf", "exe_time": 2.420259714126587}
{"Query_en": "Which journal or conference included the representative work of Song Liu at School of Mathematics, University of Bristol?", "Answer": {"id": "53a728e520f7420be8bbc4bb", "info": {"name": "NIPS"}, "issue": "10", "type": 0, "volume": "25"}, "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Song Liu', 'organization': 'School of Mathematics, University of Bristol'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_venue = target_publication_info['venue']\nfinal_result = target_venue\n", "result": {"id": "53a728e520f7420be8bbc4bb", "info": {"name": "NIPS"}, "issue": "10", "type": 0, "volume": "25"}, "exe_time": 2.464643955230713}
{"Query_en": "What is the abstract of the representative work of Yu Bai in Reinforcement Learning Theory field?", "Answer": "  Self-play, where the algorithm learns by playing against itself without requiring any direct supervision, has become the new weapon in modern Reinforcement Learning (RL) for achieving superhuman performance in practice. However, the majority of exisiting theory in reinforcement learning only applies to the setting where the agent plays against a fixed environment. It remains largely open whether self-play algorithms can be provably effective, especially when it is necessary to manage the exploration/exploitation tradeoff.   We study self-play in competitive reinforcement learning under the setting of Markov games, a generalization of Markov decision processes to the two-player case. We introduce a self-play algorithm---Value Iteration with Upper/Lower Confidence Bound (VI-ULCB), and show that it achieves regret $\\mathcal{\\tilde{O}}(\\sqrt{T})$ after playing $T$ steps of the game. The regret is measured by the agent's performance against a \\emph{fully adversarial} opponent who can exploit the agent's strategy at \\emph{any} step. We also introduce an explore-then-exploit style algorithm, which achieves a slightly worse regret of $\\mathcal{\\tilde{O}}(T^{2/3})$, but is guaranteed to run in polynomial time even in the worst case. To the best of our knowledge, our work presents the first line of provably sample-efficient self-play algorithms for competitive reinforcement learning. ", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Yu Bai', 'interest': 'Reinforcement Learning Theory'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_abstract = target_publication_info['abstract']\nfinal_result = target_abstract\n", "result": "  Self-play, where the algorithm learns by playing against itself without requiring any direct supervision, has become the new weapon in modern Reinforcement Learning (RL) for achieving superhuman performance in practice. However, the majority of exisiting theory in reinforcement learning only applies to the setting where the agent plays against a fixed environment. It remains largely open whether self-play algorithms can be provably effective, especially when it is necessary to manage the exploration/exploitation tradeoff.   We study self-play in competitive reinforcement learning under the setting of Markov games, a generalization of Markov decision processes to the two-player case. We introduce a self-play algorithm---Value Iteration with Upper/Lower Confidence Bound (VI-ULCB), and show that it achieves regret $\\mathcal{\\tilde{O}}(\\sqrt{T})$ after playing $T$ steps of the game. The regret is measured by the agent's performance against a \\emph{fully adversarial} opponent who can exploit the agent's strategy at \\emph{any} step. We also introduce an explore-then-exploit style algorithm, which achieves a slightly worse regret of $\\mathcal{\\tilde{O}}(T^{2/3})$, but is guaranteed to run in polynomial time even in the worst case. To the best of our knowledge, our work presents the first line of provably sample-efficient self-play algorithms for competitive reinforcement learning. ", "exe_time": 2.4229748249053955}
{"Query_en": "What is the PDF link of the representative work of Hongfu Liu in Clustering Algorithms field?", "Answer": "https://static.aminer.cn/upload/pdf/program/57d063c7ac44367354290678_0.pdf", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Hongfu Liu', 'interest': 'Clustering Algorithms'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_pdf = target_publication_info['pdf_link']\nfinal_result = target_pdf\n", "result": "https://static.aminer.cn/upload/pdf/program/57d063c7ac44367354290678_0.pdf", "exe_time": 2.4434032440185547}
{"Query_en": "Which journal or conference included the representative work of Wei Cheng in Laparoscopy field?", "Answer": {"info": {"name": "ACS nano", "name_s": "ACS Nano"}, "issue": "8", "volume": "13"}, "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Wei Cheng', 'interest': 'Laparoscopy'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_venue = target_publication_info['venue']\nfinal_result = target_venue\n", "result": {"info": {"name": "ACS nano", "name_s": "ACS Nano"}, "issue": "8", "volume": "13"}, "exe_time": 2.413242816925049}
