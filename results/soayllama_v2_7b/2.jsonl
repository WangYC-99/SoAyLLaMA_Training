{"Query_en": "Research interests of Ranganathan Chandrasekaran at University of Illinois at Chicago", "Answer": ["Information Technology", "Information System", "Information Management", "Information Systems Management", "Computer Information Technology", "Management Science", "Business Model", "Health Information Systems", "Soft System Methodology", "Accounting Information Systems"], "route": "searchPerson", "code": "info = {'name': 'Ranganathan Chandrasekaran', 'organization': 'University of Illinois at Chicago'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ninterests_list = target_person_id\nfinal_result = interests_list\n", "result": "5d415beb7390bff0db70ad4b", "exe_time": 1.4241020679473877}
{"Query_en": "Citation count of Chun-Hao Chang (Kingsley) at Meta", "Answer": 502, "route": "searchPerson", "code": "info = {'name': 'Chun-Hao Chang (Kingsley)', 'organization': 'Meta'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\nnum_citation = target_person_id\nfinal_result = num_citation\n", "result": "563121d045cedb3399cbacd6", "exe_time": 1.5466911792755127}
{"Query_en": "Number of published papers by Ioana Bica at DeepMind", "Answer": 38, "route": "searchPerson", "code": "info = {'name': 'Ioana Bica', 'organization': 'DeepMind'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\n# Assuming the representative work is the one with the most citations\n# The list was sorted by citation\nmax_citation = publications_list[0]\nfinal_result = max_citation['num_citation']\n", "result": 572, "exe_time": 1.9400124549865723}
{"Query_en": "Which institution does Gomes Ana Sofia who researches in Gomes Ana Sofia field belong to?", "Answer": "Feedzai", "route": "searchPerson", "code": "info = {'name': 'Gomes Ana Sofia', 'interest': 'Gomes Ana Sofia'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_organization = target_person_info['organization']\nfinal_result = target_person_organization\n", "result": "Feedzai", "exe_time": 1.4972662925720215}
{"Query_en": "Citation count of Danai Koutra who researches in Anomaly Detection field", "Answer": 5968, "route": "searchPerson", "code": "info = {'name': 'Danai Koutra', 'interest': 'Anomaly Detection'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_num_citation = target_publication_dict['num_citation']\nfinal_result = target_num_citation\n", "result": 1491, "exe_time": 2.0749807357788086}
{"Query_en": "Number of papers published by Weihua Hu who researches in Computer Science Education field", "Answer": 47, "route": "searchPerson", "code": "info = {'name': 'Weihua Hu', 'interest': 'Computer Science Education'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_num_citation = target_publication_dict['num_citation']\nfinal_result = target_num_citation\n", "result": 5670, "exe_time": 2.034942626953125}
{"Query_en": "Who are the researchers at LinkedIn Corporation?", "Answer": ["Liangjie Hong", "Shipeng Yu", "Rupesh Gupta", "Chun Lo", "Guangde Chen"], "route": "searchPerson", "code": "info = {'organization': 'LinkedIn Corporation'}\norganization = info['organization']\n\nperson_list = searchPerson(organization = organization)\nname_list = [person_list[i]['name'] for i in range(len(person_list))]\nfinal_result = name_list\n", "result": ["Liangjie Hong", "Shipeng Yu", "Rupesh Gupta", "Chun Lo", "Guangde Chen", "Wei Lu", "Reza Hosseini"], "exe_time": 0.9553771018981934}
{"Query_en": "Who are the researchers in Video Object Segmentation field?", "Answer": ["Wenguan Wang", "Albert Pumarola Peris", "Zongxin Yang", "Yi-Wen Chen", "Xiaohui Zeng"], "route": "searchPerson", "code": "info = {'interest': 'Video Object Segmentation'}\ninterest = info['interest']\n\nperson_list = searchPerson(interest = interest)\nname_list = [person_list[i]['name'] for i in range(len(person_list))]\nfinal_result = name_list\n", "result": ["Wenguan Wang", "Albert Pumarola Peris", "Zongxin Yang", "Yi-Wen Chen", "Xiaohui Zeng"], "exe_time": 0.9714679718017578}
{"Query_en": "Who are the collaborators of Andrei Zary Broder at Google?", "Answer": ["Donald Metzler", "Yossi Azar", "Marc Najork", "Ravi Kumar", "Sergei Vassilvitskii", "Andrew Tomkins", "Kyuseok Shim", "Deepayan Chakrabarti", "Moses Charikar", "Tong Zhang"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Andrei Zary Broder', 'organization': 'Google'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\ncoauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\nfinal_result = coauthors_name_list\n", "result": ["Donald Metzler", "Yossi Azar", "Marc Najork", "Ravi Kumar", "Sergei Vassilvitskii", "Andrew Tomkins", "Kyuseok Shim", "Deepayan Chakrabarti", "Moses Charikar", "Tong Zhang"], "exe_time": 1.8409698009490967}
{"Query_en": "Who are the collaborators of Deguang Kong in Static Analysis field?", "Answer": ["Hongxia Jin", "Feiping Nie", "Bin Liu", "Neil Zhenqiang Gong", "Heng Huang"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Deguang Kong', 'interest': 'Static Analysis'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\ncoauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\nfinal_result = coauthors_name_list\n", "result": ["Hongxia Jin", "Feiping Nie", "Bin Liu", "Neil Zhenqiang Gong", "Heng Huang"], "exe_time": 1.836988925933838}
{"Query_en": "Who at College of Computer Science and Technology, Zhejiang University has a collaboration with Deng Cai?", "Answer": ["Zhou Zhao", "Can Wang"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Deng Cai', 'organization': 'College of Computer Science and Technology, Zhejiang University'}\norganization = info['organization']\nname = info['name']\n\nperson_list = searchPerson(organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\n\nfinal_result = coauthors_list\n", "result": [{"person_id": "5632035845cedb3399f92d74", "name": "Xiaojun Chang", "relation": "coauthor"}, {"person_id": "54591d0fdabfaeb0fe2ffe2c", "name": "Zongxin Yang", "relation": "coauthor"}, {"person_id": "53f4ab77dabfaedce563c792", "name": "Feiping Nie", "relation": "coauthor"}, {"person_id": "53f322a2dabfae9a8445f056", "name": "Wenguan Wang", "relation": "coauthor"}, {"person_id": "53f8588edabfae7f97a5f6c6", "name": "Fei Wu", "relation": "coauthor"}, {"person_id": "57198d7776d911115b5dc3bd", "name": "Zhao Zhang", "relation": "coauthor"}, {"person_id": "53f49490dabfaeb4c477b3fc", "name": "Qi Tian", "relation": "coauthor"}, {"person_id": "56cb18c0c35f4f3c65660565", "name": "Xiaofang Zhou", "relation": "coauthor"}], "exe_time": 1.6273183822631836}
{"Query_en": "Who in Business Modeling field has a collaboration with Chi Zhang?", "Answer": ["Chenyou Fan", "Wensheng Wang", "Rong Yuan", "Xiaoyue Li"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Chi Zhang', 'interest': 'Business Modeling'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\n\nfinal_result = coauthors_list\n", "result": [{"person_id": "5d415c097390bff0db70c327", "name": "Rong Yuan", "relation": "coauthor"}, {"person_id": "5d415c097390bff0db70c31b", "name": "Xiaoyue Li", "relation": "coauthor"}, {"person_id": "5d415c097390bff0db70c2ff", "name": "Chenyou Fan", "relation": "coauthor"}, {"person_id": "562a0dba45cedb33988d6323", "name": "Di Wu", "relation": "coauthor"}, {"person_id": "542a4c87dabfae646d54ae1d", "name": "Yi Pan", "relation": "coauthor"}, {"person_id": "53f5a0dbdabfaefeeaf8045b", "name": "Wensheng Wang", "relation": "coauthor"}, {"person_id": "53f47b80dabfae8a6845cd1d", "name": "Jian Pei", "relation": "coauthor"}, {"person_id": "53f43868dabfaee0d9b77713", "name": "Heng Huang", "relation": "coauthor"}], "exe_time": 1.565138816833496}
{"Query_en": "What are the papers published by Chunxing Yin at Georgia Institute of Technology?", "Answer": ["Nimble GNN Embedding with Tensor-Train Decomposition", "A New Direction for Streaming Graph Analysis"], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Chunxing Yin', 'organization': 'Georgia Institute of Technology'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\npublications_title_list = [publication['title'] for publication in publications_list]\nfinal_result = publications_title_list\n", "result": ["Nimble GNN Embedding with Tensor-Train Decomposition", "A New Direction for Streaming Graph Analysis"], "exe_time": 1.817962408065796}
{"Query_en": "What is the citation count of the representative work of Michael Doron at Hebrew University of Jerusalem?", "Answer": 85, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Michael Doron', 'organization': 'Hebrew University of Jerusalem'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\n# Assuming the representative work is the one with the most citations\n# The list was sorted by citation\nmax_citation = publications_list[0]\nfinal_result = max_citation['num_citation']\n", "result": 85, "exe_time": 2.006596803665161}
{"Query_en": "In which year was the representative work of Haipei Sun at Meta published?", "Answer": 2019, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Haipei Sun', 'organization': 'Meta'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\nmax_citation = publications_list[0]\nfinal_result = max_citation['year']\n", "result": 2019, "exe_time": 1.7778315544128418}
{"Query_en": "Who are the authors of the representative work of Jie Tang at Department of Computer Science and Technology, Tsinghua University?", "Answer": ["Jie Tang", "Jing Zhang", "Limin Yao", "Juanzi Li", "Li Zhang", "Zhong Su"], "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Jie Tang', 'organization': 'Department of Computer Science and Technology, Tsinghua University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\ncoauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\nfinal_result = coauthors_name_list\n", "result": ["Juanzi Li", "Yuxiao Dong", "Jing Zhang", "Ming Ding", "Jiezhong Qiu", "Hongxia Yang", "Xiao Liu", "Yukuo Cen", "Ying Ding", "Jimeng Sun", "Chang Zhou", "Kuansan Wang", "Hanghang Tong", "Zhengxiao Du", "Bo Chen", "Jifan Yu", "Xu Zou", "Nitesh Chawla", "Fanjin Zhang", "Zhiyuan Liu", "Michalis Vazirgiannis", "Philip S. Yu", "Zhenyu Hou", "Jingren Zhou", "Xiao Liu（Tracy Xiao Liu）"], "exe_time": 2.3328237533569336}
{"Query_en": "What are the papers published by Tim Oates in Time Series field?", "Answer": ["Time Series Classification From Scratch With Deep Neural Networks: A Strong Baseline", "Imaging Time-Series To Improve Classification And Imputation", "Efficient progressive sampling", "The Effects of Training Set Size on Decision Tree Complexity", "Detecting spam blogs: a machine learning approach", "Cooperative information-gathering: a distributed problem-solving approach", "Identifying distinctive subsequences in multivariate time series by clustering", "Searching for Structure in Multiple Streams of Data", "A Method for Clustering the Experiences of a Mobile Robot that Accords with Human Judgments", "A Flexible Multichannel EEG Feature Extractor and Classifier for Seizure Detection"], "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Tim Oates', 'interest': 'Time Series'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\npublications_list = getPersonPubs(person_id = target_person_id)\npublications_title_list = [publication['title'] for publication in publications_list]\nfinal_result = publications_title_list\n", "result": ["Time Series Classification From Scratch With Deep Neural Networks: A Strong Baseline", "Imaging Time-Series To Improve Classification And Imputation", "Efficient progressive sampling", "The Effects of Training Set Size on Decision Tree Complexity", "Detecting spam blogs: a machine learning approach", "Cooperative information-gathering: a distributed problem-solving approach", "Identifying distinctive subsequences in multivariate time series by clustering", "Searching for Structure in Multiple Streams of Data", "A Method for Clustering the Experiences of a Mobile Robot that Accords with Human Judgments", "A Flexible Multichannel EEG Feature Extractor and Classifier for Seizure Detection"], "exe_time": 1.7380008697509766}
{"Query_en": "What is the citation count of the representative work of Hengrui Cai in Healthcare Studies field?", "Answer": 14, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Hengrui Cai', 'interest': 'Healthcare Studies'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_num_citation = target_publication_dict['num_citation']\nfinal_result = target_num_citation\n", "result": 14, "exe_time": 2.1085448265075684}
{"Query_en": "In which year was the representative work of Ved Chirayath in Fluid Lensing field published?", "Answer": 2020, "route": "searchPerson -> getPersonPubs", "code": "info = {'name': 'Ved Chirayath', 'interest': 'Fluid Lensing'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\n# The list was sorted by citation\ntarget_publication_dict = target_person_pubs[0]\ntarget_num_citation = target_publication_dict['num_citation']\nfinal_result = target_num_citation\n", "result": 103, "exe_time": 2.1163549423217773}
{"Query_en": "Who are the authors of the representative work of Yong Cui in Internet field?", "Answer": ["Mowei Wang", "Yong Cui", "Xin Wang", "Shihan Xiao", "Junchen Jiang"], "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Yong Cui', 'interest': 'Internet'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\nauthor_name_list = target_publication_dict['author_name_list']\nfinal_result = author_name_list\n", "result": "exe error", "exe_time": 1.9982218742370605}
{"Query_en": "Is Bo Li at Department of Computing Technologies, Swinburne University of Technology male or female?", "Answer": "male", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Bo Li', 'organization': 'Department of Computing Technologies, Swinburne University of Technology'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_gender = target_person_basic_info['gender']\nfinal_result = target_person_gender\n", "result": "male", "exe_time": 1.8765442371368408}
{"Query_en": "What is the title of Kunpeng Zhang at University of Maryland?", "Answer": "Associate Professor", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Kunpeng Zhang', 'organization': 'University of Maryland'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_title = target_person_basic_info['title']\nfinal_result = target_person_title\n", "result": "exe error", "exe_time": 1.7862658500671387}
{"Query_en": "What is the introduction of Chumeng Liang at University of Southern California?", "Answer": "", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Chumeng Liang', 'organization': 'University of Southern California'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_bio = target_person_basic_info['bio']\nfinal_result = target_person_bio\n", "result": "", "exe_time": 1.7886638641357422}
{"Query_en": "What is the educational background of Chen Ma at Department of Computer Science, City University of Hong Kong?", "Answer": "McGill University<br>Doctor of Philosophy (Ph.D.)Computer Science<br>2015 - 2021<br><br>Beijing Institute of Technology<br>Master of Engineering Software Engineering<br>2013 - 2015<br><br>Beijing Institute of Technology<br>Bachelor Software Engineering<br>2009 - 2013", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Chen Ma', 'organization': 'Department of Computer Science, City University of Hong Kong'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_education_experience = target_person_basic_info['education_experience']\nfinal_result = target_person_education_experience\n", "result": "McGill University<br>Doctor of Philosophy (Ph.D.)Computer Science<br>2015 - 2021<br><br>Beijing Institute of Technology<br>Master of Engineering Software Engineering<br>2013 - 2015<br><br>Beijing Institute of Technology<br>Bachelor Software Engineering<br>2009 - 2013", "exe_time": 2.048846483230591}
{"Query_en": "What is the email of Eitam Sheetrit at Ben-Gurion University?", "Answer": "eitams@bgu.ac.il", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Eitam Sheetrit', 'organization': 'Ben-Gurion University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_email = target_person_basic_info['email']\nfinal_result = target_person_email\n", "result": "eitams@bgu.ac.il", "exe_time": 1.8116319179534912}
{"Query_en": "Is Yu Zheng in Urban Computing field male or female?", "Answer": "male", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Is Yu Zheng', 'interest': 'Urban Computing'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_gender = target_person_basic_info['gender']\nfinal_result = target_person_gender\n", "result": "exe error", "exe_time": 1.7762746810913086}
{"Query_en": "What is the title of Shuhan Yuan in Differential Privacy field?", "Answer": "Assistant Professor", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Shuhan Yuan', 'interest': 'Differential Privacy'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_title = target_person_basic_info['title']\nfinal_result = target_person_title\n", "result": "exe error", "exe_time": 1.7965693473815918}
{"Query_en": "What is the introduction of Han Shao in Historical Information field?", "Answer": "I am interested in machine learning theory. In particular, I am interested in understanding empirical observations from a theoretical perspective.", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Han Shao', 'interest': 'Historical Information'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_bio = target_person_basic_info['bio']\nfinal_result = target_person_bio\n", "result": "I am interested in machine learning theory. In particular, I am interested in understanding empirical observations from a theoretical perspective.", "exe_time": 1.7627406120300293}
{"Query_en": "What is the educational background of Rui Zhou in Keyword Query field?", "Answer": "PhD in Computer Science from Swinburne in 2010,<br>MSc and BSc from Northeastern University, China in 2006 and 2004", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Rui Zhou', 'interest': 'Keyword Query'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_education_experience = target_person_basic_info['education_experience']\nfinal_result = target_person_education_experience\n", "result": "PhD in Computer Science from Swinburne in 2010,<br>MSc and BSc from Northeastern University, China in 2006 and 2004", "exe_time": 1.9581549167633057}
{"Query_en": "What is the email of Chi Zhang in Ovarian Cancer field?", "Answer": "czhang87@iu.edu", "route": "searchPerson -> getPersonBasicInfo", "code": "info = {'name': 'Chi Zhang', 'interest': 'Ovarian Cancer'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_basic_info = getPersonBasicInfo(person_id = target_person_id)\ntarget_person_email = target_person_basic_info['email']\nfinal_result = target_person_email\n", "result": "czhang87@iu.edu", "exe_time": 1.78078031539917}
{"Query_en": "Who among the collaborators of Junyuan Hong at ILLIDAN Lab, Department of Computer Science and Engineering, Michigan State University are researching in Federated Learning field?", "Answer": ["Haotao Wang"], "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Junyuan Hong', 'organization': 'ILLIDAN Lab, Department of Computer Science and Engineering, Michigan State University'}\nname = info['name']\norganization = info['organization']\ntarget_interest = info['interest']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\n\ntarget_coauthor_names = []\nfor coauthor in coauthors_list:\n    coauthor_id = coauthor['person_id']\n    coauthor_interests_list = getPersonInterest(person_id = coauthor_id)\n    if target_interest in coauthor_interests_list:\n        target_coauthor_names.append(coauthor['name'])\n\nfinal_result = target_coauthor_names\n", "result": "exe error", "exe_time": 2.8920035362243652}
{"Query_en": "Who has the highest citation count among the collaborators of Aniket Chakrabarti at Amazon?", "Answer": "Srinivasan Parthasarathy", "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Aniket\\xa0Chakrabarti', 'organization': 'Amazon'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\n\ncoauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\n\nfinal_result = coauthors_name_list\n", "result": ["Srinivasan Parthasarathy", "Manish Marwah", "Venu Satuluri"], "exe_time": 1.9452083110809326}
{"Query_en": "Who has the most published papers among the collaborators of Amin Banitalebi Dehkordi at Huawei Technologies Canada Co., Ltd.?", "Answer": "Jian Pei", "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Amin Banitalebi Dehkordi', 'organization': 'Huawei Technologies Canada Co., Ltd.'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\n\ncoauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\n\nfinal_result = coauthors_name_list\n", "result": ["Jian Pei"], "exe_time": 2.0082709789276123}
{"Query_en": "Who among the collaborators of Lingyu Zhang in Spatial Data field are at Didi Chuxinginstitution?", "Answer": ["Lulu Zhang"], "route": "searchPerson -> getCoauthors -> searchPerson", "code": "info = {'name': 'Lingyu Zhang', 'interest': 'Spatial Data'}\nname = info['name']\ninterest = info['interest']\ntarget_organization = info['organization']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthor_list = getCoauthors(person_id = target_person_id)\n\ntarget_coauthor_names = []\nfor coauthor in coauthor_list:\n    coauthor_name = coauthor['name']\n    coauthor_list = searchPerson(name = coauthor_name)\n    coauthor_info = coauthor_list[0]\n    coauthor_organization = coauthor_info['organization']\n    if coauthor_organization == target_organization:\n        target_coauthor_names.append(coauthor['name'])\n\nfinal_result = target_coauthor_names\n", "result": "exe error", "exe_time": 2.9668283462524414}
{"Query_en": "Who has the highest citation count among the collaborators of Ingrid J. Daubar in MARS field?", "Answer": "Gary Doran", "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Ingrid J. Daubar', 'interest': 'MARS'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\n\ncoauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\n\nfinal_result = coauthors_name_list\n", "result": ["Gary Doran"], "exe_time": 1.8909666538238525}
{"Query_en": "Who has the most published papers among the collaborators of Christo Kirov in Morphology field?", "Answer": "Lisa Singh", "route": "searchPerson -> getCoauthors", "code": "info = {'name': 'Christo Kirov', 'interest': 'Morphology'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors_list = getCoauthors(person_id = target_person_id)\n\ncoauthors_name_list = [coauthor['name'] for coauthor in coauthors_list]\n\nfinal_result = coauthors_name_list\n", "result": ["Lisa Singh"], "exe_time": 1.8821563720703125}
{"Query_en": "Who are the collaborators of the collaborators of Benyou Wang at School of Data Science, Chinese University of Hong Kong, Shenzhen?", "Answer": ["Benyou Wang", "Wenjie Li", "Jirong Wen", "Xin Jiang", "Lifeng Shang (Andrew L. Shang)", "Hang Li", "Yangqiu Song", "Zhiyuan Liu", "Benyou Wang", "Xiaodan Liang", "Haoli Bai", "Peng Zhang", "Zhiming Ma", "Yi Ren", "Fei Wu", "Deng Cai", "Xiaofei He", "Wilfred Siu Hung Ng", "Rongjie Huang", "Jieming Zhu", "Hongxia Yang", "Xu Tan", "Da Yan", "Kun Kuang", "Tie-Yan Liu", "Tao Qin", "Xiuqiang He", "Zijian Zhang", "Jin Yu", "Tat-Seng Chua", "Guandong Xu", "Xin Jiang", "Hang Li", "Zhiming Ma", "Benyou Wang", "Haoli Bai", "Mingyang Yi", "Linjun Yang", "Lei Chen"], "route": "searchPerson -> getCoauthors -> getCoauthors", "code": "info = {'name': 'Benyou Wang', 'organization': 'School of Data Science, Chinese University of Hong Kong, Shenzhen'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors1_list = getCoauthors(person_id = target_person_id)\n\ncoauthors2_list = []\nfor coauthor in coauthors1_list:\n    coauthors2_list.extend(getCoauthors(person_id = coauthor['person_id']))\n\ncoauthors2_names = [coauthor['name'] for coauthor in coauthors2_list]\n\nfinal_result = coauthors2_names\n", "result": ["Benyou Wang", "Wenjie Li", "Jirong Wen", "Xin Jiang", "Lifeng Shang (Andrew L. Shang)", "Hang Li", "Yangqiu Song", "Zhiyuan Liu", "Benyou Wang", "Xiaodan Liang", "Haoli Bai", "Peng Zhang", "Zhiming Ma", "Yi Ren", "Fei Wu", "Deng Cai", "Xiaofei He", "Wilfred Siu Hung Ng", "Rongjie Huang", "Jieming Zhu", "Hongxia Yang", "Xu Tan", "Da Yan", "Kun Kuang", "Tie-Yan Liu", "Tao Qin", "Xiuqiang He", "Zijian Zhang", "Jin Yu", "Tat-Seng Chua", "Guandong Xu", "Xin Jiang", "Hang Li", "Zhiming Ma", "Benyou Wang", "Haoli Bai", "Mingyang Yi", "Linjun Yang", "Lei Chen"], "exe_time": 2.5917012691497803}
{"Query_en": "Who are the collaborators of the collaborators of Giuseppe Ottaviano in Data Structure field?", "Answer": ["Vahab S. Mirrokni", "Hossein Esfandiari", "Jiezhong Qiu", "Chi Wang", "Jie Tang", "Brian Karrer", "Ashish Sharma", "Shuying Sun", "Janani Padmanabhan", " Li Xia", "Shuying Sun", "Janani Padmanabhan", "Linjun Yang", "Philip Pronin", "Jui-Ting Huang", "Giuseppe Ottaviano", " Li Xia", "Ashish Sharma", "Janani Padmanabhan", "Linjun Yang", "Philip Pronin", "Jui-Ting Huang", "Giuseppe Ottaviano", "Chenlin Meng", "Zijie Jay Wang", "Jason Wei", "Mo Tiwari", "Michihiro Yasunaga", "Allen Nie", "Aitor Lewkowycz", " Li Xia", "Ashish Sharma", "Shuying Sun", "Linjun Yang", "Philip Pronin", "Jui-Ting Huang", "Giuseppe Ottaviano", "Qi Tian", "Dacheng Tao", "Furu Wei", "Yang Yang", "Xi Chen (Stephen)", "Kuang-Huei Lee", "Kuansan Wang", "Eytan Bakshy", "Johan Ugander", "Jon M. Kleinberg", "Laxman Dhulipala", "Samuel (Sam) Daulton", " Li Xia", "Ashish Sharma", "Shuying Sun", "Janani Padmanabhan", "Linjun Yang", "Jui-Ting Huang", "Giuseppe Ottaviano", " Li Xia", "Ashish Sharma", "Shuying Sun", "Janani Padmanabhan", "Linjun Yang", "Philip Pronin", "Giuseppe Ottaviano"], "route": "searchPerson -> getCoauthors -> getCoauthors", "code": "info = {'name': 'Giuseppe Ottaviano', 'interest': 'Data Structure'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ncoauthors1_list = getCoauthors(person_id = target_person_id)\n\ncoauthors2_list = []\nfor coauthor in coauthors1_list:\n    coauthors2_list.extend(getCoauthors(person_id = coauthor['person_id']))\n\ncoauthors2_names = [coauthor['name'] for coauthor in coauthors2_list]\n\nfinal_result = coauthors2_names\n", "result": ["Vahab S. Mirrokni", "Hossein Esfandiari", "Jiezhong Qiu", "Chi Wang", "Jie Tang", "Brian Karrer", "Ashish Sharma", "Shuying Sun", "Janani Padmanabhan", " Li Xia", "Shuying Sun", "Janani Padmanabhan", "Linjun Yang", "Philip Pronin", "Jui-Ting Huang", "Giuseppe Ottaviano", " Li Xia", "Ashish Sharma", "Janani Padmanabhan", "Linjun Yang", "Philip Pronin", "Jui-Ting Huang", "Giuseppe Ottaviano", "Chenlin Meng", "Zijie Jay Wang", "Jason Wei", "Mo Tiwari", "Michihiro Yasunaga", "Allen Nie", "Aitor Lewkowycz", " Li Xia", "Ashish Sharma", "Shuying Sun", "Linjun Yang", "Philip Pronin", "Jui-Ting Huang", "Giuseppe Ottaviano", "Qi Tian", "Dacheng Tao", "Furu Wei", "Yang Yang", "Xi Chen (Stephen)", "Kuang-Huei Lee", "Kuansan Wang", "Eytan Bakshy", "Johan Ugander", "Jon M. Kleinberg", "Laxman Dhulipala", "Samuel (Sam) Daulton", " Li Xia", "Ashish Sharma", "Shuying Sun", "Janani Padmanabhan", "Linjun Yang", "Jui-Ting Huang", "Giuseppe Ottaviano", " Li Xia", "Ashish Sharma", "Shuying Sun", "Janani Padmanabhan", "Linjun Yang", "Philip Pronin", "Giuseppe Ottaviano"], "exe_time": 2.493483066558838}
{"Query_en": "What is the abstract of the representative work of Jun Ma at Amazon?", "Answer": "  Extracting structured knowledge from product profiles is crucial for various applications in e-Commerce. State-of-the-art approaches for knowledge extraction were each designed for a single category of product, and thus do not apply to real-life e-Commerce scenarios, which often contain thousands of diverse categories. This paper proposes TXtract, a taxonomy-aware knowledge extraction model that applies to thousands of product categories organized in a hierarchical taxonomy. Through category conditional self-attention and multi-task learning, our approach is both scalable, as it trains a single model for thousands of categories, and effective, as it extracts category-specific attribute values. Experiments on products from a taxonomy with 4,000 categories show that TXtract outperforms state-of-the-art approaches by up to 10% in F1 and 15% in coverage across all categories. ", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Jun Ma', 'organization': 'Amazon'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_abstract = target_publication_info['abstract']\nfinal_result = target_abstract\n", "result": "  Extracting structured knowledge from product profiles is crucial for various applications in e-Commerce. State-of-the-art approaches for knowledge extraction were each designed for a single category of product, and thus do not apply to real-life e-Commerce scenarios, which often contain thousands of diverse categories. This paper proposes TXtract, a taxonomy-aware knowledge extraction model that applies to thousands of product categories organized in a hierarchical taxonomy. Through category conditional self-attention and multi-task learning, our approach is both scalable, as it trains a single model for thousands of categories, and effective, as it extracts category-specific attribute values. Experiments on products from a taxonomy with 4,000 categories show that TXtract outperforms state-of-the-art approaches by up to 10% in F1 and 15% in coverage across all categories. ", "exe_time": 2.3974294662475586}
{"Query_en": "What is the PDF link of the representative work of Shichao Zhang at Guangxi Key Lab of Multi-source Information Mining and Security, Guangxi Normal University?", "Answer": "https://cz5waila03cyo0tux1owpyofgoryroob.oss-cn-beijing.aliyuncs.com/01/36/49/01364916D07732432B779B777FA0866A.pdf", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Shichao Zhang', 'organization': 'Guangxi Key Lab of Multi-source Information Mining and Security, Guangxi Normal University'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_pdf_link = target_publication_info['pdf_link']\nfinal_result = target_pdf_link\n", "result": "https://cz5waila03cyo0tux1owpyofgoryroob.oss-cn-beijing.aliyuncs.com/01/36/49/01364916D07732432B779B777FA0866A.pdf", "exe_time": 2.6640853881835938}
{"Query_en": "Which journal or conference included the representative work of Lei Cai at Microsoft?", "Answer": {"info": {"name": "IEEE Transactions on Pattern Analysis and Machine Intelligence"}, "issue": "9", "volume": "44"}, "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Lei Cai', 'organization': 'Microsoft'}\nname = info['name']\norganization = info['organization']\n\nperson_list = searchPerson(name = name, organization = organization)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_venue = target_publication_info['venue']\nfinal_result = target_venue\n", "result": {"info": {"name": "IEEE Transactions on Pattern Analysis and Machine Intelligence"}, "issue": "9", "volume": "44"}, "exe_time": 2.375692844390869}
{"Query_en": "What is the abstract of the representative work of Weinan Zhang in Reinforcement Learning field?", "Answer": "As a new way of training generative models, Generative AdversarialNet (GAN) that uses a discriminative model to guidethe training of the generative model has enjoyed considerablesuccess in generating real-valued data. However, it has limitationswhen the goal is for generating sequences of discretetokens. A major reason lies in that the discrete outputs fromthe generative model make it difficult to pass the gradient updatefrom the discriminative model to the generative model.Also, the discriminative model can only assess a completesequence, while for a partially generated sequence, it is nontrivialto balance its current score and the future one oncethe entire sequence has been generated. In this paper, we proposea sequence generation framework, called SeqGAN, tosolve the problems. Modeling the data generator as a stochasticpolicy in reinforcement learning (RL), SeqGAN bypassesthe generator differentiation problem by directly performinggradient policy update. The RL reward signal comes fromthe GAN discriminator judged on a complete sequence, andis passed back to the intermediate state-action steps usingMonte Carlo search. Extensive experiments on synthetic dataand real-world tasks demonstrate significant improvementsover strong baselines.", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Weinan Zhang', 'interest': 'Reinforcement Learning'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_abstract = target_publication_info['abstract']\nfinal_result = target_abstract\n", "result": "As a new way of training generative models, Generative AdversarialNet (GAN) that uses a discriminative model to guidethe training of the generative model has enjoyed considerablesuccess in generating real-valued data. However, it has limitationswhen the goal is for generating sequences of discretetokens. A major reason lies in that the discrete outputs fromthe generative model make it difficult to pass the gradient updatefrom the discriminative model to the generative model.Also, the discriminative model can only assess a completesequence, while for a partially generated sequence, it is nontrivialto balance its current score and the future one oncethe entire sequence has been generated. In this paper, we proposea sequence generation framework, called SeqGAN, tosolve the problems. Modeling the data generator as a stochasticpolicy in reinforcement learning (RL), SeqGAN bypassesthe generator differentiation problem by directly performinggradient policy update. The RL reward signal comes fromthe GAN discriminator judged on a complete sequence, andis passed back to the intermediate state-action steps usingMonte Carlo search. Extensive experiments on synthetic dataand real-world tasks demonstrate significant improvementsover strong baselines.", "exe_time": 2.4243781566619873}
{"Query_en": "What is the PDF link of the representative work of Yizhen Zhang in Object Recognition field?", "Answer": "https://cz5waila03cyo0tux1owpyofgoryroob.oss-cn-beijing.aliyuncs.com/77/BD/CD/77BDCD4B3FCA98DA44F672C15671D66A.pdf", "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Yizhen Zhang', 'interest': 'Object Recognition'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_pdf = target_publication_info['pdf_link']\nfinal_result = target_pdf\n", "result": "https://cz5waila03cyo0tux1owpyofgoryroob.oss-cn-beijing.aliyuncs.com/77/BD/CD/77BDCD4B3FCA98DA44F672C15671D66A.pdf", "exe_time": 2.448544979095459}
{"Query_en": "Which journal or conference included the representative work of Einoshin Suzuki in Data Mining field?", "Answer": {"info": {"name": "2016 IEEE CONFERENCE ON COMPUTER VISION AND PATTERN RECOGNITION (CVPR)"}, "issue": "1", "volume": "2016"}, "route": "searchPerson -> getPersonPubs -> getPublication", "code": "info = {'name': 'Einoshin Suzuki', 'interest': 'Data Mining'}\nname = info['name']\ninterest = info['interest']\n\nperson_list = searchPerson(name = name, interest = interest)\ntarget_person_info = person_list[0]\ntarget_person_id = target_person_info['person_id']\ntarget_person_pubs = getPersonPubs(person_id = target_person_id)\ntarget_publication_dict = target_person_pubs[0]\ntarget_publication_id = target_publication_dict['pub_id']\ntarget_publication_info = getPublication(pub_id = target_publication_id)\ntarget_venue = target_publication_info['venue']\nfinal_result = target_venue\n", "result": {"info": {"name": "2016 IEEE CONFERENCE ON COMPUTER VISION AND PATTERN RECOGNITION (CVPR)"}, "issue": "1", "volume": "2016"}, "exe_time": 2.4173827171325684}
